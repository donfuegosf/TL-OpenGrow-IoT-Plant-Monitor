
stm32_plant_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  0800af94  0800af94  0001af94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8b8  0800b8b8  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8b8  0800b8b8  0001b8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8c0  0800b8c0  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8c0  0800b8c0  0001b8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8c4  0800b8c4  0001b8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800b8c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004df4  20000058  0800b920  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e4c  0800b920  00024e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023a5e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004404  00000000  00000000  00043ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d10  00000000  00000000  00047ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b48  00000000  00000000  00049c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005662  00000000  00000000  0004b748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000179a4  00000000  00000000  00050daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e38f1  00000000  00000000  0006874e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c03f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b6c  00000000  00000000  0014c0bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000058 	.word	0x20000058
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800af7c 	.word	0x0800af7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000005c 	.word	0x2000005c
 800020c:	0800af7c 	.word	0x0800af7c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08c      	sub	sp, #48	; 0x30
 8000514:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f001 fc01 	bl	8001d1c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f90b 	bl	8000734 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 faa1 	bl	8000a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000522:	f000 fa69 	bl	80009f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000526:	f000 f977 	bl	8000818 <MX_ADC1_Init>
  MX_I2C1_Init();
 800052a:	f000 f9d5 	bl	80008d8 <MX_I2C1_Init>
  MX_SPI2_Init();
 800052e:	f000 fa01 	bl	8000934 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000532:	f000 fa37 	bl	80009a4 <MX_USART2_UART_Init>

  /* Initialize OLED display */
  configASSERT(SSD1306_Init() == SSD1306_OK);
 8000536:	f001 f975 	bl	8001824 <SSD1306_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b01      	cmp	r3, #1
 800053e:	d009      	beq.n	8000554 <main+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000544:	f383 8811 	msr	BASEPRI, r3
 8000548:	f3bf 8f6f 	isb	sy
 800054c:	f3bf 8f4f 	dsb	sy
 8000550:	623b      	str	r3, [r7, #32]
 8000552:	e7fe      	b.n	8000552 <main+0x42>

  /* Binary semaphores */
  Sensor_Sema_Handle = xSemaphoreCreateBinary();
 8000554:	2203      	movs	r2, #3
 8000556:	2100      	movs	r1, #0
 8000558:	2001      	movs	r0, #1
 800055a:	f007 ff11 	bl	8008380 <xQueueGenericCreate>
 800055e:	4602      	mov	r2, r0
 8000560:	4b5f      	ldr	r3, [pc, #380]	; (80006e0 <main+0x1d0>)
 8000562:	601a      	str	r2, [r3, #0]
  Oled_Buffer_Sema_Handle = xSemaphoreCreateBinary();
 8000564:	2203      	movs	r2, #3
 8000566:	2100      	movs	r1, #0
 8000568:	2001      	movs	r0, #1
 800056a:	f007 ff09 	bl	8008380 <xQueueGenericCreate>
 800056e:	4602      	mov	r2, r0
 8000570:	4b5c      	ldr	r3, [pc, #368]	; (80006e4 <main+0x1d4>)
 8000572:	601a      	str	r2, [r3, #0]
  Setpoint_Sema_Handle = xSemaphoreCreateBinary();
 8000574:	2203      	movs	r2, #3
 8000576:	2100      	movs	r1, #0
 8000578:	2001      	movs	r0, #1
 800057a:	f007 ff01 	bl	8008380 <xQueueGenericCreate>
 800057e:	4602      	mov	r2, r0
 8000580:	4b59      	ldr	r3, [pc, #356]	; (80006e8 <main+0x1d8>)
 8000582:	601a      	str	r2, [r3, #0]
  Tolerance_Sema_Handle = xSemaphoreCreateBinary();
 8000584:	2203      	movs	r2, #3
 8000586:	2100      	movs	r1, #0
 8000588:	2001      	movs	r0, #1
 800058a:	f007 fef9 	bl	8008380 <xQueueGenericCreate>
 800058e:	4602      	mov	r2, r0
 8000590:	4b56      	ldr	r3, [pc, #344]	; (80006ec <main+0x1dc>)
 8000592:	601a      	str	r2, [r3, #0]

  /* Assert correct initialization of semaphores */
  configASSERT(Sensor_Sema_Handle && Oled_Buffer_Sema_Handle && Setpoint_Sema_Handle && Tolerance_Sema_Handle);
 8000594:	4b52      	ldr	r3, [pc, #328]	; (80006e0 <main+0x1d0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00d      	beq.n	80005b8 <main+0xa8>
 800059c:	4b51      	ldr	r3, [pc, #324]	; (80006e4 <main+0x1d4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d009      	beq.n	80005b8 <main+0xa8>
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <main+0x1d8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d005      	beq.n	80005b8 <main+0xa8>
 80005ac:	4b4f      	ldr	r3, [pc, #316]	; (80006ec <main+0x1dc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <main+0xa8>
 80005b4:	2301      	movs	r3, #1
 80005b6:	e000      	b.n	80005ba <main+0xaa>
 80005b8:	2300      	movs	r3, #0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d109      	bne.n	80005d2 <main+0xc2>
 80005be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c2:	f383 8811 	msr	BASEPRI, r3
 80005c6:	f3bf 8f6f 	isb	sy
 80005ca:	f3bf 8f4f 	dsb	sy
 80005ce:	61fb      	str	r3, [r7, #28]
 80005d0:	e7fe      	b.n	80005d0 <main+0xc0>

  /* Initialize semaphore by giving */
  xSemaphoreGive(Sensor_Sema_Handle);
 80005d2:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <main+0x1d0>)
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	f007 ff30 	bl	8008440 <xQueueGenericSend>
  xSemaphoreGive(Oled_Buffer_Sema_Handle);
 80005e0:	4b40      	ldr	r3, [pc, #256]	; (80006e4 <main+0x1d4>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	f007 ff29 	bl	8008440 <xQueueGenericSend>
  xSemaphoreGive(Setpoint_Sema_Handle);
 80005ee:	4b3e      	ldr	r3, [pc, #248]	; (80006e8 <main+0x1d8>)
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	f007 ff22 	bl	8008440 <xQueueGenericSend>
  xSemaphoreGive(Tolerance_Sema_Handle);
 80005fc:	4b3b      	ldr	r3, [pc, #236]	; (80006ec <main+0x1dc>)
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	f007 ff1b 	bl	8008440 <xQueueGenericSend>
  TaskHandle_t OLED_Bitmap_Flip_TaskHandle;
  TaskHandle_t Water_Plant_TaskHandle;
  TaskHandle_t Flash_Update_TaskHandle;

  /* Register tasks (each with 128 byte stack size) */
  xTaskCreate(Sensor_Read, "Sensor_Read", 32, NULL, 8, &Sensor_Read_TaskHandle);
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	2308      	movs	r3, #8
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	2220      	movs	r2, #32
 8000618:	4935      	ldr	r1, [pc, #212]	; (80006f0 <main+0x1e0>)
 800061a:	4836      	ldr	r0, [pc, #216]	; (80006f4 <main+0x1e4>)
 800061c:	f008 fd67 	bl	80090ee <xTaskCreate>
  xTaskCreate(OLED_Update, "OLED_Update", 32, NULL, 5, &OLED_Update_TaskHandle);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2305      	movs	r3, #5
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	2220      	movs	r2, #32
 800062e:	4932      	ldr	r1, [pc, #200]	; (80006f8 <main+0x1e8>)
 8000630:	4832      	ldr	r0, [pc, #200]	; (80006fc <main+0x1ec>)
 8000632:	f008 fd5c 	bl	80090ee <xTaskCreate>
  xTaskCreate(OLED_Data_Write, "OLED_Data_Write", 64, NULL, 7, &OLED_Data_Write_TaskHandle);
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2307      	movs	r3, #7
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2300      	movs	r3, #0
 8000642:	2240      	movs	r2, #64	; 0x40
 8000644:	492e      	ldr	r1, [pc, #184]	; (8000700 <main+0x1f0>)
 8000646:	482f      	ldr	r0, [pc, #188]	; (8000704 <main+0x1f4>)
 8000648:	f008 fd51 	bl	80090ee <xTaskCreate>
  xTaskCreate(OLED_Bitmap_Flip, "OLED_Bitmap_Flip", 32, NULL, 6, &OLED_Bitmap_Flip_TaskHandle);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2306      	movs	r3, #6
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2300      	movs	r3, #0
 8000658:	2220      	movs	r2, #32
 800065a:	492b      	ldr	r1, [pc, #172]	; (8000708 <main+0x1f8>)
 800065c:	482b      	ldr	r0, [pc, #172]	; (800070c <main+0x1fc>)
 800065e:	f008 fd46 	bl	80090ee <xTaskCreate>
  xTaskCreate(Water_Plant, "Water_Plant", 64, NULL, 10, &Water_Plant_TaskHandle);
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	230a      	movs	r3, #10
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	2240      	movs	r2, #64	; 0x40
 8000670:	4927      	ldr	r1, [pc, #156]	; (8000710 <main+0x200>)
 8000672:	4828      	ldr	r0, [pc, #160]	; (8000714 <main+0x204>)
 8000674:	f008 fd3b 	bl	80090ee <xTaskCreate>
  xTaskCreate(Flash_Update, "Flash_Update", 32, NULL, 9, &Flash_Update_TaskHandle);
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2309      	movs	r3, #9
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	2220      	movs	r2, #32
 8000684:	4924      	ldr	r1, [pc, #144]	; (8000718 <main+0x208>)
 8000686:	4825      	ldr	r0, [pc, #148]	; (800071c <main+0x20c>)
 8000688:	f008 fd31 	bl	80090ee <xTaskCreate>

  /* Read the control data values from flash memory (or load default if blank) */
  HAL_FLASH_Unlock();
 800068c:	f002 fdcc 	bl	8003228 <HAL_FLASH_Unlock>
  uint16_t* flashCtrlData = (uint16_t*)FLASH_CONTROL_DATA_ADDR;
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <main+0x210>)
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  moistureSetpoint = flashCtrlData[0] == 0xFFFF ? PLANT_SETPOINT_DEFAULT : flashCtrlData[0];
 8000694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069c:	4293      	cmp	r3, r2
 800069e:	d002      	beq.n	80006a6 <main+0x196>
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	e001      	b.n	80006aa <main+0x19a>
 80006a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006aa:	4a1e      	ldr	r2, [pc, #120]	; (8000724 <main+0x214>)
 80006ac:	8013      	strh	r3, [r2, #0]
  moistureTolerance = flashCtrlData[1] == 0xFFFF ? PLANT_TOLERANCE_DEFAULT : flashCtrlData[1];
 80006ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b0:	3302      	adds	r3, #2
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d002      	beq.n	80006c2 <main+0x1b2>
 80006bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006be:	885b      	ldrh	r3, [r3, #2]
 80006c0:	e001      	b.n	80006c6 <main+0x1b6>
 80006c2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <main+0x218>)
 80006c8:	8013      	strh	r3, [r2, #0]
  HAL_FLASH_Lock();
 80006ca:	f002 fdcf 	bl	800326c <HAL_FLASH_Lock>

  /* Listen for commands from ESP I2C master (Need to always be listening for this) */
  HAL_I2C_Slave_Receive_IT(&hi2c1, &espCmdCode, 1);
 80006ce:	2201      	movs	r2, #1
 80006d0:	4916      	ldr	r1, [pc, #88]	; (800072c <main+0x21c>)
 80006d2:	4817      	ldr	r0, [pc, #92]	; (8000730 <main+0x220>)
 80006d4:	f003 fc88 	bl	8003fe8 <HAL_I2C_Slave_Receive_IT>

  /* Start scheduler */
  vTaskStartScheduler();
 80006d8:	f008 fe78 	bl	80093cc <vTaskStartScheduler>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <main+0x1cc>
 80006de:	bf00      	nop
 80006e0:	20004c48 	.word	0x20004c48
 80006e4:	20004be4 	.word	0x20004be4
 80006e8:	20004c94 	.word	0x20004c94
 80006ec:	20004c44 	.word	0x20004c44
 80006f0:	0800af94 	.word	0x0800af94
 80006f4:	08000db1 	.word	0x08000db1
 80006f8:	0800afa0 	.word	0x0800afa0
 80006fc:	08000b6d 	.word	0x08000b6d
 8000700:	0800afac 	.word	0x0800afac
 8000704:	08000c19 	.word	0x08000c19
 8000708:	0800afbc 	.word	0x0800afbc
 800070c:	08000b99 	.word	0x08000b99
 8000710:	0800afd0 	.word	0x0800afd0
 8000714:	08000ded 	.word	0x08000ded
 8000718:	0800afdc 	.word	0x0800afdc
 800071c:	08000f51 	.word	0x08000f51
 8000720:	08060000 	.word	0x08060000
 8000724:	20004d38 	.word	0x20004d38
 8000728:	20004da4 	.word	0x20004da4
 800072c:	20004be0 	.word	0x20004be0
 8000730:	20004b8c 	.word	0x20004b8c

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2234      	movs	r2, #52	; 0x34
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f00a fbd3 	bl	800aeee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <SystemClock_Config+0xdc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a2b      	ldr	r2, [pc, #172]	; (8000810 <SystemClock_Config+0xdc>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <SystemClock_Config+0xdc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <SystemClock_Config+0xe0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a25      	ldr	r2, [pc, #148]	; (8000814 <SystemClock_Config+0xe0>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <SystemClock_Config+0xe0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007a8:	23b4      	movs	r3, #180	; 0xb4
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4618      	mov	r0, r3
 80007be:	f005 fcd1 	bl	8006164 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c8:	f000 fcb8 	bl	800113c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007cc:	f005 f9dc 	bl	8005b88 <HAL_PWREx_EnableOverDrive>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007d6:	f000 fcb1 	bl	800113c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	2105      	movs	r1, #5
 80007f8:	4618      	mov	r0, r3
 80007fa:	f005 fa15 	bl	8005c28 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000804:	f000 fc9a 	bl	800113c <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3750      	adds	r7, #80	; 0x50
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_ADC1_Init+0xb4>)
 800082c:	4a28      	ldr	r2, [pc, #160]	; (80008d0 <MX_ADC1_Init+0xb8>)
 800082e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_ADC1_Init+0xb4>)
 8000832:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000836:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_ADC1_Init+0xb4>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_ADC1_Init+0xb4>)
 8000840:	2201      	movs	r2, #1
 8000842:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_ADC1_Init+0xb4>)
 8000846:	2200      	movs	r2, #0
 8000848:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_ADC1_Init+0xb4>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_ADC1_Init+0xb4>)
 8000854:	2200      	movs	r2, #0
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_ADC1_Init+0xb4>)
 800085a:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <MX_ADC1_Init+0xbc>)
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_ADC1_Init+0xb4>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_ADC1_Init+0xb4>)
 8000866:	2202      	movs	r2, #2
 8000868:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_ADC1_Init+0xb4>)
 800086c:	2201      	movs	r2, #1
 800086e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_ADC1_Init+0xb4>)
 8000874:	2201      	movs	r2, #1
 8000876:	615a      	str	r2, [r3, #20]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000878:	4814      	ldr	r0, [pc, #80]	; (80008cc <MX_ADC1_Init+0xb4>)
 800087a:	f001 fab3 	bl	8001de4 <HAL_ADC_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000884:	f000 fc5a 	bl	800113c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. */
  sConfig.Channel = ADC_CHANNEL_0;
 8000888:	2300      	movs	r3, #0
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800088c:	2301      	movs	r3, #1
 800088e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_ADC1_Init+0xb4>)
 800089a:	f001 fd37 	bl	800230c <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008a4:	f000 fc4a 	bl	800113c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. */
  sConfig.Channel = ADC_CHANNEL_1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_ADC1_Init+0xb4>)
 80008b6:	f001 fd29 	bl	800230c <HAL_ADC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008c0:	f000 fc3c 	bl	800113c <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20004c4c 	.word	0x20004c4c
 80008d0:	40012000 	.word	0x40012000
 80008d4:	0f000001 	.word	0x0f000001

080008d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_I2C1_Init+0x50>)
 80008de:	4a13      	ldr	r2, [pc, #76]	; (800092c <MX_I2C1_Init+0x54>)
 80008e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_I2C1_Init+0x50>)
 80008e4:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_I2C1_Init+0x58>)
 80008e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = STM32_I2C_ADDR;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_I2C1_Init+0x50>)
 80008f0:	22d0      	movs	r2, #208	; 0xd0
 80008f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_I2C1_Init+0x50>)
 80008f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_I2C1_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_I2C1_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_I2C1_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_I2C1_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_I2C1_Init+0x50>)
 8000916:	f003 f80f 	bl	8003938 <HAL_I2C_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000920:	f000 fc0c 	bl	800113c <Error_Handler>
  }
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20004b8c 	.word	0x20004b8c
 800092c:	40005400 	.word	0x40005400
 8000930:	000186a0 	.word	0x000186a0

08000934 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  Spi_ssd1306Write.Instance = SPI2;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SPI2_Init+0x68>)
 800093a:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <MX_SPI2_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  Spi_ssd1306Write.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI2_Init+0x68>)
 8000940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000944:	605a      	str	r2, [r3, #4]
  Spi_ssd1306Write.Init.Direction = SPI_DIRECTION_1LINE;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_SPI2_Init+0x68>)
 8000948:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800094c:	609a      	str	r2, [r3, #8]
  Spi_ssd1306Write.Init.DataSize = SPI_DATASIZE_8BIT;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_SPI2_Init+0x68>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  Spi_ssd1306Write.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI2_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  Spi_ssd1306Write.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_SPI2_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  Spi_ssd1306Write.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI2_Init+0x68>)
 8000962:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000966:	619a      	str	r2, [r3, #24]
  Spi_ssd1306Write.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI2_Init+0x68>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  Spi_ssd1306Write.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_SPI2_Init+0x68>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  Spi_ssd1306Write.Init.TIMode = SPI_TIMODE_DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI2_Init+0x68>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  Spi_ssd1306Write.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_SPI2_Init+0x68>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
  Spi_ssd1306Write.Init.CRCPolynomial = 10;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI2_Init+0x68>)
 8000982:	220a      	movs	r2, #10
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_SPI_Init(&Spi_ssd1306Write) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_SPI2_Init+0x68>)
 8000988:	f005 fe46 	bl	8006618 <HAL_SPI_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000992:	f000 fbd3 	bl	800113c <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20004be8 	.word	0x20004be8
 80009a0:	40003800 	.word	0x40003800

080009a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <MX_USART2_UART_Init+0x50>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 14400;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 80009b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009dc:	f006 fd04 	bl	80073e8 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e6:	f000 fba9 	bl	800113c <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20004cf8 	.word	0x20004cf8
 80009f4:	40004400 	.word	0x40004400

080009f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_DMA_Init+0x68>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <MX_DMA_Init+0x68>)
 8000a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_DMA_Init+0x68>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_DMA_Init+0x68>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <MX_DMA_Init+0x68>)
 8000a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <MX_DMA_Init+0x68>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	200f      	movs	r0, #15
 8000a3c:	f001 ffd8 	bl	80029f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 fff1 	bl	8002a28 <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2105      	movs	r1, #5
 8000a4a:	2038      	movs	r0, #56	; 0x38
 8000a4c:	f001 ffd0 	bl	80029f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a50:	2038      	movs	r0, #56	; 0x38
 8000a52:	f001 ffe9 	bl	8002a28 <HAL_NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a35      	ldr	r2, [pc, #212]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a2e      	ldr	r2, [pc, #184]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 -> On-board button */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <MX_GPIO_Init+0xf8>)
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481f      	ldr	r0, [pc, #124]	; (8000b60 <MX_GPIO_Init+0xfc>)
 8000ae4:	f002 fd58 	bl	8003598 <HAL_GPIO_Init>

  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2105      	movs	r1, #5
 8000aec:	2028      	movs	r0, #40	; 0x28
 8000aee:	f001 ff7f 	bl	80029f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000af2:	2028      	movs	r0, #40	; 0x28
 8000af4:	f001 ff98 	bl	8002a28 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : PA5 -> On-board LED */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000af8:	2320      	movs	r3, #32
 8000afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4815      	ldr	r0, [pc, #84]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000b10:	f002 fd42 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC7 PC8 -> Control pins for SSD1306 display */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000b14:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_GPIO_Init+0xfc>)
 8000b2e:	f002 fd33 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 -> Water pump transistor switch */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <MX_GPIO_Init+0x104>)
 8000b4a:	f002 fd25 	bl	8003598 <HAL_GPIO_Init>
}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	10210000 	.word	0x10210000
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40020400 	.word	0x40020400

08000b6c <OLED_Update>:
  * @brief  Update the OLED screen by writing contents of the buffer.
  * @param  argument: Not used
  * @retval None
  */
void OLED_Update(void *pvParameters)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if ( xSemaphoreTake( Oled_Buffer_Sema_Handle, (TickType_t) 0 ) == pdTRUE )
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <OLED_Update+0x28>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f007 ff54 	bl	8008a28 <xQueueSemaphoreTake>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d101      	bne.n	8000b8a <OLED_Update+0x1e>
		{
			SSD1306_UpdateScreen();
 8000b86:	f000 ff15 	bl	80019b4 <SSD1306_UpdateScreen>
		}

		vTaskDelay(RTOS_UPDATE_OLED_DISP);
 8000b8a:	2032      	movs	r0, #50	; 0x32
 8000b8c:	f008 fbea 	bl	8009364 <vTaskDelay>
		if ( xSemaphoreTake( Oled_Buffer_Sema_Handle, (TickType_t) 0 ) == pdTRUE )
 8000b90:	e7f0      	b.n	8000b74 <OLED_Update+0x8>
 8000b92:	bf00      	nop
 8000b94:	20004be4 	.word	0x20004be4

08000b98 <OLED_Bitmap_Flip>:
  * @brief  Switch between the 2 bitmaps on OLED display.
  * @param  argument: Not used
  * @retval None
  */
void OLED_Bitmap_Flip(void *pvParameters)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		static bool sudoFlip = true;

		if (xSemaphoreTake( Oled_Buffer_Sema_Handle, (TickType_t) 10 ) == pdTRUE )
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <OLED_Bitmap_Flip+0x70>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	210a      	movs	r1, #10
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f007 ff3e 	bl	8008a28 <xQueueSemaphoreTake>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d125      	bne.n	8000bfe <OLED_Bitmap_Flip+0x66>
		{
			SSD1306_DrawBitmap(0, 0, sudoFlip ? sudowoodopose1 : sudowoodopose2, 32, 32, SSD1306_PX_CLR_WHITE);
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <OLED_Bitmap_Flip+0x74>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <OLED_Bitmap_Flip+0x26>
 8000bba:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <OLED_Bitmap_Flip+0x78>)
 8000bbc:	e000      	b.n	8000bc0 <OLED_Bitmap_Flip+0x28>
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <OLED_Bitmap_Flip+0x7c>)
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	2320      	movs	r3, #32
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2320      	movs	r3, #32
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 fdb2 	bl	8001736 <SSD1306_DrawBitmap>

			sudoFlip = !sudoFlip;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <OLED_Bitmap_Flip+0x74>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bf14      	ite	ne
 8000bda:	2301      	movne	r3, #1
 8000bdc:	2300      	moveq	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f083 0301 	eor.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <OLED_Bitmap_Flip+0x74>)
 8000bee:	701a      	strb	r2, [r3, #0]

			xSemaphoreGive(Oled_Buffer_Sema_Handle);
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <OLED_Bitmap_Flip+0x70>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f007 fc21 	bl	8008440 <xQueueGenericSend>
		}

		vTaskDelay(RTOS_OLED_BITMAP_FLIP);
 8000bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c02:	f008 fbaf 	bl	8009364 <vTaskDelay>
	{
 8000c06:	e7cb      	b.n	8000ba0 <OLED_Bitmap_Flip+0x8>
 8000c08:	20004be4 	.word	0x20004be4
 8000c0c:	2000003c 	.word	0x2000003c
 8000c10:	0800b004 	.word	0x0800b004
 8000c14:	0800b084 	.word	0x0800b084

08000c18 <OLED_Data_Write>:
  * @brief  Function implementing the Update_OLED thread.
  * @param  argument: Not used
  * @retval None
  */
void OLED_Data_Write(void *pvParameters)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
		static bool isCtrlDisplay = false;

		/* String buffers to display on OLED screen */
		char *topDisp, *btmDisp;

		if (isCtrlDisplay) {
 8000c20:	4b51      	ldr	r3, [pc, #324]	; (8000d68 <OLED_Data_Write+0x150>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d034      	beq.n	8000c92 <OLED_Data_Write+0x7a>
			/* Append sensor values to display string */
			if( xSemaphoreTake( Setpoint_Sema_Handle, (TickType_t) 10 ) == pdTRUE &&  xSemaphoreTake( Tolerance_Sema_Handle, (TickType_t) 10 ) == pdTRUE)
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <OLED_Data_Write+0x154>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	210a      	movs	r1, #10
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f007 fefa 	bl	8008a28 <xQueueSemaphoreTake>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d126      	bne.n	8000c88 <OLED_Data_Write+0x70>
 8000c3a:	4b4d      	ldr	r3, [pc, #308]	; (8000d70 <OLED_Data_Write+0x158>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	210a      	movs	r1, #10
 8000c40:	4618      	mov	r0, r3
 8000c42:	f007 fef1 	bl	8008a28 <xQueueSemaphoreTake>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d11d      	bne.n	8000c88 <OLED_Data_Write+0x70>
			{
				itoa(moistureSetpoint, setpointDisp + 7, 10);
 8000c4c:	4b49      	ldr	r3, [pc, #292]	; (8000d74 <OLED_Data_Write+0x15c>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <OLED_Data_Write+0x160>)
 8000c54:	220a      	movs	r2, #10
 8000c56:	4619      	mov	r1, r3
 8000c58:	f00a f93c 	bl	800aed4 <itoa>
				itoa(moistureTolerance, toleranceDisp + 7, 10);
 8000c5c:	4b47      	ldr	r3, [pc, #284]	; (8000d7c <OLED_Data_Write+0x164>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	4b47      	ldr	r3, [pc, #284]	; (8000d80 <OLED_Data_Write+0x168>)
 8000c64:	220a      	movs	r2, #10
 8000c66:	4619      	mov	r1, r3
 8000c68:	f00a f934 	bl	800aed4 <itoa>

				xSemaphoreGive(Setpoint_Sema_Handle);
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <OLED_Data_Write+0x154>)
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	2300      	movs	r3, #0
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	f007 fbe3 	bl	8008440 <xQueueGenericSend>
				xSemaphoreGive(Tolerance_Sema_Handle);
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <OLED_Data_Write+0x158>)
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	f007 fbdc 	bl	8008440 <xQueueGenericSend>
			}

			topDisp = setpointDisp;
 8000c88:	4b3e      	ldr	r3, [pc, #248]	; (8000d84 <OLED_Data_Write+0x16c>)
 8000c8a:	60fb      	str	r3, [r7, #12]
			btmDisp = toleranceDisp;
 8000c8c:	4b3e      	ldr	r3, [pc, #248]	; (8000d88 <OLED_Data_Write+0x170>)
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	e023      	b.n	8000cda <OLED_Data_Write+0xc2>
		}
		else
		{
			/* Append sensor values to display string */
			if( xSemaphoreTake( Sensor_Sema_Handle, (TickType_t) 10 ) == pdTRUE  )
 8000c92:	4b3e      	ldr	r3, [pc, #248]	; (8000d8c <OLED_Data_Write+0x174>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	210a      	movs	r1, #10
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f007 fec5 	bl	8008a28 <xQueueSemaphoreTake>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d116      	bne.n	8000cd2 <OLED_Data_Write+0xba>
			{
				itoa(plant_sensors[0], soilMoistureDisp + 6, 10);
 8000ca4:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <OLED_Data_Write+0x178>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <OLED_Data_Write+0x17c>)
 8000cac:	220a      	movs	r2, #10
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f00a f910 	bl	800aed4 <itoa>
				itoa(plant_sensors[1], lightLevelDisp + 7, 10);
 8000cb4:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <OLED_Data_Write+0x178>)
 8000cb6:	885b      	ldrh	r3, [r3, #2]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <OLED_Data_Write+0x180>)
 8000cbc:	220a      	movs	r2, #10
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f00a f908 	bl	800aed4 <itoa>

				xSemaphoreGive(Sensor_Sema_Handle);
 8000cc4:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <OLED_Data_Write+0x174>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	f007 fbb7 	bl	8008440 <xQueueGenericSend>
			}

			topDisp = soilMoistureDisp;
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <OLED_Data_Write+0x184>)
 8000cd4:	60fb      	str	r3, [r7, #12]
			btmDisp = lightLevelDisp;
 8000cd6:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <OLED_Data_Write+0x188>)
 8000cd8:	60bb      	str	r3, [r7, #8]
		}


		/* Write sensor values to OLED buffer */
		if (xSemaphoreTake( Oled_Buffer_Sema_Handle, (TickType_t) 10 ) == pdTRUE )
 8000cda:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <OLED_Data_Write+0x18c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	210a      	movs	r1, #10
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f007 fea1 	bl	8008a28 <xQueueSemaphoreTake>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d11c      	bne.n	8000d26 <OLED_Data_Write+0x10e>
		{
			SSD1306_Fill_ToRight(40, SSD1306_PX_CLR_BLACK);
 8000cec:	2100      	movs	r1, #0
 8000cee:	2028      	movs	r0, #40	; 0x28
 8000cf0:	f000 fe82 	bl	80019f8 <SSD1306_Fill_ToRight>

			SSD1306_GotoXY(40, 5);
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	2028      	movs	r0, #40	; 0x28
 8000cf8:	f000 ff08 	bl	8001b0c <SSD1306_GotoXY>
			SSD1306_Puts(topDisp, &Font_7x10, SSD1306_PX_CLR_WHITE);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	492a      	ldr	r1, [pc, #168]	; (8000da8 <OLED_Data_Write+0x190>)
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f000 ff99 	bl	8001c38 <SSD1306_Puts>
			SSD1306_GotoXY(40, 21);
 8000d06:	2115      	movs	r1, #21
 8000d08:	2028      	movs	r0, #40	; 0x28
 8000d0a:	f000 feff 	bl	8001b0c <SSD1306_GotoXY>
			SSD1306_Puts(btmDisp, &Font_7x10, SSD1306_PX_CLR_WHITE);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4925      	ldr	r1, [pc, #148]	; (8000da8 <OLED_Data_Write+0x190>)
 8000d12:	68b8      	ldr	r0, [r7, #8]
 8000d14:	f000 ff90 	bl	8001c38 <SSD1306_Puts>

			xSemaphoreGive(Oled_Buffer_Sema_Handle);
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <OLED_Data_Write+0x18c>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	f007 fb8d 	bl	8008440 <xQueueGenericSend>
		}

		if (++cntTimer >= 100) {
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <OLED_Data_Write+0x194>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <OLED_Data_Write+0x194>)
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <OLED_Data_Write+0x194>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b63      	cmp	r3, #99	; 0x63
 8000d38:	d911      	bls.n	8000d5e <OLED_Data_Write+0x146>
			isCtrlDisplay = !isCtrlDisplay;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <OLED_Data_Write+0x150>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	bf14      	ite	ne
 8000d42:	2301      	movne	r3, #1
 8000d44:	2300      	moveq	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f083 0301 	eor.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <OLED_Data_Write+0x150>)
 8000d56:	701a      	strb	r2, [r3, #0]
			cntTimer = 0;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <OLED_Data_Write+0x194>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
		}

		vTaskDelay(RTOS_OLED_WRITE_DISP);
 8000d5e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000d62:	f008 faff 	bl	8009364 <vTaskDelay>
	{
 8000d66:	e75b      	b.n	8000c20 <OLED_Data_Write+0x8>
 8000d68:	20000075 	.word	0x20000075
 8000d6c:	20004c94 	.word	0x20004c94
 8000d70:	20004c44 	.word	0x20004c44
 8000d74:	20004d38 	.word	0x20004d38
 8000d78:	2000001f 	.word	0x2000001f
 8000d7c:	20004da4 	.word	0x20004da4
 8000d80:	2000002b 	.word	0x2000002b
 8000d84:	20000018 	.word	0x20000018
 8000d88:	20000024 	.word	0x20000024
 8000d8c:	20004c48 	.word	0x20004c48
 8000d90:	20004c40 	.word	0x20004c40
 8000d94:	20000006 	.word	0x20000006
 8000d98:	20000013 	.word	0x20000013
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	20004be4 	.word	0x20004be4
 8000da8:	20000044 	.word	0x20000044
 8000dac:	20000076 	.word	0x20000076

08000db0 <Sensor_Read>:
* @brief Take analog readings from capacitive soil moisture sensor and photoresistor circuit.
* @param argument: Not used
* @retval None
*/
void Sensor_Read(void *pvParameters)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		/* Read value from ADCs into sensor value variables */
		if( xSemaphoreTake( Sensor_Sema_Handle, (TickType_t) 10 ) == pdTRUE  )
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <Sensor_Read+0x30>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	210a      	movs	r1, #10
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f007 fe32 	bl	8008a28 <xQueueSemaphoreTake>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d104      	bne.n	8000dd4 <Sensor_Read+0x24>
		{
			/* Read value from ADC1 at pin GPIO A0 */
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)plant_sensors, 2);
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4905      	ldr	r1, [pc, #20]	; (8000de4 <Sensor_Read+0x34>)
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <Sensor_Read+0x38>)
 8000dd0:	f001 f98c 	bl	80020ec <HAL_ADC_Start_DMA>
		}

		vTaskDelay(RTOS_GET_SENSOR_DATA);
 8000dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd8:	f008 fac4 	bl	8009364 <vTaskDelay>
		if( xSemaphoreTake( Sensor_Sema_Handle, (TickType_t) 10 ) == pdTRUE  )
 8000ddc:	e7ec      	b.n	8000db8 <Sensor_Read+0x8>
 8000dde:	bf00      	nop
 8000de0:	20004c48 	.word	0x20004c48
 8000de4:	20004c40 	.word	0x20004c40
 8000de8:	20004c4c 	.word	0x20004c4c

08000dec <Water_Plant>:
* @brief Compare soil moisture readings to setpoints and water plant if necessary.
* @param argument: Not used
* @retval None
*/
void Water_Plant(void *pvParameters)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		/* Every 5 minutes beginning 5 min after initialization */
		vTaskDelay(RTOS_PLANT_WATER);
 8000df4:	4846      	ldr	r0, [pc, #280]	; (8000f10 <Water_Plant+0x124>)
 8000df6:	f008 fab5 	bl	8009364 <vTaskDelay>

		uint16_t moistureError = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	81fb      	strh	r3, [r7, #14]
		uint32_t plantPumpOnTime = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]

		static uint32_t PID_p, PID_i, PID_d, previousError = 0;

		/* PID calculation for how long to turn on water pump */
		if ((xSemaphoreTake(Sensor_Sema_Handle, (TickType_t) 10) == pdTRUE) && (xSemaphoreTake(Setpoint_Sema_Handle, (TickType_t) 10) == pdTRUE))
 8000e02:	4b44      	ldr	r3, [pc, #272]	; (8000f14 <Water_Plant+0x128>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	210a      	movs	r1, #10
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f007 fe0d 	bl	8008a28 <xQueueSemaphoreTake>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d11f      	bne.n	8000e54 <Water_Plant+0x68>
 8000e14:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <Water_Plant+0x12c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	210a      	movs	r1, #10
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f007 fe04 	bl	8008a28 <xQueueSemaphoreTake>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d116      	bne.n	8000e54 <Water_Plant+0x68>
		{
			moistureError = ((plant_sensors[0] - moistureSetpoint) > 0) ? (plant_sensors[0] - moistureSetpoint) : 0;
 8000e26:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <Water_Plant+0x130>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <Water_Plant+0x134>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000e36:	81fb      	strh	r3, [r7, #14]

			xSemaphoreGive(Sensor_Sema_Handle);
 8000e38:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <Water_Plant+0x128>)
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	f007 fafd 	bl	8008440 <xQueueGenericSend>
			xSemaphoreGive(Setpoint_Sema_Handle);
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <Water_Plant+0x12c>)
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f007 faf6 	bl	8008440 <xQueueGenericSend>
		}

		PID_p = moistureError * proportionCoeff;
 8000e54:	89fb      	ldrh	r3, [r7, #14]
 8000e56:	4a33      	ldr	r2, [pc, #204]	; (8000f24 <Water_Plant+0x138>)
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	4a32      	ldr	r2, [pc, #200]	; (8000f28 <Water_Plant+0x13c>)
 8000e60:	6013      	str	r3, [r2, #0]
		PID_i = (moistureError > 50) ? (PID_i + moistureError * integralCoeff) : 0;
 8000e62:	89fb      	ldrh	r3, [r7, #14]
 8000e64:	2b32      	cmp	r3, #50	; 0x32
 8000e66:	d908      	bls.n	8000e7a <Water_Plant+0x8e>
 8000e68:	89fb      	ldrh	r3, [r7, #14]
 8000e6a:	4a30      	ldr	r2, [pc, #192]	; (8000f2c <Water_Plant+0x140>)
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	fb02 f203 	mul.w	r2, r2, r3
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <Water_Plant+0x144>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	e000      	b.n	8000e7c <Water_Plant+0x90>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	4a2c      	ldr	r2, [pc, #176]	; (8000f30 <Water_Plant+0x144>)
 8000e7e:	6013      	str	r3, [r2, #0]
		PID_d = (moistureError - previousError > 0) ? (((moistureError - previousError) / RTOS_PLANT_WATER) * derivativeCoeff) : 0;
 8000e80:	89fa      	ldrh	r2, [r7, #14]
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <Water_Plant+0x148>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d00c      	beq.n	8000ea4 <Water_Plant+0xb8>
 8000e8a:	89fa      	ldrh	r2, [r7, #14]
 8000e8c:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <Water_Plant+0x148>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	4a29      	ldr	r2, [pc, #164]	; (8000f38 <Water_Plant+0x14c>)
 8000e94:	fba2 2303 	umull	r2, r3, r2, r3
 8000e98:	0c5b      	lsrs	r3, r3, #17
 8000e9a:	4a28      	ldr	r2, [pc, #160]	; (8000f3c <Water_Plant+0x150>)
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	e000      	b.n	8000ea6 <Water_Plant+0xba>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <Water_Plant+0x154>)
 8000ea8:	6013      	str	r3, [r2, #0]

		previousError = moistureError;
 8000eaa:	89fb      	ldrh	r3, [r7, #14]
 8000eac:	4a21      	ldr	r2, [pc, #132]	; (8000f34 <Water_Plant+0x148>)
 8000eae:	6013      	str	r3, [r2, #0]

		/* Check if the moisture error exceeds the tolerance */
		if (xSemaphoreTake(Tolerance_Sema_Handle, (TickType_t) 10) == pdTRUE)
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <Water_Plant+0x158>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	210a      	movs	r1, #10
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f007 fdb6 	bl	8008a28 <xQueueSemaphoreTake>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d114      	bne.n	8000eec <Water_Plant+0x100>
		{
			if (moistureError > moistureTolerance)
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <Water_Plant+0x15c>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	89fa      	ldrh	r2, [r7, #14]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d908      	bls.n	8000ede <Water_Plant+0xf2>
			{
				plantPumpOnTime = PID_p + PID_d + PID_i;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <Water_Plant+0x13c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <Water_Plant+0x154>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	441a      	add	r2, r3
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <Water_Plant+0x144>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	60bb      	str	r3, [r7, #8]
			}

			xSemaphoreGive(Tolerance_Sema_Handle);
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <Water_Plant+0x158>)
 8000ee0:	6818      	ldr	r0, [r3, #0]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f007 faaa 	bl	8008440 <xQueueGenericSend>
		}

		/* Water plant if on-time has a value */
		if (plantPumpOnTime > 0) {
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d080      	beq.n	8000df4 <Water_Plant+0x8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	4815      	ldr	r0, [pc, #84]	; (8000f4c <Water_Plant+0x160>)
 8000ef8:	f002 fce0 	bl	80038bc <HAL_GPIO_WritePin>
			vTaskDelay(plantPumpOnTime);
 8000efc:	68b8      	ldr	r0, [r7, #8]
 8000efe:	f008 fa31 	bl	8009364 <vTaskDelay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <Water_Plant+0x160>)
 8000f08:	f002 fcd8 	bl	80038bc <HAL_GPIO_WritePin>
	{
 8000f0c:	e772      	b.n	8000df4 <Water_Plant+0x8>
 8000f0e:	bf00      	nop
 8000f10:	000493e0 	.word	0x000493e0
 8000f14:	20004c48 	.word	0x20004c48
 8000f18:	20004c94 	.word	0x20004c94
 8000f1c:	20004c40 	.word	0x20004c40
 8000f20:	20004d38 	.word	0x20004d38
 8000f24:	20000030 	.word	0x20000030
 8000f28:	20000078 	.word	0x20000078
 8000f2c:	20000034 	.word	0x20000034
 8000f30:	2000007c 	.word	0x2000007c
 8000f34:	20000080 	.word	0x20000080
 8000f38:	6fd91d85 	.word	0x6fd91d85
 8000f3c:	20000038 	.word	0x20000038
 8000f40:	20000084 	.word	0x20000084
 8000f44:	20004c44 	.word	0x20004c44
 8000f48:	20004da4 	.word	0x20004da4
 8000f4c:	40020400 	.word	0x40020400

08000f50 <Flash_Update>:
* @brief If control data has been updated, update values in non-volatile memory.
* @param argument: Not used
* @retval None
*/
void Flash_Update(void *pvParameters)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if (controlUpdateFlag == SET)
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <Flash_Update+0x5c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d120      	bne.n	8000fa2 <Flash_Update+0x52>
		{
			HAL_FLASH_Unlock();
 8000f60:	f002 f962 	bl	8003228 <HAL_FLASH_Unlock>

			FLASH_Erase_Sector(FLASH_SECTOR_NUM, FLASH_VOLTAGE_RANGE_3);
 8000f64:	2102      	movs	r1, #2
 8000f66:	2007      	movs	r0, #7
 8000f68:	f002 face 	bl	8003508 <FLASH_Erase_Sector>

			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_CONTROL_DATA_ADDR, (uint64_t)moistureSetpoint);
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <Flash_Update+0x60>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f04f 0400 	mov.w	r4, #0
 8000f76:	461a      	mov	r2, r3
 8000f78:	4623      	mov	r3, r4
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <Flash_Update+0x64>)
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f002 f8ff 	bl	8003180 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_CONTROL_DATA_ADDR + 2, (uint64_t)moistureTolerance);
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <Flash_Update+0x68>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	f04f 0400 	mov.w	r4, #0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4623      	mov	r3, r4
 8000f90:	490a      	ldr	r1, [pc, #40]	; (8000fbc <Flash_Update+0x6c>)
 8000f92:	2001      	movs	r0, #1
 8000f94:	f002 f8f4 	bl	8003180 <HAL_FLASH_Program>

			controlUpdateFlag = RESET;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <Flash_Update+0x5c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]

			HAL_FLASH_Lock();
 8000f9e:	f002 f965 	bl	800326c <HAL_FLASH_Lock>
		}

		vTaskDelay(10000);
 8000fa2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fa6:	f008 f9dd 	bl	8009364 <vTaskDelay>
		if (controlUpdateFlag == SET)
 8000faa:	e7d5      	b.n	8000f58 <Flash_Update+0x8>
 8000fac:	20000074 	.word	0x20000074
 8000fb0:	20004d38 	.word	0x20004d38
 8000fb4:	08060000 	.word	0x08060000
 8000fb8:	20004da4 	.word	0x20004da4
 8000fbc:	08060002 	.word	0x08060002

08000fc0 <HAL_ADC_ConvCpltCallback>:
/******************************************************************
**************** Interrupt routine callbacks **********************
*******************************************************************/

/* Called on completion of ADC readings from analog sensors */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* pAdc1_sensorsRead) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	xSemaphoreGiveFromISR(Sensor_Sema_Handle, NULL);
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <HAL_ADC_ConvCpltCallback+0x1c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 fbc4 	bl	800875c <xQueueGiveFromISR>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20004c48 	.word	0x20004c48

08000fe0 <HAL_SPI_TxCpltCallback>:

/* SPI transmission callback - called when UpdateScreen() completes to update OLED display from buffer */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* pSpi2_oledWrite) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	SSD1306_Disp.state = SSD1306_STATE_READY;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_SPI_TxCpltCallback+0x2c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	719a      	strb	r2, [r3, #6]

	/*
	 * This callback is run during SSD1306_Init() before scheduler gets control
	 * thus, we must check that scheduler has control before any RTOS operations
	 */
	if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING)
 8000fee:	f008 fe2f 	bl	8009c50 <xTaskGetSchedulerState>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d105      	bne.n	8001004 <HAL_SPI_TxCpltCallback+0x24>
	{
		/* Give semaphore held on OLED buffer */
		xSemaphoreGiveFromISR(Oled_Buffer_Sema_Handle, NULL);
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_SPI_TxCpltCallback+0x30>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f007 fbac 	bl	800875c <xQueueGiveFromISR>
	}
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20004d3c 	.word	0x20004d3c
 8001010:	20004be4 	.word	0x20004be4

08001014 <HAL_I2C_SlaveRxCpltCallback>:

/* Received data from ESP8266 Master -> Read command and take appropriate action */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef* I2c1_espComm) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	/* Turn on on-board LED for visual indication */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2120      	movs	r1, #32
 8001020:	4834      	ldr	r0, [pc, #208]	; (80010f4 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8001022:	f002 fc4b 	bl	80038bc <HAL_GPIO_WritePin>

	/* Check command code sent */
	if (espCmdCode == ESP_REQ_SENSOR_DATA) {
 8001026:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b51      	cmp	r3, #81	; 0x51
 800102c:	d117      	bne.n	800105e <HAL_I2C_SlaveRxCpltCallback+0x4a>
		/* Send soil moisture and light sensor data to ESP8266 (4 bytes) */
		if(xSemaphoreTakeFromISR(Sensor_Sema_Handle, NULL) == pdTRUE)
 800102e:	4b33      	ldr	r3, [pc, #204]	; (80010fc <HAL_I2C_SlaveRxCpltCallback+0xe8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f007 fdfe 	bl	8008c38 <xQueueReceiveFromISR>
 800103c:	4603      	mov	r3, r0
 800103e:	2b01      	cmp	r3, #1
 8001040:	d14a      	bne.n	80010d8 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		{
			/* Transmit data to ESP8266 */
			HAL_I2C_Slave_Transmit(I2c1_espComm, (uint8_t*)plant_sensors, sizeof(plant_sensors)/sizeof(uint8_t), 2000);
 8001042:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001046:	2204      	movs	r2, #4
 8001048:	492d      	ldr	r1, [pc, #180]	; (8001100 <HAL_I2C_SlaveRxCpltCallback+0xec>)
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f002 fdac 	bl	8003ba8 <HAL_I2C_Slave_Transmit>

			xSemaphoreGiveFromISR(Sensor_Sema_Handle, NULL);
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_I2C_SlaveRxCpltCallback+0xe8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f007 fb80 	bl	800875c <xQueueGiveFromISR>
 800105c:	e03c      	b.n	80010d8 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		}
	}
	else if (espCmdCode == ESP_SEND_MOIS_SETPOINT) {
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b44      	cmp	r3, #68	; 0x44
 8001064:	d11a      	bne.n	800109c <HAL_I2C_SlaveRxCpltCallback+0x88>
		/* Read updated setpoint value */
		if(xSemaphoreTakeFromISR(Setpoint_Sema_Handle, NULL) == pdTRUE)
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f007 fde2 	bl	8008c38 <xQueueReceiveFromISR>
 8001074:	4603      	mov	r3, r0
 8001076:	2b01      	cmp	r3, #1
 8001078:	d12e      	bne.n	80010d8 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		{
			/* Transmit data to ESP8266 */
			HAL_I2C_Slave_Receive(I2c1_espComm, (uint8_t*)&moistureSetpoint, 2, 2000);
 800107a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800107e:	2202      	movs	r2, #2
 8001080:	4921      	ldr	r1, [pc, #132]	; (8001108 <HAL_I2C_SlaveRxCpltCallback+0xf4>)
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f002 fea6 	bl	8003dd4 <HAL_I2C_Slave_Receive>

			/* Set flag so setpoint will be updated in flash memory */
			controlUpdateFlag = SET;
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]

			xSemaphoreGiveFromISR(Setpoint_Sema_Handle, NULL);
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f007 fb61 	bl	800875c <xQueueGiveFromISR>
 800109a:	e01d      	b.n	80010d8 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		}
	}
	else if (espCmdCode == ESP_SEND_MOIS_TOLERANCE) {
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b46      	cmp	r3, #70	; 0x46
 80010a2:	d119      	bne.n	80010d8 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		/* Read updated tolerance value */
		if(xSemaphoreTakeFromISR(Tolerance_Sema_Handle, NULL) == pdTRUE)
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f007 fdc3 	bl	8008c38 <xQueueReceiveFromISR>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10f      	bne.n	80010d8 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		{
			/* Transmit data to ESP8266 */
			HAL_I2C_Slave_Receive(I2c1_espComm, (uint8_t*)&moistureTolerance, 2, 2000);
 80010b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010bc:	2202      	movs	r2, #2
 80010be:	4915      	ldr	r1, [pc, #84]	; (8001114 <HAL_I2C_SlaveRxCpltCallback+0x100>)
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f002 fe87 	bl	8003dd4 <HAL_I2C_Slave_Receive>

			/* Set flag so tolerance will be updated in flash memory */
			controlUpdateFlag = SET;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]

			xSemaphoreGiveFromISR(Tolerance_Sema_Handle, NULL);
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f007 fb42 	bl	800875c <xQueueGiveFromISR>
		}
	}

	/* Turn off on-board LED */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2120      	movs	r1, #32
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 80010de:	f002 fbed 	bl	80038bc <HAL_GPIO_WritePin>

	/* Keep in slave receive mode - should always be listening for commands from ESP8266 */
	HAL_I2C_Slave_Receive_IT(I2c1_espComm, &espCmdCode, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	4904      	ldr	r1, [pc, #16]	; (80010f8 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f002 ff7e 	bl	8003fe8 <HAL_I2C_Slave_Receive_IT>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020000 	.word	0x40020000
 80010f8:	20004be0 	.word	0x20004be0
 80010fc:	20004c48 	.word	0x20004c48
 8001100:	20004c40 	.word	0x20004c40
 8001104:	20004c94 	.word	0x20004c94
 8001108:	20004d38 	.word	0x20004d38
 800110c:	20000074 	.word	0x20000074
 8001110:	20004c44 	.word	0x20004c44
 8001114:	20004da4 	.word	0x20004da4

08001118 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800112a:	f000 fe19 	bl	8001d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40001000 	.word	0x40001000

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_MspInit+0x54>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <HAL_MspInit+0x54>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_MspInit+0x54>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_MspInit+0x54>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_MspInit+0x54>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_MspInit+0x54>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	210f      	movs	r1, #15
 800118e:	f06f 0001 	mvn.w	r0, #1
 8001192:	f001 fc2d 	bl	80029f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a33      	ldr	r2, [pc, #204]	; (8001290 <HAL_ADC_MspInit+0xec>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d15f      	bne.n	8001286 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b32      	ldr	r3, [pc, #200]	; (8001294 <HAL_ADC_MspInit+0xf0>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a31      	ldr	r2, [pc, #196]	; (8001294 <HAL_ADC_MspInit+0xf0>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <HAL_ADC_MspInit+0xf0>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <HAL_ADC_MspInit+0xf0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a2a      	ldr	r2, [pc, #168]	; (8001294 <HAL_ADC_MspInit+0xf0>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_ADC_MspInit+0xf0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011fe:	2303      	movs	r3, #3
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4821      	ldr	r0, [pc, #132]	; (8001298 <HAL_ADC_MspInit+0xf4>)
 8001212:	f002 f9c1 	bl	8003598 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <HAL_ADC_MspInit+0xf8>)
 8001218:	4a21      	ldr	r2, [pc, #132]	; (80012a0 <HAL_ADC_MspInit+0xfc>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <HAL_ADC_MspInit+0xf8>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001222:	4b1e      	ldr	r3, [pc, #120]	; (800129c <HAL_ADC_MspInit+0xf8>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_ADC_MspInit+0xf8>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <HAL_ADC_MspInit+0xf8>)
 8001230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001234:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_ADC_MspInit+0xf8>)
 8001238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800123c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_ADC_MspInit+0xf8>)
 8001240:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001244:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_ADC_MspInit+0xf8>)
 8001248:	2200      	movs	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_ADC_MspInit+0xf8>)
 800124e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001252:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_ADC_MspInit+0xf8>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <HAL_ADC_MspInit+0xf8>)
 800125c:	f001 fbf2 	bl	8002a44 <HAL_DMA_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001266:	f7ff ff69 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <HAL_ADC_MspInit+0xf8>)
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_ADC_MspInit+0xf8>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2105      	movs	r1, #5
 800127a:	2012      	movs	r0, #18
 800127c:	f001 fbb8 	bl	80029f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001280:	2012      	movs	r0, #18
 8001282:	f001 fbd1 	bl	8002a28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40012000 	.word	0x40012000
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000
 800129c:	20004c98 	.word	0x20004c98
 80012a0:	40026410 	.word	0x40026410

080012a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a21      	ldr	r2, [pc, #132]	; (8001348 <HAL_I2C_MspInit+0xa4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d13c      	bne.n	8001340 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_I2C_MspInit+0xa8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a1f      	ldr	r2, [pc, #124]	; (800134c <HAL_I2C_MspInit+0xa8>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <HAL_I2C_MspInit+0xa8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e8:	2312      	movs	r3, #18
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f4:	2304      	movs	r3, #4
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4814      	ldr	r0, [pc, #80]	; (8001350 <HAL_I2C_MspInit+0xac>)
 8001300:	f002 f94a 	bl	8003598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_I2C_MspInit+0xa8>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <HAL_I2C_MspInit+0xa8>)
 800130e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001312:	6413      	str	r3, [r2, #64]	; 0x40
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_I2C_MspInit+0xa8>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2105      	movs	r1, #5
 8001324:	201f      	movs	r0, #31
 8001326:	f001 fb63 	bl	80029f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800132a:	201f      	movs	r0, #31
 800132c:	f001 fb7c 	bl	8002a28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2105      	movs	r1, #5
 8001334:	2020      	movs	r0, #32
 8001336:	f001 fb5b 	bl	80029f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800133a:	2020      	movs	r0, #32
 800133c:	f001 fb74 	bl	8002a28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40005400 	.word	0x40005400
 800134c:	40023800 	.word	0x40023800
 8001350:	40020400 	.word	0x40020400

08001354 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a34      	ldr	r2, [pc, #208]	; (8001444 <HAL_SPI_MspInit+0xf0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d162      	bne.n	800143c <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b33      	ldr	r3, [pc, #204]	; (8001448 <HAL_SPI_MspInit+0xf4>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a32      	ldr	r2, [pc, #200]	; (8001448 <HAL_SPI_MspInit+0xf4>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b30      	ldr	r3, [pc, #192]	; (8001448 <HAL_SPI_MspInit+0xf4>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <HAL_SPI_MspInit+0xf4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a2b      	ldr	r2, [pc, #172]	; (8001448 <HAL_SPI_MspInit+0xf4>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <HAL_SPI_MspInit+0xf4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80013ae:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013c0:	2305      	movs	r3, #5
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4820      	ldr	r0, [pc, #128]	; (800144c <HAL_SPI_MspInit+0xf8>)
 80013cc:	f002 f8e4 	bl	8003598 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 80013d2:	4a20      	ldr	r2, [pc, #128]	; (8001454 <HAL_SPI_MspInit+0x100>)
 80013d4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 80013de:	2240      	movs	r2, #64	; 0x40
 80013e0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 80013ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ee:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 8001404:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001408:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001410:	480f      	ldr	r0, [pc, #60]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 8001412:	f001 fb17 	bl	8002a44 <HAL_DMA_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800141c:	f7ff fe8e 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 8001424:	649a      	str	r2, [r3, #72]	; 0x48
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_SPI_MspInit+0xfc>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2105      	movs	r1, #5
 8001430:	2024      	movs	r0, #36	; 0x24
 8001432:	f001 fadd 	bl	80029f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001436:	2024      	movs	r0, #36	; 0x24
 8001438:	f001 faf6 	bl	8002a28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40003800 	.word	0x40003800
 8001448:	40023800 	.word	0x40023800
 800144c:	40020400 	.word	0x40020400
 8001450:	20004d44 	.word	0x20004d44
 8001454:	40026070 	.word	0x40026070

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_UART_MspInit+0x94>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d133      	bne.n	80014e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <HAL_UART_MspInit+0x98>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <HAL_UART_MspInit+0x98>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_UART_MspInit+0x98>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_UART_MspInit+0x98>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <HAL_UART_MspInit+0x98>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_UART_MspInit+0x98>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b2:	230c      	movs	r3, #12
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c2:	2307      	movs	r3, #7
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4809      	ldr	r0, [pc, #36]	; (80014f4 <HAL_UART_MspInit+0x9c>)
 80014ce:	f002 f863 	bl	8003598 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2105      	movs	r1, #5
 80014d6:	2026      	movs	r0, #38	; 0x26
 80014d8:	f001 fa8a 	bl	80029f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014dc:	2026      	movs	r0, #38	; 0x26
 80014de:	f001 faa3 	bl	8002a28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40004400 	.word	0x40004400
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000

080014f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	2036      	movs	r0, #54	; 0x36
 800150e:	f001 fa6f 	bl	80029f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001512:	2036      	movs	r0, #54	; 0x36
 8001514:	f001 fa88 	bl	8002a28 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <HAL_InitTick+0xa4>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a1e      	ldr	r2, [pc, #120]	; (800159c <HAL_InitTick+0xa4>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_InitTick+0xa4>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001534:	f107 0210 	add.w	r2, r7, #16
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f004 fc8c 	bl	8005e5c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001544:	f004 fc62 	bl	8005e0c <HAL_RCC_GetPCLK1Freq>
 8001548:	4603      	mov	r3, r0
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <HAL_InitTick+0xa8>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	3b01      	subs	r3, #1
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_InitTick+0xac>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <HAL_InitTick+0xb0>)
 8001560:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_InitTick+0xac>)
 8001564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001568:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_InitTick+0xac>)
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_InitTick+0xac>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_InitTick+0xac>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_InitTick+0xac>)
 800157e:	f005 fcf5 	bl	8006f6c <HAL_TIM_Base_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d104      	bne.n	8001592 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <HAL_InitTick+0xac>)
 800158a:	f005 fd24 	bl	8006fd6 <HAL_TIM_Base_Start_IT>
 800158e:	4603      	mov	r3, r0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3730      	adds	r7, #48	; 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	20004da8 	.word	0x20004da8
 80015a8:	40001000 	.word	0x40001000

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <EXTI15_10_IRQHandler>:

/**
  * @brief Interrupt handler used for PC13 falling edge -> on-board button press
  */
void EXTI15_10_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	/* Prevent button debouncing */
	HAL_Delay(200);
 80015e4:	20c8      	movs	r0, #200	; 0xc8
 80015e6:	f000 fbdb 	bl	8001da0 <HAL_Delay>

	/* If PC13 then toggle OLED power */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <EXTI15_10_IRQHandler+0x28>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <EXTI15_10_IRQHandler+0x1a>
		SSD1306_Switch();
 80015f6:	f000 f9cd 	bl	8001994 <SSD1306_Switch>
	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015fe:	f002 f977 	bl	80038f0 <HAL_GPIO_EXTI_IRQHandler>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40013c00 	.word	0x40013c00

0800160c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA1_Stream4_IRQHandler+0x10>)
 8001612:	f001 fb3f 	bl	8002c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20004d44 	.word	0x20004d44

08001620 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <ADC_IRQHandler+0x10>)
 8001626:	f000 fc20 	bl	8001e6a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20004c4c 	.word	0x20004c4c

08001634 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <I2C1_EV_IRQHandler+0x10>)
 800163a:	f002 fd45 	bl	80040c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20004b8c 	.word	0x20004b8c

08001648 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <I2C1_ER_IRQHandler+0x18>)
 800164e:	f002 fea1 	bl	8004394 <HAL_I2C_ER_IRQHandler>

  /* Listen for next commands in case error occurs */
  HAL_I2C_Slave_Receive_IT(&hi2c1, &espCmdCode, 1);
 8001652:	2201      	movs	r2, #1
 8001654:	4903      	ldr	r1, [pc, #12]	; (8001664 <I2C1_ER_IRQHandler+0x1c>)
 8001656:	4802      	ldr	r0, [pc, #8]	; (8001660 <I2C1_ER_IRQHandler+0x18>)
 8001658:	f002 fcc6 	bl	8003fe8 <HAL_I2C_Slave_Receive_IT>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20004b8c 	.word	0x20004b8c
 8001664:	20004be0 	.word	0x20004be0

08001668 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&Spi_ssd1306Write);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <SPI2_IRQHandler+0x10>)
 800166e:	f005 fa19 	bl	8006aa4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20004be8 	.word	0x20004be8

0800167c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <USART2_IRQHandler+0x10>)
 8001682:	f005 feff 	bl	8007484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20004cf8 	.word	0x20004cf8

08001690 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <TIM6_DAC_IRQHandler+0x10>)
 8001696:	f005 fcc2 	bl	800701e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20004da8 	.word	0x20004da8

080016a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA2_Stream0_IRQHandler+0x10>)
 80016aa:	f001 faf3 	bl	8002c94 <HAL_DMA_IRQHandler>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20004c98 	.word	0x20004c98

080016b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <SystemInit+0x28>)
 80016be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c2:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <SystemInit+0x28>)
 80016c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SystemInit+0x28>)
 80016ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d2:	609a      	str	r2, [r3, #8]
#endif
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016ea:	e003      	b.n	80016f4 <LoopCopyDataInit>

080016ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016f2:	3104      	adds	r1, #4

080016f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016f4:	480b      	ldr	r0, [pc, #44]	; (8001724 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016fc:	d3f6      	bcc.n	80016ec <CopyDataInit>
  ldr  r2, =_sbss
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001700:	e002      	b.n	8001708 <LoopFillZerobss>

08001702 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001702:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001704:	f842 3b04 	str.w	r3, [r2], #4

08001708 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800170a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800170c:	d3f9      	bcc.n	8001702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800170e:	f7ff ffd3 	bl	80016b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f009 fba3 	bl	800ae5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7fe fefb 	bl	8000510 <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001720:	0800b8c8 	.word	0x0800b8c8
  ldr  r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001728:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 800172c:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 8001730:	20004e4c 	.word	0x20004e4c

08001734 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <CAN1_RX0_IRQHandler>

08001736 <SSD1306_DrawBitmap>:
/*********************************************************
********** SSD1306 Driver Functions API - Display Ctrl
*********************************************************/

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char *bitmap, int16_t w, int16_t h, uint8_t colour)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	461a      	mov	r2, r3
 8001740:	4603      	mov	r3, r0
 8001742:	81fb      	strh	r3, [r7, #14]
 8001744:	460b      	mov	r3, r1
 8001746:	81bb      	strh	r3, [r7, #12]
 8001748:	4613      	mov	r3, r2
 800174a:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800174c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001750:	3307      	adds	r3, #7
 8001752:	2b00      	cmp	r3, #0
 8001754:	da00      	bge.n	8001758 <SSD1306_DrawBitmap+0x22>
 8001756:	3307      	adds	r3, #7
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	823b      	strh	r3, [r7, #16]
	uint8_t byte = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	75fb      	strb	r3, [r7, #23]

	for (int16_t j = 0; j < h; j++, y++)
 8001760:	2300      	movs	r3, #0
 8001762:	82bb      	strh	r3, [r7, #20]
 8001764:	e054      	b.n	8001810 <SSD1306_DrawBitmap+0xda>
	{
		for (int16_t i = 0; i < w; i++)
 8001766:	2300      	movs	r3, #0
 8001768:	827b      	strh	r3, [r7, #18]
 800176a:	e03f      	b.n	80017ec <SSD1306_DrawBitmap+0xb6>
		{
			if (i & 7)
 800176c:	8a7b      	ldrh	r3, [r7, #18]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <SSD1306_DrawBitmap+0x48>
			{
				byte <<= 1;
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	75fb      	strb	r3, [r7, #23]
 800177c:	e012      	b.n	80017a4 <SSD1306_DrawBitmap+0x6e>
			}
			else
			{
				byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800177e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001782:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001786:	fb02 f203 	mul.w	r2, r2, r3
 800178a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800178e:	2b00      	cmp	r3, #0
 8001790:	da00      	bge.n	8001794 <SSD1306_DrawBitmap+0x5e>
 8001792:	3307      	adds	r3, #7
 8001794:	10db      	asrs	r3, r3, #3
 8001796:	b21b      	sxth	r3, r3
 8001798:	4413      	add	r3, r2
 800179a:	461a      	mov	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	75fb      	strb	r3, [r7, #23]
			}

			if (byte & 0x80)
 80017a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	da0a      	bge.n	80017c2 <SSD1306_DrawBitmap+0x8c>
			{
				SSD1306_DrawPixel(x + i, y, colour);
 80017ac:	89fa      	ldrh	r2, [r7, #14]
 80017ae:	8a7b      	ldrh	r3, [r7, #18]
 80017b0:	4413      	add	r3, r2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	89b9      	ldrh	r1, [r7, #12]
 80017b6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f946 	bl	8001a4c <SSD1306_DrawPixel>
 80017c0:	e00e      	b.n	80017e0 <SSD1306_DrawBitmap+0xaa>
			}
			else
			{
				SSD1306_DrawPixel(x + i, y, !colour);
 80017c2:	89fa      	ldrh	r2, [r7, #14]
 80017c4:	8a7b      	ldrh	r3, [r7, #18]
 80017c6:	4413      	add	r3, r2
 80017c8:	b298      	uxth	r0, r3
 80017ca:	89b9      	ldrh	r1, [r7, #12]
 80017cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf0c      	ite	eq
 80017d4:	2301      	moveq	r3, #1
 80017d6:	2300      	movne	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	f000 f936 	bl	8001a4c <SSD1306_DrawPixel>
		for (int16_t i = 0; i < w; i++)
 80017e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	827b      	strh	r3, [r7, #18]
 80017ec:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80017f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbb9      	blt.n	800176c <SSD1306_DrawBitmap+0x36>
	for (int16_t j = 0; j < h; j++, y++)
 80017f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3301      	adds	r3, #1
 8001800:	b29b      	uxth	r3, r3
 8001802:	82bb      	strh	r3, [r7, #20]
 8001804:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001808:	b29b      	uxth	r3, r3
 800180a:	3301      	adds	r3, #1
 800180c:	b29b      	uxth	r3, r3
 800180e:	81bb      	strh	r3, [r7, #12]
 8001810:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001814:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001818:	429a      	cmp	r2, r3
 800181a:	dba4      	blt.n	8001766 <SSD1306_DrawBitmap+0x30>
			}
		}
	}
}
 800181c:	bf00      	nop
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <SSD1306_Init>:
 * @retval Initialization status:
 *           - 0: SPI peripheral not initialized
 *           - 1: OLED initialized OK and ready to use
 */
uint8_t SSD1306_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	/* Check that SPI peripheral is ready */
	if (HAL_SPI_GetState(&Spi_ssd1306Write) != HAL_SPI_STATE_READY)
 8001828:	4839      	ldr	r0, [pc, #228]	; (8001910 <SSD1306_Init+0xec>)
 800182a:	f005 fa4f 	bl	8006ccc <HAL_SPI_GetState>
 800182e:	4603      	mov	r3, r0
 8001830:	2b01      	cmp	r3, #1
 8001832:	d001      	beq.n	8001838 <SSD1306_Init+0x14>
	{
		return SSD1306_FAILED;
 8001834:	2300      	movs	r3, #0
 8001836:	e068      	b.n	800190a <SSD1306_Init+0xe6>
	}

	/* Prepare to send command bits */
	SSD1306_CMD_ACCESS();
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183e:	4835      	ldr	r0, [pc, #212]	; (8001914 <SSD1306_Init+0xf0>)
 8001840:	f002 f83c 	bl	80038bc <HAL_GPIO_WritePin>

	/* Turn VDD (logic power) on and wait to come on */
	SSD1306_LOGIC_POWER_EN();
 8001844:	2200      	movs	r2, #0
 8001846:	2120      	movs	r1, #32
 8001848:	4832      	ldr	r0, [pc, #200]	; (8001914 <SSD1306_Init+0xf0>)
 800184a:	f002 f837 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800184e:	200a      	movs	r0, #10
 8001850:	f000 faa6 	bl	8001da0 <HAL_Delay>

	/* Display off command */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_DISP_OFF);
 8001854:	20ae      	movs	r0, #174	; 0xae
 8001856:	f000 fa1d 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* Reset the screen */
	SSD1306_Reset();
 800185a:	f000 f887 	bl	800196c <SSD1306_Reset>

	/* Set up charge pump */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_CHRG_PUMP_SET);
 800185e:	208d      	movs	r0, #141	; 0x8d
 8001860:	f000 fa18 	bl	8001c94 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_CHRG_PUMP_EN);
 8001864:	2014      	movs	r0, #20
 8001866:	f000 fa15 	bl	8001c94 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_CHRG_PRD_SET);
 800186a:	20d9      	movs	r0, #217	; 0xd9
 800186c:	f000 fa12 	bl	8001c94 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_CHRG_PRD_VALUE);
 8001870:	20f1      	movs	r0, #241	; 0xf1
 8001872:	f000 fa0f 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* Clear screen and update */
	SSD1306_Clear();
 8001876:	f000 fa04 	bl	8001c82 <SSD1306_Clear>

	/* Give power to display and wait to come on */
	SSD1306_DISP_POWER_EN();
 800187a:	2200      	movs	r2, #0
 800187c:	2140      	movs	r1, #64	; 0x40
 800187e:	4825      	ldr	r0, [pc, #148]	; (8001914 <SSD1306_Init+0xf0>)
 8001880:	f002 f81c 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001884:	2064      	movs	r0, #100	; 0x64
 8001886:	f000 fa8b 	bl	8001da0 <HAL_Delay>

	/* Set oscillator frequency */
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_SET);
 800188a:	20d5      	movs	r0, #213	; 0xd5
 800188c:	f000 fa02 	bl	8001c94 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_MAX);
 8001890:	20f0      	movs	r0, #240	; 0xf0
 8001892:	f000 f9ff 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* Set display contrast */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_CONTRAST_CTRL);
 8001896:	2081      	movs	r0, #129	; 0x81
 8001898:	f000 f9fc 	bl	8001c94 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CONTRAST_VALUE);
 800189c:	200f      	movs	r0, #15
 800189e:	f000 f9f9 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* Multiplex ratio */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_MUX_RATIO_SET);
 80018a2:	20a8      	movs	r0, #168	; 0xa8
 80018a4:	f000 f9f6 	bl	8001c94 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_MUX_RATIO_VALUE);
 80018a8:	203f      	movs	r0, #63	; 0x3f
 80018aa:	f000 f9f3 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* Set addressing mode (horizontal address mode) */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_ADDR_MODE_SET);
 80018ae:	2020      	movs	r0, #32
 80018b0:	f000 f9f0 	bl	8001c94 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_ADDR_MODE_HORZ);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f000 f9ed 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* Invert rows and columns */
	SSD1306_SPI_WRITE_CMD(SSD1306_REMAP_COL127_SEG0);
 80018ba:	20a1      	movs	r0, #161	; 0xa1
 80018bc:	f000 f9ea 	bl	8001c94 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_REMAP_ROW_DEC);
 80018c0:	20c8      	movs	r0, #200	; 0xc8
 80018c2:	f000 f9e7 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* COM pins hardware configuration */
	SSD1306_SPI_WRITE_CMD(SSD1306_COM_HW_CONFIG_SET);
 80018c6:	20da      	movs	r0, #218	; 0xda
 80018c8:	f000 f9e4 	bl	8001c94 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_COM_HW_CONFIG_VALUE);
 80018cc:	2020      	movs	r0, #32
 80018ce:	f000 f9e1 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* Display colours in normal mode */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_NORM_DISP);
 80018d2:	20a6      	movs	r0, #166	; 0xa6
 80018d4:	f000 f9de 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* Deactivate scrolling */
	SSD1306_SPI_WRITE_CMD(SSD1306_DEACTIVATE_SCROLL);
 80018d8:	202e      	movs	r0, #46	; 0x2e
 80018da:	f000 f9db 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* Display on */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_DISP_ON);
 80018de:	20af      	movs	r0, #175	; 0xaf
 80018e0:	f000 f9d8 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* Initialize structure values */
	SSD1306_Disp.CurrentX = 0;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <SSD1306_Init+0xf4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	801a      	strh	r2, [r3, #0]
	SSD1306_Disp.CurrentY = 0;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <SSD1306_Init+0xf4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306_Disp.Initialized = 1;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <SSD1306_Init+0xf4>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	715a      	strb	r2, [r3, #5]
	SSD1306_Disp.state = SSD1306_STATE_READY;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <SSD1306_Init+0xf4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	719a      	strb	r2, [r3, #6]

	/* Hang until screen has been updated */
	while (SSD1306_Disp.state != SSD1306_STATE_READY);
 80018fc:	bf00      	nop
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <SSD1306_Init+0xf4>)
 8001900:	799b      	ldrb	r3, [r3, #6]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1fa      	bne.n	80018fe <SSD1306_Init+0xda>

	/* Return OK */
	return SSD1306_OK;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20004be8 	.word	0x20004be8
 8001914:	40020800 	.word	0x40020800
 8001918:	20004d3c 	.word	0x20004d3c

0800191c <SSD1306_DeInit>:

/**
 * @brief  DeInitialize and power down SSD1306 OLED
 */
uint8_t SSD1306_DeInit(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	/* Check that display is in initialized state */
	if (!SSD1306_Disp.Initialized)
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <SSD1306_DeInit+0x48>)
 8001922:	795b      	ldrb	r3, [r3, #5]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <SSD1306_DeInit+0x10>
	{
		return SSD1306_FAILED;
 8001928:	2300      	movs	r3, #0
 800192a:	e019      	b.n	8001960 <SSD1306_DeInit+0x44>
	}

	/* Prepare to send command bits */
	SSD1306_CMD_ACCESS();
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <SSD1306_DeInit+0x4c>)
 8001934:	f001 ffc2 	bl	80038bc <HAL_GPIO_WritePin>

	/* Display off command */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_DISP_OFF);
 8001938:	20ae      	movs	r0, #174	; 0xae
 800193a:	f000 f9ab 	bl	8001c94 <ssd1306_SPI_WriteCmd>

	/* VBAT off - cut power to display */
	SSD1306_DISP_POWER_DI();
 800193e:	2201      	movs	r2, #1
 8001940:	2140      	movs	r1, #64	; 0x40
 8001942:	4809      	ldr	r0, [pc, #36]	; (8001968 <SSD1306_DeInit+0x4c>)
 8001944:	f001 ffba 	bl	80038bc <HAL_GPIO_WritePin>

	/* 100 ms delay */
	HAL_Delay(100);
 8001948:	2064      	movs	r0, #100	; 0x64
 800194a:	f000 fa29 	bl	8001da0 <HAL_Delay>

	/* VDD off - cut power to logic */
	SSD1306_LOGIC_POWER_DI();
 800194e:	2201      	movs	r2, #1
 8001950:	2120      	movs	r1, #32
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <SSD1306_DeInit+0x4c>)
 8001954:	f001 ffb2 	bl	80038bc <HAL_GPIO_WritePin>

	/* Set structure values */
	SSD1306_Disp.Initialized = 0;
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <SSD1306_DeInit+0x48>)
 800195a:	2200      	movs	r2, #0
 800195c:	715a      	strb	r2, [r3, #5]

	return SSD1306_OK;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20004d3c 	.word	0x20004d3c
 8001968:	40020800 	.word	0x40020800

0800196c <SSD1306_Reset>:

/**
 * @brief  Reset the OLED display
 */
void SSD1306_Reset(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	SSD1306_RESET_LOW();
 8001970:	2200      	movs	r2, #0
 8001972:	2140      	movs	r1, #64	; 0x40
 8001974:	4806      	ldr	r0, [pc, #24]	; (8001990 <SSD1306_Reset+0x24>)
 8001976:	f001 ffa1 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800197a:	2001      	movs	r0, #1
 800197c:	f000 fa10 	bl	8001da0 <HAL_Delay>
	SSD1306_RESET_HIGH();
 8001980:	2201      	movs	r2, #1
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <SSD1306_Reset+0x24>)
 8001986:	f001 ff99 	bl	80038bc <HAL_GPIO_WritePin>
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40020800 	.word	0x40020800

08001994 <SSD1306_Switch>:

/**
 * @brief  Toggle the display on and off
 */
void SSD1306_Switch(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	if (SSD1306_Disp.Initialized)
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SSD1306_Switch+0x1c>)
 800199a:	795b      	ldrb	r3, [r3, #5]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <SSD1306_Switch+0x12>
	{
		SSD1306_DeInit();
 80019a0:	f7ff ffbc 	bl	800191c <SSD1306_DeInit>
	}
	else
	{
		SSD1306_Init();
	}
}
 80019a4:	e001      	b.n	80019aa <SSD1306_Switch+0x16>
		SSD1306_Init();
 80019a6:	f7ff ff3d 	bl	8001824 <SSD1306_Init>
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20004d3c 	.word	0x20004d3c

080019b4 <SSD1306_UpdateScreen>:
/**
 * @brief  Updates buffer from internal RAM to OLED with SSD1306 in horizontal addressing mode (blocks until interrupt function initialized)
 * @note   This function must be called each time you do some changes to OLED, to update buffer from RAM to OLED
 */
uint8_t SSD1306_UpdateScreen(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	/* Writing data to display buffer - non-blocking function with SPI and DMA */
	return ssd1306_SPI_WriteDisp(SSD1306_Buffer);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <SSD1306_UpdateScreen+0x10>)
 80019ba:	f000 f985 	bl	8001cc8 <ssd1306_SPI_WriteDisp>
 80019be:	4603      	mov	r3, r0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000088 	.word	0x20000088

080019c8 <SSD1306_Fill>:
 * @brief  Fills entire OLED buffer with desired color
 * @note   @ref SSD1306_UpdateScreen() must be called after that in order to see updated LCD screen
 * @param  Color: Color to be used for screen fill. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 */
void SSD1306_Fill(uint8_t colour)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (colour == SSD1306_PX_CLR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <SSD1306_Fill+0x14>
 80019d8:	2300      	movs	r3, #0
 80019da:	e000      	b.n	80019de <SSD1306_Fill+0x16>
 80019dc:	23ff      	movs	r3, #255	; 0xff
 80019de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e2:	4619      	mov	r1, r3
 80019e4:	4803      	ldr	r0, [pc, #12]	; (80019f4 <SSD1306_Fill+0x2c>)
 80019e6:	f009 fa82 	bl	800aeee <memset>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000088 	.word	0x20000088

080019f8 <SSD1306_Fill_ToRight>:
 * @brief  Fills OLED with desired colour to right of indicated column (for horizontal and page addressing modes)
 * @note   @ref SSD1306_UpdateScreen() must be called after that in order to see updated LCD screen
 * @param  Color: Color to be used for screen fill. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 */
void SSD1306_Fill_ToRight(uint8_t startCol, uint8_t colour)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < SSD1306_PAGES; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e014      	b.n	8001a38 <SSD1306_Fill_ToRight+0x40>
	{
		memset(SSD1306_Buffer + startCol + (i * SSD1306_WIDTH), (colour == SSD1306_PX_CLR_BLACK) ? 0x00 : 0xFF, SSD1306_WIDTH - startCol);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	01d2      	lsls	r2, r2, #7
 8001a14:	4413      	add	r3, r2
 8001a16:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <SSD1306_Fill_ToRight+0x50>)
 8001a18:	1898      	adds	r0, r3, r2
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <SSD1306_Fill_ToRight+0x2c>
 8001a20:	2100      	movs	r1, #0
 8001a22:	e000      	b.n	8001a26 <SSD1306_Fill_ToRight+0x2e>
 8001a24:	21ff      	movs	r1, #255	; 0xff
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f009 fa5e 	bl	800aeee <memset>
	for (uint8_t i = 0; i < SSD1306_PAGES; i++)
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	3301      	adds	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d9e7      	bls.n	8001a0e <SSD1306_Fill_ToRight+0x16>
	}
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000088 	.word	0x20000088

08001a4c <SSD1306_DrawPixel>:
 * @param  x: X location. This parameter can be a value between 0 and SSD1306_WIDTH - 1
 * @param  y: Y location. This parameter can be a value between 0 and SSD1306_HEIGHT - 1
 * @param  color: Color to be used for screen fill. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 */
void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t colour)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
 8001a56:	460b      	mov	r3, r1
 8001a58:	80bb      	strh	r3, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	70fb      	strb	r3, [r7, #3]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	2b7f      	cmp	r3, #127	; 0x7f
 8001a62:	d848      	bhi.n	8001af6 <SSD1306_DrawPixel+0xaa>
 8001a64:	88bb      	ldrh	r3, [r7, #4]
 8001a66:	2b1f      	cmp	r3, #31
 8001a68:	d845      	bhi.n	8001af6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306_Disp.Inverted)
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <SSD1306_DrawPixel+0xb8>)
 8001a6c:	791b      	ldrb	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <SSD1306_DrawPixel+0x34>
	{
		colour = !colour;
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (colour == SSD1306_PX_CLR_WHITE)
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d11a      	bne.n	8001abc <SSD1306_DrawPixel+0x70>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a86:	88fa      	ldrh	r2, [r7, #6]
 8001a88:	88bb      	ldrh	r3, [r7, #4]
 8001a8a:	08db      	lsrs	r3, r3, #3
 8001a8c:	b298      	uxth	r0, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	01db      	lsls	r3, r3, #7
 8001a92:	4413      	add	r3, r2
 8001a94:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <SSD1306_DrawPixel+0xbc>)
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	b25a      	sxtb	r2, r3
 8001a9a:	88bb      	ldrh	r3, [r7, #4]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b259      	sxtb	r1, r3
 8001aac:	88fa      	ldrh	r2, [r7, #6]
 8001aae:	4603      	mov	r3, r0
 8001ab0:	01db      	lsls	r3, r3, #7
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b2c9      	uxtb	r1, r1
 8001ab6:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <SSD1306_DrawPixel+0xbc>)
 8001ab8:	54d1      	strb	r1, [r2, r3]
 8001aba:	e01d      	b.n	8001af8 <SSD1306_DrawPixel+0xac>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001abc:	88fa      	ldrh	r2, [r7, #6]
 8001abe:	88bb      	ldrh	r3, [r7, #4]
 8001ac0:	08db      	lsrs	r3, r3, #3
 8001ac2:	b298      	uxth	r0, r3
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	01db      	lsls	r3, r3, #7
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a0f      	ldr	r2, [pc, #60]	; (8001b08 <SSD1306_DrawPixel+0xbc>)
 8001acc:	5cd3      	ldrb	r3, [r2, r3]
 8001ace:	b25a      	sxtb	r2, r3
 8001ad0:	88bb      	ldrh	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	b259      	sxtb	r1, r3
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	4603      	mov	r3, r0
 8001aea:	01db      	lsls	r3, r3, #7
 8001aec:	4413      	add	r3, r2
 8001aee:	b2c9      	uxtb	r1, r1
 8001af0:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <SSD1306_DrawPixel+0xbc>)
 8001af2:	54d1      	strb	r1, [r2, r3]
 8001af4:	e000      	b.n	8001af8 <SSD1306_DrawPixel+0xac>
		return;
 8001af6:	bf00      	nop
	}
}
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20004d3c 	.word	0x20004d3c
 8001b08:	20000088 	.word	0x20000088

08001b0c <SSD1306_GotoXY>:
 * @brief  Sets cursor pointer to desired location for strings
 * @param  x: X location. This parameter can be a value between 0 and SSD1306_WIDTH - 1
 * @param  y: Y location. This parameter can be a value between 0 and SSD1306_HEIGHT - 1
 */
void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	80fb      	strh	r3, [r7, #6]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306_Disp.CurrentX = x;
 8001b1c:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <SSD1306_GotoXY+0x28>)
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	8013      	strh	r3, [r2, #0]
	SSD1306_Disp.CurrentY = y;
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <SSD1306_GotoXY+0x28>)
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	8053      	strh	r3, [r2, #2]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	20004d3c 	.word	0x20004d3c

08001b38 <SSD1306_Putc>:
 * @param  *Font: Pointer to @ref FontDef_t structure with used font
 * @param  color: Color used for drawing. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 * @retval Character written
 */
char SSD1306_Putc(char ch, FontDef_t *Font, uint8_t colour)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306_Disp.CurrentX + Font->FontWidth) ||
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
	if (
 8001b54:	2b7f      	cmp	r3, #127	; 0x7f
 8001b56:	dc07      	bgt.n	8001b68 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306_Disp.CurrentY + Font->FontHeight))
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001b5a:	885b      	ldrh	r3, [r3, #2]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	785b      	ldrb	r3, [r3, #1]
 8001b62:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306_Disp.CurrentX + Font->FontWidth) ||
 8001b64:	2b1f      	cmp	r3, #31
 8001b66:	dd01      	ble.n	8001b6c <SSD1306_Putc+0x34>
	{
		/* Error */
		return 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e05e      	b.n	8001c2a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e04b      	b.n	8001c0a <SSD1306_Putc+0xd2>
	{
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	3b20      	subs	r3, #32
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	7849      	ldrb	r1, [r1, #1]
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	440b      	add	r3, r1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	e030      	b.n	8001bf8 <SSD1306_Putc+0xc0>
		{
			if ((b << j) & 0x8000)
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d010      	beq.n	8001bc8 <SSD1306_Putc+0x90>
			{
				SSD1306_DrawPixel(SSD1306_Disp.CurrentX + j, (SSD1306_Disp.CurrentY + i), colour);
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	b298      	uxth	r0, r3
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001bb4:	885a      	ldrh	r2, [r3, #2]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	79ba      	ldrb	r2, [r7, #6]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7ff ff43 	bl	8001a4c <SSD1306_DrawPixel>
 8001bc6:	e014      	b.n	8001bf2 <SSD1306_Putc+0xba>
			}
			else
			{
				SSD1306_DrawPixel(SSD1306_Disp.CurrentX + j, (SSD1306_Disp.CurrentY + i), !colour);
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001bca:	881a      	ldrh	r2, [r3, #0]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b298      	uxth	r0, r3
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001bd6:	885a      	ldrh	r2, [r3, #2]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	b299      	uxth	r1, r3
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf0c      	ite	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	2300      	movne	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	f7ff ff2d 	bl	8001a4c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d3c8      	bcc.n	8001b96 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	785b      	ldrb	r3, [r3, #1]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d3ad      	bcc.n	8001b72 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306_Disp.CurrentX += Font->FontWidth;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001c18:	881a      	ldrh	r2, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001c26:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20004d3c 	.word	0x20004d3c

08001c38 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, uint8_t colour)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str)
 8001c46:	e012      	b.n	8001c6e <SSD1306_Puts+0x36>
	{
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, colour) != *str)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff71 	bl	8001b38 <SSD1306_Putc>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d002      	beq.n	8001c68 <SSD1306_Puts+0x30>
		{
			/* Return error */
			return *str;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	e008      	b.n	8001c7a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1e8      	bne.n	8001c48 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	781b      	ldrb	r3, [r3, #0]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <SSD1306_Clear>:

/**
 * @brief  Clears the screen
 */
void SSD1306_Clear(void)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	af00      	add	r7, sp, #0
	SSD1306_Fill(SSD1306_PX_CLR_BLACK);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fe9e 	bl	80019c8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001c8c:	f7ff fe92 	bl	80019b4 <SSD1306_UpdateScreen>
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <ssd1306_SPI_WriteCmd>:
 * @brief  Writes a 8-bit command to the ssd1306 - this function blocks while sending data
 * @param  uint8_t* pTxBuffer - pointer to the data buffer
 * @param  uint8_t len - length of data to be sent
 */
void ssd1306_SPI_WriteCmd(uint8_t command)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	SSD1306_CMD_ACCESS();
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca4:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <ssd1306_SPI_WriteCmd+0x2c>)
 8001ca6:	f001 fe09 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Spi_ssd1306Write, &command, 1, SSD1306_SPI_TIMEOUT);
 8001caa:	1df9      	adds	r1, r7, #7
 8001cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <ssd1306_SPI_WriteCmd+0x30>)
 8001cb4:	f004 fd14 	bl	80066e0 <HAL_SPI_Transmit>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	20004be8 	.word	0x20004be8

08001cc8 <ssd1306_SPI_WriteDisp>:
/**
 * @brief  Fills the display data buffer with new screen using DMA to transfer (length is size of SSD1306 buffer defined in ssd1306.c)
 * @param  uint8_t* pTxBuffer - pointer to the data buffer
 */
uint8_t ssd1306_SPI_WriteDisp(uint8_t *pTxBuffer)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	uint8_t state = SSD1306_Disp.state;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <ssd1306_SPI_WriteDisp+0x48>)
 8001cd2:	799b      	ldrb	r3, [r3, #6]
 8001cd4:	73fb      	strb	r3, [r7, #15]

	if (state == SSD1306_STATE_READY)
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d114      	bne.n	8001d06 <ssd1306_SPI_WriteDisp+0x3e>
	{
		/* Set state to busy */
		SSD1306_Disp.state = SSD1306_STATE_BUSY;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <ssd1306_SPI_WriteDisp+0x48>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	719a      	strb	r2, [r3, #6]

		/* Set D/C high for data buffer access */
		SSD1306_DISP_ACCESS();
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce8:	480a      	ldr	r0, [pc, #40]	; (8001d14 <ssd1306_SPI_WriteDisp+0x4c>)
 8001cea:	f001 fde7 	bl	80038bc <HAL_GPIO_WritePin>

		/* DMA enabled send with SPI - callback function run when complete */
		if (HAL_SPI_Transmit_DMA(&Spi_ssd1306Write, pTxBuffer, (uint16_t)sizeof(SSD1306_Buffer)) != HAL_OK)
 8001cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4808      	ldr	r0, [pc, #32]	; (8001d18 <ssd1306_SPI_WriteDisp+0x50>)
 8001cf6:	f004 fe27 	bl	8006948 <HAL_SPI_Transmit_DMA>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <ssd1306_SPI_WriteDisp+0x3e>
		{
			SSD1306_Disp.state = SSD1306_SPI_ERROR;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <ssd1306_SPI_WriteDisp+0x48>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	719a      	strb	r2, [r3, #6]
		}
	}

	return state;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20004d3c 	.word	0x20004d3c
 8001d14:	40020800 	.word	0x40020800
 8001d18:	20004be8 	.word	0x20004be8

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <HAL_Init+0x40>)
 8001d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_Init+0x40>)
 8001d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_Init+0x40>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 fe48 	bl	80029da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff fbd4 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d50:	f7ff f9fc 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00

08001d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x20>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_IncTick+0x24>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <HAL_IncTick+0x24>)
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000050 	.word	0x20000050
 8001d84:	20004de8 	.word	0x20004de8

08001d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_GetTick+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20004de8 	.word	0x20004de8

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff ffee 	bl	8001d88 <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d005      	beq.n	8001dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_Delay+0x40>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff ffde 	bl	8001d88 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d8f7      	bhi.n	8001dc8 <HAL_Delay+0x28>
  {
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000050 	.word	0x20000050

08001de4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e033      	b.n	8001e62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff f9ce 	bl	80011a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e2a:	f023 0302 	bic.w	r3, r3, #2
 8001e2e:	f043 0202 	orr.w	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fb9a 	bl	8002570 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f023 0303 	bic.w	r3, r3, #3
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
 8001e52:	e001      	b.n	8001e58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d049      	beq.n	8001f40 <HAL_ADC_IRQHandler+0xd6>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d046      	beq.n	8001f40 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d105      	bne.n	8001eca <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d12b      	bne.n	8001f30 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d127      	bne.n	8001f30 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d119      	bne.n	8001f30 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0220 	bic.w	r2, r2, #32
 8001f0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d105      	bne.n	8001f30 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff f845 	bl	8000fc0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f06f 0212 	mvn.w	r2, #18
 8001f3e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	2300      	movne	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d057      	beq.n	8002022 <HAL_ADC_IRQHandler+0x1b8>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d054      	beq.n	8002022 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d139      	bne.n	8002012 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d12b      	bne.n	8002012 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d124      	bne.n	8002012 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d11d      	bne.n	8002012 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d119      	bne.n	8002012 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fec:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d105      	bne.n	8002012 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f043 0201 	orr.w	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fc2a 	bl	800286c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 020c 	mvn.w	r2, #12
 8002020:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002042:	2b40      	cmp	r3, #64	; 0x40
 8002044:	bf0c      	ite	eq
 8002046:	2301      	moveq	r3, #1
 8002048:	2300      	movne	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d017      	beq.n	8002084 <HAL_ADC_IRQHandler+0x21a>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d014      	beq.n	8002084 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d10d      	bne.n	8002084 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f935 	bl	80022e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f06f 0201 	mvn.w	r2, #1
 8002082:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b20      	cmp	r3, #32
 8002090:	bf0c      	ite	eq
 8002092:	2301      	moveq	r3, #1
 8002094:	2300      	movne	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d015      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x27a>
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d012      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f043 0202 	orr.w	r2, r3, #2
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f06f 0220 	mvn.w	r2, #32
 80020d2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f90f 	bl	80022f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f06f 0220 	mvn.w	r2, #32
 80020e2:	601a      	str	r2, [r3, #0]
  }
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_ADC_Start_DMA+0x1e>
 8002106:	2302      	movs	r3, #2
 8002108:	e0cc      	b.n	80022a4 <HAL_ADC_Start_DMA+0x1b8>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d018      	beq.n	8002152 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002130:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <HAL_ADC_Start_DMA+0x1c0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a5e      	ldr	r2, [pc, #376]	; (80022b0 <HAL_ADC_Start_DMA+0x1c4>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9a      	lsrs	r2, r3, #18
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002144:	e002      	b.n	800214c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	3b01      	subs	r3, #1
 800214a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	f040 80a0 	bne.w	80022a2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800218c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a0:	d106      	bne.n	80021b0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f023 0206 	bic.w	r2, r3, #6
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44
 80021ae:	e002      	b.n	80021b6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021be:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <HAL_ADC_Start_DMA+0x1c8>)
 80021c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	4a3c      	ldr	r2, [pc, #240]	; (80022b8 <HAL_ADC_Start_DMA+0x1cc>)
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <HAL_ADC_Start_DMA+0x1d0>)
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <HAL_ADC_Start_DMA+0x1d4>)
 80021d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002202:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	334c      	adds	r3, #76	; 0x4c
 800220e:	4619      	mov	r1, r3
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f000 fcc4 	bl	8002ba0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	2b00      	cmp	r3, #0
 8002222:	d12a      	bne.n	800227a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <HAL_ADC_Start_DMA+0x1d8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d015      	beq.n	800225a <HAL_ADC_Start_DMA+0x16e>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <HAL_ADC_Start_DMA+0x1dc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d105      	bne.n	8002244 <HAL_ADC_Start_DMA+0x158>
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_ADC_Start_DMA+0x1c8>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a20      	ldr	r2, [pc, #128]	; (80022cc <HAL_ADC_Start_DMA+0x1e0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d129      	bne.n	80022a2 <HAL_ADC_Start_DMA+0x1b6>
 800224e:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_ADC_Start_DMA+0x1c8>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	2b0f      	cmp	r3, #15
 8002258:	d823      	bhi.n	80022a2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d11c      	bne.n	80022a2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	e013      	b.n	80022a2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <HAL_ADC_Start_DMA+0x1d8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d10e      	bne.n	80022a2 <HAL_ADC_Start_DMA+0x1b6>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d107      	bne.n	80022a2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022a0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000040 	.word	0x20000040
 80022b0:	431bde83 	.word	0x431bde83
 80022b4:	40012300 	.word	0x40012300
 80022b8:	08002769 	.word	0x08002769
 80022bc:	08002823 	.word	0x08002823
 80022c0:	0800283f 	.word	0x0800283f
 80022c4:	40012000 	.word	0x40012000
 80022c8:	40012100 	.word	0x40012100
 80022cc:	40012200 	.word	0x40012200

080022d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x1c>
 8002324:	2302      	movs	r3, #2
 8002326:	e113      	b.n	8002550 <HAL_ADC_ConfigChannel+0x244>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b09      	cmp	r3, #9
 8002336:	d925      	bls.n	8002384 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68d9      	ldr	r1, [r3, #12]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	3b1e      	subs	r3, #30
 800234e:	2207      	movs	r2, #7
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43da      	mvns	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	400a      	ands	r2, r1
 800235c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68d9      	ldr	r1, [r3, #12]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	4603      	mov	r3, r0
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4403      	add	r3, r0
 8002376:	3b1e      	subs	r3, #30
 8002378:	409a      	lsls	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	e022      	b.n	80023ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6919      	ldr	r1, [r3, #16]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	2207      	movs	r2, #7
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	400a      	ands	r2, r1
 80023a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6919      	ldr	r1, [r3, #16]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4403      	add	r3, r0
 80023c0:	409a      	lsls	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d824      	bhi.n	800241c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	3b05      	subs	r3, #5
 80023e4:	221f      	movs	r2, #31
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	400a      	ands	r2, r1
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4618      	mov	r0, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b05      	subs	r3, #5
 800240e:	fa00 f203 	lsl.w	r2, r0, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	635a      	str	r2, [r3, #52]	; 0x34
 800241a:	e04c      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b0c      	cmp	r3, #12
 8002422:	d824      	bhi.n	800246e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	3b23      	subs	r3, #35	; 0x23
 8002436:	221f      	movs	r2, #31
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43da      	mvns	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	400a      	ands	r2, r1
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	4618      	mov	r0, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3b23      	subs	r3, #35	; 0x23
 8002460:	fa00 f203 	lsl.w	r2, r0, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
 800246c:	e023      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	3b41      	subs	r3, #65	; 0x41
 8002480:	221f      	movs	r2, #31
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	400a      	ands	r2, r1
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	4618      	mov	r0, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	3b41      	subs	r3, #65	; 0x41
 80024aa:	fa00 f203 	lsl.w	r2, r0, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b6:	4b29      	ldr	r3, [pc, #164]	; (800255c <HAL_ADC_ConfigChannel+0x250>)
 80024b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a28      	ldr	r2, [pc, #160]	; (8002560 <HAL_ADC_ConfigChannel+0x254>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d10f      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x1d8>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b12      	cmp	r3, #18
 80024ca:	d10b      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <HAL_ADC_ConfigChannel+0x254>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d12b      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x23a>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <HAL_ADC_ConfigChannel+0x258>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d003      	beq.n	8002500 <HAL_ADC_ConfigChannel+0x1f4>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b11      	cmp	r3, #17
 80024fe:	d122      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a11      	ldr	r2, [pc, #68]	; (8002564 <HAL_ADC_ConfigChannel+0x258>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d111      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_ADC_ConfigChannel+0x25c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a11      	ldr	r2, [pc, #68]	; (800256c <HAL_ADC_ConfigChannel+0x260>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	0c9a      	lsrs	r2, r3, #18
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002538:	e002      	b.n	8002540 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3b01      	subs	r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f9      	bne.n	800253a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40012300 	.word	0x40012300
 8002560:	40012000 	.word	0x40012000
 8002564:	10000012 	.word	0x10000012
 8002568:	20000040 	.word	0x20000040
 800256c:	431bde83 	.word	0x431bde83

08002570 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002578:	4b79      	ldr	r3, [pc, #484]	; (8002760 <ADC_Init+0x1f0>)
 800257a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	431a      	orrs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	021a      	lsls	r2, r3, #8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6899      	ldr	r1, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	4a58      	ldr	r2, [pc, #352]	; (8002764 <ADC_Init+0x1f4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d022      	beq.n	800264e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002616:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002638:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	e00f      	b.n	800266e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800265c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800266c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0202 	bic.w	r2, r2, #2
 800267c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7e1b      	ldrb	r3, [r3, #24]
 8002688:	005a      	lsls	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01b      	beq.n	80026d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	3b01      	subs	r3, #1
 80026c8:	035a      	lsls	r2, r3, #13
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	e007      	b.n	80026e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	3b01      	subs	r3, #1
 8002700:	051a      	lsls	r2, r3, #20
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002718:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6899      	ldr	r1, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002726:	025a      	lsls	r2, r3, #9
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6899      	ldr	r1, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	029a      	lsls	r2, r3, #10
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	609a      	str	r2, [r3, #8]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40012300 	.word	0x40012300
 8002764:	0f000001 	.word	0x0f000001

08002768 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800277e:	2b00      	cmp	r3, #0
 8002780:	d13c      	bne.n	80027fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d12b      	bne.n	80027f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d127      	bne.n	80027f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d006      	beq.n	80027c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d119      	bne.n	80027f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0220 	bic.w	r2, r2, #32
 80027ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0201 	orr.w	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f7fe fbe3 	bl	8000fc0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027fa:	e00e      	b.n	800281a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7ff fd75 	bl	80022f8 <HAL_ADC_ErrorCallback>
}
 800280e:	e004      	b.n	800281a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f7ff fd4d 	bl	80022d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2240      	movs	r2, #64	; 0x40
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f043 0204 	orr.w	r2, r3, #4
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff fd4a 	bl	80022f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800289c:	4013      	ands	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b2:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	f003 0307 	and.w	r3, r3, #7
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	db0b      	blt.n	800290e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	f003 021f 	and.w	r2, r3, #31
 80028fc:	4907      	ldr	r1, [pc, #28]	; (800291c <__NVIC_EnableIRQ+0x38>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2001      	movs	r0, #1
 8002906:	fa00 f202 	lsl.w	r2, r0, r2
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000e100 	.word	0xe000e100

08002920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	6039      	str	r1, [r7, #0]
 800292a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	2b00      	cmp	r3, #0
 8002932:	db0a      	blt.n	800294a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	490c      	ldr	r1, [pc, #48]	; (800296c <__NVIC_SetPriority+0x4c>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	440b      	add	r3, r1
 8002944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002948:	e00a      	b.n	8002960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4908      	ldr	r1, [pc, #32]	; (8002970 <__NVIC_SetPriority+0x50>)
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	3b04      	subs	r3, #4
 8002958:	0112      	lsls	r2, r2, #4
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	440b      	add	r3, r1
 800295e:	761a      	strb	r2, [r3, #24]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000e100 	.word	0xe000e100
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f1c3 0307 	rsb	r3, r3, #7
 800298e:	2b04      	cmp	r3, #4
 8002990:	bf28      	it	cs
 8002992:	2304      	movcs	r3, #4
 8002994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3304      	adds	r3, #4
 800299a:	2b06      	cmp	r3, #6
 800299c:	d902      	bls.n	80029a4 <NVIC_EncodePriority+0x30>
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3b03      	subs	r3, #3
 80029a2:	e000      	b.n	80029a6 <NVIC_EncodePriority+0x32>
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	401a      	ands	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029bc:	f04f 31ff 	mov.w	r1, #4294967295
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43d9      	mvns	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	4313      	orrs	r3, r2
         );
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3724      	adds	r7, #36	; 0x24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ff4c 	bl	8002880 <__NVIC_SetPriorityGrouping>
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a02:	f7ff ff61 	bl	80028c8 <__NVIC_GetPriorityGrouping>
 8002a06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	6978      	ldr	r0, [r7, #20]
 8002a0e:	f7ff ffb1 	bl	8002974 <NVIC_EncodePriority>
 8002a12:	4602      	mov	r2, r0
 8002a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff80 	bl	8002920 <__NVIC_SetPriority>
}
 8002a20:	bf00      	nop
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ff54 	bl	80028e4 <__NVIC_EnableIRQ>
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff f99a 	bl	8001d88 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e099      	b.n	8002b94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a80:	e00f      	b.n	8002aa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a82:	f7ff f981 	bl	8001d88 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d908      	bls.n	8002aa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2203      	movs	r2, #3
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e078      	b.n	8002b94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1e8      	bne.n	8002a82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <HAL_DMA_Init+0x158>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d107      	bne.n	8002b0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	4313      	orrs	r3, r2
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f023 0307 	bic.w	r3, r3, #7
 8002b22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d117      	bne.n	8002b66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00e      	beq.n	8002b66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fa9f 	bl	800308c <DMA_CheckFifoParam>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2240      	movs	r2, #64	; 0x40
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b62:	2301      	movs	r3, #1
 8002b64:	e016      	b.n	8002b94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fa56 	bl	8003020 <DMA_CalcBaseAndBitshift>
 8002b74:	4603      	mov	r3, r0
 8002b76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	223f      	movs	r2, #63	; 0x3f
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	f010803f 	.word	0xf010803f

08002ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_DMA_Start_IT+0x26>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e040      	b.n	8002c48 <HAL_DMA_Start_IT+0xa8>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d12f      	bne.n	8002c3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f9e8 	bl	8002fc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	223f      	movs	r2, #63	; 0x3f
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0216 	orr.w	r2, r2, #22
 8002c0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0208 	orr.w	r2, r2, #8
 8002c26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e005      	b.n	8002c46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
 8002c44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d004      	beq.n	8002c6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00c      	b.n	8002c88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2205      	movs	r2, #5
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ca0:	4b92      	ldr	r3, [pc, #584]	; (8002eec <HAL_DMA_IRQHandler+0x258>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a92      	ldr	r2, [pc, #584]	; (8002ef0 <HAL_DMA_IRQHandler+0x25c>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	0a9b      	lsrs	r3, r3, #10
 8002cac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01a      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d013      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0204 	bic.w	r2, r2, #4
 8002ce6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	2208      	movs	r2, #8
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	2201      	movs	r2, #1
 8002d06:	409a      	lsls	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d012      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	2201      	movs	r2, #1
 8002d24:	409a      	lsls	r2, r3
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f043 0202 	orr.w	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d012      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d58:	2204      	movs	r2, #4
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f043 0204 	orr.w	r2, r3, #4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	2210      	movs	r2, #16
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d043      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d03c      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	2210      	movs	r2, #16
 8002d90:	409a      	lsls	r2, r3
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d018      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d108      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d024      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
 8002dc2:	e01f      	b.n	8002e04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01b      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
 8002dd4:	e016      	b.n	8002e04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d107      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0208 	bic.w	r2, r2, #8
 8002df2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2220      	movs	r2, #32
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 808e 	beq.w	8002f32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8086 	beq.w	8002f32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d136      	bne.n	8002eac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0216 	bic.w	r2, r2, #22
 8002e4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <HAL_DMA_IRQHandler+0x1da>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0208 	bic.w	r2, r2, #8
 8002e7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	223f      	movs	r2, #63	; 0x3f
 8002e84:	409a      	lsls	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d07d      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
        }
        return;
 8002eaa:	e078      	b.n	8002f9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01c      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d108      	bne.n	8002eda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d030      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
 8002ed8:	e02b      	b.n	8002f32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d027      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
 8002eea:	e022      	b.n	8002f32 <HAL_DMA_IRQHandler+0x29e>
 8002eec:	20000040 	.word	0x20000040
 8002ef0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0210 	bic.w	r2, r2, #16
 8002f10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d032      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d022      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2205      	movs	r2, #5
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3301      	adds	r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d307      	bcc.n	8002f7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f2      	bne.n	8002f5e <HAL_DMA_IRQHandler+0x2ca>
 8002f78:	e000      	b.n	8002f7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
 8002f9c:	e000      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f9e:	bf00      	nop
    }
  }
}
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop

08002fa8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb6:	b2db      	uxtb	r3, r3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b40      	cmp	r3, #64	; 0x40
 8002ff0:	d108      	bne.n	8003004 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003002:	e007      	b.n	8003014 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	3b10      	subs	r3, #16
 8003030:	4a14      	ldr	r2, [pc, #80]	; (8003084 <DMA_CalcBaseAndBitshift+0x64>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800303a:	4a13      	ldr	r2, [pc, #76]	; (8003088 <DMA_CalcBaseAndBitshift+0x68>)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b03      	cmp	r3, #3
 800304c:	d909      	bls.n	8003062 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	1d1a      	adds	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	659a      	str	r2, [r3, #88]	; 0x58
 8003060:	e007      	b.n	8003072 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	aaaaaaab 	.word	0xaaaaaaab
 8003088:	0800b888 	.word	0x0800b888

0800308c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d11f      	bne.n	80030e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d855      	bhi.n	8003158 <DMA_CheckFifoParam+0xcc>
 80030ac:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <DMA_CheckFifoParam+0x28>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030c5 	.word	0x080030c5
 80030b8:	080030d7 	.word	0x080030d7
 80030bc:	080030c5 	.word	0x080030c5
 80030c0:	08003159 	.word	0x08003159
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d045      	beq.n	800315c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d4:	e042      	b.n	800315c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030de:	d13f      	bne.n	8003160 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e4:	e03c      	b.n	8003160 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ee:	d121      	bne.n	8003134 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d836      	bhi.n	8003164 <DMA_CheckFifoParam+0xd8>
 80030f6:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <DMA_CheckFifoParam+0x70>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	08003113 	.word	0x08003113
 8003104:	0800310d 	.word	0x0800310d
 8003108:	08003125 	.word	0x08003125
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      break;
 8003110:	e02f      	b.n	8003172 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d024      	beq.n	8003168 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003122:	e021      	b.n	8003168 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800312c:	d11e      	bne.n	800316c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003132:	e01b      	b.n	800316c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d902      	bls.n	8003140 <DMA_CheckFifoParam+0xb4>
 800313a:	2b03      	cmp	r3, #3
 800313c:	d003      	beq.n	8003146 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800313e:	e018      	b.n	8003172 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      break;
 8003144:	e015      	b.n	8003172 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00e      	beq.n	8003170 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
      break;
 8003156:	e00b      	b.n	8003170 <DMA_CheckFifoParam+0xe4>
      break;
 8003158:	bf00      	nop
 800315a:	e00a      	b.n	8003172 <DMA_CheckFifoParam+0xe6>
      break;
 800315c:	bf00      	nop
 800315e:	e008      	b.n	8003172 <DMA_CheckFifoParam+0xe6>
      break;
 8003160:	bf00      	nop
 8003162:	e006      	b.n	8003172 <DMA_CheckFifoParam+0xe6>
      break;
 8003164:	bf00      	nop
 8003166:	e004      	b.n	8003172 <DMA_CheckFifoParam+0xe6>
      break;
 8003168:	bf00      	nop
 800316a:	e002      	b.n	8003172 <DMA_CheckFifoParam+0xe6>
      break;   
 800316c:	bf00      	nop
 800316e:	e000      	b.n	8003172 <DMA_CheckFifoParam+0xe6>
      break;
 8003170:	bf00      	nop
    }
  } 
  
  return status; 
 8003172:	7bfb      	ldrb	r3, [r7, #15]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003192:	4b23      	ldr	r3, [pc, #140]	; (8003220 <HAL_FLASH_Program+0xa0>)
 8003194:	7e1b      	ldrb	r3, [r3, #24]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_FLASH_Program+0x1e>
 800319a:	2302      	movs	r3, #2
 800319c:	e03b      	b.n	8003216 <HAL_FLASH_Program+0x96>
 800319e:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_FLASH_Program+0xa0>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031a8:	f000 f870 	bl	800328c <FLASH_WaitForLastOperation>
 80031ac:	4603      	mov	r3, r0
 80031ae:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d12b      	bne.n	800320e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80031bc:	783b      	ldrb	r3, [r7, #0]
 80031be:	4619      	mov	r1, r3
 80031c0:	68b8      	ldr	r0, [r7, #8]
 80031c2:	f000 f919 	bl	80033f8 <FLASH_Program_Byte>
 80031c6:	e016      	b.n	80031f6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d105      	bne.n	80031da <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80031ce:	883b      	ldrh	r3, [r7, #0]
 80031d0:	4619      	mov	r1, r3
 80031d2:	68b8      	ldr	r0, [r7, #8]
 80031d4:	f000 f8ec 	bl	80033b0 <FLASH_Program_HalfWord>
 80031d8:	e00d      	b.n	80031f6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d105      	bne.n	80031ec <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4619      	mov	r1, r3
 80031e4:	68b8      	ldr	r0, [r7, #8]
 80031e6:	f000 f8c1 	bl	800336c <FLASH_Program_Word>
 80031ea:	e004      	b.n	80031f6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80031ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031f0:	68b8      	ldr	r0, [r7, #8]
 80031f2:	f000 f88b 	bl	800330c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031fa:	f000 f847 	bl	800328c <FLASH_WaitForLastOperation>
 80031fe:	4603      	mov	r3, r0
 8003200:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HAL_FLASH_Program+0xa4>)
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	4a07      	ldr	r2, [pc, #28]	; (8003224 <HAL_FLASH_Program+0xa4>)
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800320e:	4b04      	ldr	r3, [pc, #16]	; (8003220 <HAL_FLASH_Program+0xa0>)
 8003210:	2200      	movs	r2, #0
 8003212:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003214:	7dfb      	ldrb	r3, [r7, #23]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20004dec 	.word	0x20004dec
 8003224:	40023c00 	.word	0x40023c00

08003228 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_FLASH_Unlock+0x38>)
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	da0b      	bge.n	8003252 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <HAL_FLASH_Unlock+0x38>)
 800323c:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_FLASH_Unlock+0x3c>)
 800323e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003240:	4b07      	ldr	r3, [pc, #28]	; (8003260 <HAL_FLASH_Unlock+0x38>)
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_FLASH_Unlock+0x40>)
 8003244:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_FLASH_Unlock+0x38>)
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	da01      	bge.n	8003252 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003252:	79fb      	ldrb	r3, [r7, #7]
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40023c00 	.word	0x40023c00
 8003264:	45670123 	.word	0x45670123
 8003268:	cdef89ab 	.word	0xcdef89ab

0800326c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_FLASH_Lock+0x1c>)
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_FLASH_Lock+0x1c>)
 8003276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800327a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40023c00 	.word	0x40023c00

0800328c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003298:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <FLASH_WaitForLastOperation+0x78>)
 800329a:	2200      	movs	r2, #0
 800329c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800329e:	f7fe fd73 	bl	8001d88 <HAL_GetTick>
 80032a2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80032a4:	e010      	b.n	80032c8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d00c      	beq.n	80032c8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <FLASH_WaitForLastOperation+0x38>
 80032b4:	f7fe fd68 	bl	8001d88 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d201      	bcs.n	80032c8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e019      	b.n	80032fc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <FLASH_WaitForLastOperation+0x7c>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e8      	bne.n	80032a6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <FLASH_WaitForLastOperation+0x7c>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <FLASH_WaitForLastOperation+0x7c>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <FLASH_WaitForLastOperation+0x7c>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80032f2:	f000 f8a3 	bl	800343c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
  
}  
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20004dec 	.word	0x20004dec
 8003308:	40023c00 	.word	0x40023c00

0800330c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800330c:	b490      	push	{r4, r7}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <FLASH_Program_DoubleWord+0x5c>)
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	4a12      	ldr	r2, [pc, #72]	; (8003368 <FLASH_Program_DoubleWord+0x5c>)
 800331e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003322:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003324:	4b10      	ldr	r3, [pc, #64]	; (8003368 <FLASH_Program_DoubleWord+0x5c>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	4a0f      	ldr	r2, [pc, #60]	; (8003368 <FLASH_Program_DoubleWord+0x5c>)
 800332a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800332e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <FLASH_Program_DoubleWord+0x5c>)
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <FLASH_Program_DoubleWord+0x5c>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003342:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003346:	e9d7 1200 	ldrd	r1, r2, [r7]
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	0013      	movs	r3, r2
 8003354:	2400      	movs	r4, #0
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	3204      	adds	r2, #4
 800335a:	6013      	str	r3, [r2, #0]
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bc90      	pop	{r4, r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40023c00 	.word	0x40023c00

0800336c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <FLASH_Program_Word+0x40>)
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <FLASH_Program_Word+0x40>)
 800337c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003380:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <FLASH_Program_Word+0x40>)
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	4a09      	ldr	r2, [pc, #36]	; (80033ac <FLASH_Program_Word+0x40>)
 8003388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800338c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <FLASH_Program_Word+0x40>)
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	4a06      	ldr	r2, [pc, #24]	; (80033ac <FLASH_Program_Word+0x40>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	601a      	str	r2, [r3, #0]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	40023c00 	.word	0x40023c00

080033b0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <FLASH_Program_HalfWord+0x44>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	4a0c      	ldr	r2, [pc, #48]	; (80033f4 <FLASH_Program_HalfWord+0x44>)
 80033c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <FLASH_Program_HalfWord+0x44>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <FLASH_Program_HalfWord+0x44>)
 80033ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80033d4:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <FLASH_Program_HalfWord+0x44>)
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	4a06      	ldr	r2, [pc, #24]	; (80033f4 <FLASH_Program_HalfWord+0x44>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	801a      	strh	r2, [r3, #0]
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40023c00 	.word	0x40023c00

080033f8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <FLASH_Program_Byte+0x40>)
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <FLASH_Program_Byte+0x40>)
 800340a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003410:	4b09      	ldr	r3, [pc, #36]	; (8003438 <FLASH_Program_Byte+0x40>)
 8003412:	4a09      	ldr	r2, [pc, #36]	; (8003438 <FLASH_Program_Byte+0x40>)
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003418:	4b07      	ldr	r3, [pc, #28]	; (8003438 <FLASH_Program_Byte+0x40>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	4a06      	ldr	r2, [pc, #24]	; (8003438 <FLASH_Program_Byte+0x40>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	701a      	strb	r2, [r3, #0]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40023c00 	.word	0x40023c00

0800343c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003440:	4b2f      	ldr	r3, [pc, #188]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800344c:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	f043 0310 	orr.w	r3, r3, #16
 8003454:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 8003456:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003458:	4b29      	ldr	r3, [pc, #164]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 800345a:	2210      	movs	r2, #16
 800345c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800346a:	4b26      	ldr	r3, [pc, #152]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f043 0308 	orr.w	r3, r3, #8
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 8003474:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003476:	4b22      	ldr	r3, [pc, #136]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 8003478:	2220      	movs	r2, #32
 800347a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003488:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 8003492:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 8003496:	2240      	movs	r2, #64	; 0x40
 8003498:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800349a:	4b19      	ldr	r3, [pc, #100]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80034a6:	4b17      	ldr	r3, [pc, #92]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f043 0302 	orr.w	r3, r3, #2
 80034ae:	4a15      	ldr	r2, [pc, #84]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 80034b0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 80034b4:	2280      	movs	r2, #128	; 0x80
 80034b6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	4a0d      	ldr	r2, [pc, #52]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 80034ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 80034d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034d6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f043 0320 	orr.w	r3, r3, #32
 80034ec:	4a05      	ldr	r2, [pc, #20]	; (8003504 <FLASH_SetErrorCode+0xc8>)
 80034ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <FLASH_SetErrorCode+0xc4>)
 80034f2:	2202      	movs	r2, #2
 80034f4:	60da      	str	r2, [r3, #12]
  }
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40023c00 	.word	0x40023c00
 8003504:	20004dec 	.word	0x20004dec

08003508 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e010      	b.n	8003546 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d103      	bne.n	8003532 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800352a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e009      	b.n	8003546 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d103      	bne.n	8003540 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e002      	b.n	8003546 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003540:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003544:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <FLASH_Erase_Sector+0x8c>)
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	4a12      	ldr	r2, [pc, #72]	; (8003594 <FLASH_Erase_Sector+0x8c>)
 800354c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003550:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <FLASH_Erase_Sector+0x8c>)
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	490f      	ldr	r1, [pc, #60]	; (8003594 <FLASH_Erase_Sector+0x8c>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <FLASH_Erase_Sector+0x8c>)
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <FLASH_Erase_Sector+0x8c>)
 8003564:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003568:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <FLASH_Erase_Sector+0x8c>)
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4313      	orrs	r3, r2
 8003574:	4a07      	ldr	r2, [pc, #28]	; (8003594 <FLASH_Erase_Sector+0x8c>)
 8003576:	f043 0302 	orr.w	r3, r3, #2
 800357a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <FLASH_Erase_Sector+0x8c>)
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	4a04      	ldr	r2, [pc, #16]	; (8003594 <FLASH_Erase_Sector+0x8c>)
 8003582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003586:	6113      	str	r3, [r2, #16]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40023c00 	.word	0x40023c00

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	; 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	e165      	b.n	8003880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b4:	2201      	movs	r2, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	f040 8154 	bne.w	800387a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d00b      	beq.n	80035f2 <HAL_GPIO_Init+0x5a>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d007      	beq.n	80035f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035e6:	2b11      	cmp	r3, #17
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b12      	cmp	r3, #18
 80035f0:	d130      	bne.n	8003654 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	2203      	movs	r2, #3
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003628:	2201      	movs	r2, #1
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 0201 	and.w	r2, r3, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0xfc>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b12      	cmp	r3, #18
 8003692:	d123      	bne.n	80036dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	08da      	lsrs	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3208      	adds	r2, #8
 800369c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	220f      	movs	r2, #15
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	08da      	lsrs	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3208      	adds	r2, #8
 80036d6:	69b9      	ldr	r1, [r7, #24]
 80036d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	2203      	movs	r2, #3
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0203 	and.w	r2, r3, #3
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80ae 	beq.w	800387a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	4b5c      	ldr	r3, [pc, #368]	; (8003894 <HAL_GPIO_Init+0x2fc>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	4a5b      	ldr	r2, [pc, #364]	; (8003894 <HAL_GPIO_Init+0x2fc>)
 8003728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800372c:	6453      	str	r3, [r2, #68]	; 0x44
 800372e:	4b59      	ldr	r3, [pc, #356]	; (8003894 <HAL_GPIO_Init+0x2fc>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800373a:	4a57      	ldr	r2, [pc, #348]	; (8003898 <HAL_GPIO_Init+0x300>)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	3302      	adds	r3, #2
 8003742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	220f      	movs	r2, #15
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a4e      	ldr	r2, [pc, #312]	; (800389c <HAL_GPIO_Init+0x304>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d025      	beq.n	80037b2 <HAL_GPIO_Init+0x21a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a4d      	ldr	r2, [pc, #308]	; (80038a0 <HAL_GPIO_Init+0x308>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01f      	beq.n	80037ae <HAL_GPIO_Init+0x216>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a4c      	ldr	r2, [pc, #304]	; (80038a4 <HAL_GPIO_Init+0x30c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d019      	beq.n	80037aa <HAL_GPIO_Init+0x212>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4b      	ldr	r2, [pc, #300]	; (80038a8 <HAL_GPIO_Init+0x310>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_GPIO_Init+0x20e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4a      	ldr	r2, [pc, #296]	; (80038ac <HAL_GPIO_Init+0x314>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00d      	beq.n	80037a2 <HAL_GPIO_Init+0x20a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a49      	ldr	r2, [pc, #292]	; (80038b0 <HAL_GPIO_Init+0x318>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <HAL_GPIO_Init+0x206>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a48      	ldr	r2, [pc, #288]	; (80038b4 <HAL_GPIO_Init+0x31c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d101      	bne.n	800379a <HAL_GPIO_Init+0x202>
 8003796:	2306      	movs	r3, #6
 8003798:	e00c      	b.n	80037b4 <HAL_GPIO_Init+0x21c>
 800379a:	2307      	movs	r3, #7
 800379c:	e00a      	b.n	80037b4 <HAL_GPIO_Init+0x21c>
 800379e:	2305      	movs	r3, #5
 80037a0:	e008      	b.n	80037b4 <HAL_GPIO_Init+0x21c>
 80037a2:	2304      	movs	r3, #4
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x21c>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e004      	b.n	80037b4 <HAL_GPIO_Init+0x21c>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_Init+0x21c>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_GPIO_Init+0x21c>
 80037b2:	2300      	movs	r3, #0
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	f002 0203 	and.w	r2, r2, #3
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	4093      	lsls	r3, r2
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c4:	4934      	ldr	r1, [pc, #208]	; (8003898 <HAL_GPIO_Init+0x300>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d2:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <HAL_GPIO_Init+0x320>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f6:	4a30      	ldr	r2, [pc, #192]	; (80038b8 <HAL_GPIO_Init+0x320>)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037fc:	4b2e      	ldr	r3, [pc, #184]	; (80038b8 <HAL_GPIO_Init+0x320>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003820:	4a25      	ldr	r2, [pc, #148]	; (80038b8 <HAL_GPIO_Init+0x320>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_GPIO_Init+0x320>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800384a:	4a1b      	ldr	r2, [pc, #108]	; (80038b8 <HAL_GPIO_Init+0x320>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_GPIO_Init+0x320>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003874:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <HAL_GPIO_Init+0x320>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	f67f ae96 	bls.w	80035b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003888:	bf00      	nop
 800388a:	3724      	adds	r7, #36	; 0x24
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40023800 	.word	0x40023800
 8003898:	40013800 	.word	0x40013800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40021400 	.word	0x40021400
 80038b4:	40021800 	.word	0x40021800
 80038b8:	40013c00 	.word	0x40013c00

080038bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
 80038c8:	4613      	mov	r3, r2
 80038ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038cc:	787b      	ldrb	r3, [r7, #1]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038d8:	e003      	b.n	80038e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038da:	887b      	ldrh	r3, [r7, #2]
 80038dc:	041a      	lsls	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	619a      	str	r2, [r3, #24]
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d006      	beq.n	8003914 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003906:	4a05      	ldr	r2, [pc, #20]	; (800391c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f806 	bl	8003920 <HAL_GPIO_EXTI_Callback>
  }
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40013c00 	.word	0x40013c00

08003920 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e11f      	b.n	8003b8a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fca0 	bl	80012a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2224      	movs	r2, #36	; 0x24
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800398a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800399a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800399c:	f002 fa36 	bl	8005e0c <HAL_RCC_GetPCLK1Freq>
 80039a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4a7b      	ldr	r2, [pc, #492]	; (8003b94 <HAL_I2C_Init+0x25c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d807      	bhi.n	80039bc <HAL_I2C_Init+0x84>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4a7a      	ldr	r2, [pc, #488]	; (8003b98 <HAL_I2C_Init+0x260>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	bf94      	ite	ls
 80039b4:	2301      	movls	r3, #1
 80039b6:	2300      	movhi	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e006      	b.n	80039ca <HAL_I2C_Init+0x92>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4a77      	ldr	r2, [pc, #476]	; (8003b9c <HAL_I2C_Init+0x264>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	bf94      	ite	ls
 80039c4:	2301      	movls	r3, #1
 80039c6:	2300      	movhi	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0db      	b.n	8003b8a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a72      	ldr	r2, [pc, #456]	; (8003ba0 <HAL_I2C_Init+0x268>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	0c9b      	lsrs	r3, r3, #18
 80039dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	4a64      	ldr	r2, [pc, #400]	; (8003b94 <HAL_I2C_Init+0x25c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d802      	bhi.n	8003a0c <HAL_I2C_Init+0xd4>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	e009      	b.n	8003a20 <HAL_I2C_Init+0xe8>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	4a63      	ldr	r2, [pc, #396]	; (8003ba4 <HAL_I2C_Init+0x26c>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	3301      	adds	r3, #1
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	430b      	orrs	r3, r1
 8003a26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4956      	ldr	r1, [pc, #344]	; (8003b94 <HAL_I2C_Init+0x25c>)
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	d80d      	bhi.n	8003a5c <HAL_I2C_Init+0x124>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1e59      	subs	r1, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	bf38      	it	cc
 8003a58:	2304      	movcc	r3, #4
 8003a5a:	e04f      	b.n	8003afc <HAL_I2C_Init+0x1c4>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d111      	bne.n	8003a88 <HAL_I2C_Init+0x150>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e58      	subs	r0, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	440b      	add	r3, r1
 8003a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e012      	b.n	8003aae <HAL_I2C_Init+0x176>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1e58      	subs	r0, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	0099      	lsls	r1, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Init+0x17e>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e022      	b.n	8003afc <HAL_I2C_Init+0x1c4>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10e      	bne.n	8003adc <HAL_I2C_Init+0x1a4>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1e58      	subs	r0, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	440b      	add	r3, r1
 8003acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ada:	e00f      	b.n	8003afc <HAL_I2C_Init+0x1c4>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	0099      	lsls	r1, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af2:	3301      	adds	r3, #1
 8003af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	6809      	ldr	r1, [r1, #0]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6911      	ldr	r1, [r2, #16]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68d2      	ldr	r2, [r2, #12]
 8003b36:	4311      	orrs	r1, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	000186a0 	.word	0x000186a0
 8003b98:	001e847f 	.word	0x001e847f
 8003b9c:	003d08ff 	.word	0x003d08ff
 8003ba0:	431bde83 	.word	0x431bde83
 8003ba4:	10624dd3 	.word	0x10624dd3

08003ba8 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb8:	f7fe f8e6 	bl	8001d88 <HAL_GetTick>
 8003bbc:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	f040 80fb 	bne.w	8003dc2 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_I2C_Slave_Transmit+0x30>
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0f3      	b.n	8003dc4 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_I2C_Slave_Transmit+0x42>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e0ec      	b.n	8003dc4 <HAL_I2C_Slave_Transmit+0x21c>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d007      	beq.n	8003c10 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c1e:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2221      	movs	r2, #33	; 0x21
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a5f      	ldr	r2, [pc, #380]	; (8003dcc <HAL_I2C_Slave_Transmit+0x224>)
 8003c50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c60:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	4959      	ldr	r1, [pc, #356]	; (8003dd0 <HAL_I2C_Slave_Transmit+0x228>)
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f001 fe16 	bl	800589e <I2C_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0a3      	b.n	8003dc4 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c9a:	d165      	bne.n	8003d68 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	494a      	ldr	r1, [pc, #296]	; (8003dd0 <HAL_I2C_Slave_Transmit+0x228>)
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f001 fdf9 	bl	800589e <I2C_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e086      	b.n	8003dc4 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ccc:	e04c      	b.n	8003d68 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f001 fe3a 	bl	800594c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cec:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e068      	b.n	8003dc4 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d11b      	bne.n	8003d68 <HAL_I2C_Slave_Transmit+0x1c0>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d017      	beq.n	8003d68 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ae      	bne.n	8003cce <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f001 fd8e 	bl	800589e <I2C_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e01b      	b.n	8003dc4 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d94:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e000      	b.n	8003dc4 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
  }
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	ffff0000 	.word	0xffff0000
 8003dd0:	00010002 	.word	0x00010002

08003dd4 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	; 0x28
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003de4:	f7fd ffd0 	bl	8001d88 <HAL_GetTick>
 8003de8:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	f040 80ee 	bne.w	8003fd4 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_I2C_Slave_Receive+0x30>
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0e6      	b.n	8003fd6 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_I2C_Slave_Receive+0x42>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e0df      	b.n	8003fd6 <HAL_I2C_Slave_Receive+0x202>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d007      	beq.n	8003e3c <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4a:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2222      	movs	r2, #34	; 0x22
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a59      	ldr	r2, [pc, #356]	; (8003fe0 <HAL_I2C_Slave_Receive+0x20c>)
 8003e7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e8c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2200      	movs	r2, #0
 8003e96:	4953      	ldr	r1, [pc, #332]	; (8003fe4 <HAL_I2C_Slave_Receive+0x210>)
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f001 fd00 	bl	800589e <I2C_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e096      	b.n	8003fd6 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8003ebe:	e04e      	b.n	8003f5e <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	6839      	ldr	r1, [r7, #0]
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f001 fdbf 	bl	8005a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ede:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e078      	b.n	8003fd6 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d11c      	bne.n	8003f5e <HAL_I2C_Slave_Receive+0x18a>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d018      	beq.n	8003f5e <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1ac      	bne.n	8003ec0 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	6839      	ldr	r1, [r7, #0]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f001 fd2f 	bl	80059ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f84:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e025      	b.n	8003fd6 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	ffff0000 	.word	0xffff0000
 8003fe4:	00010002 	.word	0x00010002

08003fe8 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d158      	bne.n	80040b4 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_I2C_Slave_Receive_IT+0x26>
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e051      	b.n	80040b6 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_I2C_Slave_Receive_IT+0x38>
 800401c:	2302      	movs	r3, #2
 800401e:	e04a      	b.n	80040b6 <HAL_I2C_Slave_Receive_IT+0xce>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d007      	beq.n	8004046 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004054:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2222      	movs	r2, #34	; 0x22
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8004086:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004096:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80040ae:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
  }
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	ffff0000 	.word	0xffff0000

080040c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d003      	beq.n	8004100 <HAL_I2C_EV_IRQHandler+0x38>
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	f040 80b6 	bne.w	800426c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10d      	bne.n	8004136 <HAL_I2C_EV_IRQHandler+0x6e>
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004120:	d003      	beq.n	800412a <HAL_I2C_EV_IRQHandler+0x62>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004128:	d101      	bne.n	800412e <HAL_I2C_EV_IRQHandler+0x66>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <HAL_I2C_EV_IRQHandler+0x68>
 800412e:	2300      	movs	r3, #0
 8004130:	2b01      	cmp	r3, #1
 8004132:	f000 8127 	beq.w	8004384 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00c      	beq.n	800415a <HAL_I2C_EV_IRQHandler+0x92>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	0a5b      	lsrs	r3, r3, #9
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d006      	beq.n	800415a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f001 fd00 	bl	8005b52 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fd12 	bl	8004b7c <I2C_Master_SB>
 8004158:	e087      	b.n	800426a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	08db      	lsrs	r3, r3, #3
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_I2C_EV_IRQHandler+0xb2>
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	0a5b      	lsrs	r3, r3, #9
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fd88 	bl	8004c88 <I2C_Master_ADD10>
 8004178:	e077      	b.n	800426a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_I2C_EV_IRQHandler+0xd2>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	0a5b      	lsrs	r3, r3, #9
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fda2 	bl	8004cdc <I2C_Master_ADDR>
 8004198:	e067      	b.n	800426a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	089b      	lsrs	r3, r3, #2
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d030      	beq.n	8004208 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b4:	f000 80e8 	beq.w	8004388 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	09db      	lsrs	r3, r3, #7
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00f      	beq.n	80041e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	0a9b      	lsrs	r3, r3, #10
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d009      	beq.n	80041e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d103      	bne.n	80041e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f9de 	bl	800459e <I2C_MasterTransmit_TXE>
 80041e2:	e042      	b.n	800426a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80cb 	beq.w	8004388 <HAL_I2C_EV_IRQHandler+0x2c0>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	0a5b      	lsrs	r3, r3, #9
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80c4 	beq.w	8004388 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fa68 	bl	80046d6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004206:	e0bf      	b.n	8004388 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004216:	f000 80b7 	beq.w	8004388 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00f      	beq.n	8004246 <HAL_I2C_EV_IRQHandler+0x17e>
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	0a9b      	lsrs	r3, r3, #10
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_I2C_EV_IRQHandler+0x17e>
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fb30 	bl	80048a4 <I2C_MasterReceive_RXNE>
 8004244:	e011      	b.n	800426a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 809a 	beq.w	8004388 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	0a5b      	lsrs	r3, r3, #9
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8093 	beq.w	8004388 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fba0 	bl	80049a8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004268:	e08e      	b.n	8004388 <HAL_I2C_EV_IRQHandler+0x2c0>
 800426a:	e08d      	b.n	8004388 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e007      	b.n	800428e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <HAL_I2C_EV_IRQHandler+0x1f8>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	0a5b      	lsrs	r3, r3, #9
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80042b6:	69b9      	ldr	r1, [r7, #24]
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 ff5e 	bl	800517a <I2C_Slave_ADDR>
 80042be:	e066      	b.n	800438e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <HAL_I2C_EV_IRQHandler+0x218>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	0a5b      	lsrs	r3, r3, #9
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 ff93 	bl	8005204 <I2C_Slave_STOPF>
 80042de:	e056      	b.n	800438e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042e0:	7bbb      	ldrb	r3, [r7, #14]
 80042e2:	2b21      	cmp	r3, #33	; 0x21
 80042e4:	d002      	beq.n	80042ec <HAL_I2C_EV_IRQHandler+0x224>
 80042e6:	7bbb      	ldrb	r3, [r7, #14]
 80042e8:	2b29      	cmp	r3, #41	; 0x29
 80042ea:	d125      	bne.n	8004338 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	09db      	lsrs	r3, r3, #7
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00f      	beq.n	8004318 <HAL_I2C_EV_IRQHandler+0x250>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	0a9b      	lsrs	r3, r3, #10
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_I2C_EV_IRQHandler+0x250>
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d103      	bne.n	8004318 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fe74 	bl	8004ffe <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004316:	e039      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	089b      	lsrs	r3, r3, #2
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d033      	beq.n	800438c <HAL_I2C_EV_IRQHandler+0x2c4>
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	0a5b      	lsrs	r3, r3, #9
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02d      	beq.n	800438c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fea1 	bl	8005078 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004336:	e029      	b.n	800438c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	099b      	lsrs	r3, r3, #6
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00f      	beq.n	8004364 <HAL_I2C_EV_IRQHandler+0x29c>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	0a9b      	lsrs	r3, r3, #10
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <HAL_I2C_EV_IRQHandler+0x29c>
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	089b      	lsrs	r3, r3, #2
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d103      	bne.n	8004364 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 feac 	bl	80050ba <I2C_SlaveReceive_RXNE>
 8004362:	e014      	b.n	800438e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00e      	beq.n	800438e <HAL_I2C_EV_IRQHandler+0x2c6>
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	0a5b      	lsrs	r3, r3, #9
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 feda 	bl	8005136 <I2C_SlaveReceive_BTF>
 8004382:	e004      	b.n	800438e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004384:	bf00      	nop
 8004386:	e002      	b.n	800438e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004388:	bf00      	nop
 800438a:	e000      	b.n	800438e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800438c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800438e:	3720      	adds	r7, #32
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	; 0x28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00e      	beq.n	80043e2 <HAL_I2C_ER_IRQHandler+0x4e>
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	0a1b      	lsrs	r3, r3, #8
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00e      	beq.n	800440c <HAL_I2C_ER_IRQHandler+0x78>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	f043 0302 	orr.w	r3, r3, #2
 8004400:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800440a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	0a9b      	lsrs	r3, r3, #10
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d03f      	beq.n	8004498 <HAL_I2C_ER_IRQHandler+0x104>
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d039      	beq.n	8004498 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004424:	7efb      	ldrb	r3, [r7, #27]
 8004426:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004436:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800443e:	7ebb      	ldrb	r3, [r7, #26]
 8004440:	2b20      	cmp	r3, #32
 8004442:	d112      	bne.n	800446a <HAL_I2C_ER_IRQHandler+0xd6>
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10f      	bne.n	800446a <HAL_I2C_ER_IRQHandler+0xd6>
 800444a:	7cfb      	ldrb	r3, [r7, #19]
 800444c:	2b21      	cmp	r3, #33	; 0x21
 800444e:	d008      	beq.n	8004462 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	2b29      	cmp	r3, #41	; 0x29
 8004454:	d005      	beq.n	8004462 <HAL_I2C_ER_IRQHandler+0xce>
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	2b28      	cmp	r3, #40	; 0x28
 800445a:	d106      	bne.n	800446a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b21      	cmp	r3, #33	; 0x21
 8004460:	d103      	bne.n	800446a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fffe 	bl	8005464 <I2C_Slave_AF>
 8004468:	e016      	b.n	8004498 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004472:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	f043 0304 	orr.w	r3, r3, #4
 800447a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800447c:	7efb      	ldrb	r3, [r7, #27]
 800447e:	2b10      	cmp	r3, #16
 8004480:	d002      	beq.n	8004488 <HAL_I2C_ER_IRQHandler+0xf4>
 8004482:	7efb      	ldrb	r3, [r7, #27]
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d107      	bne.n	8004498 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004496:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	0adb      	lsrs	r3, r3, #11
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00e      	beq.n	80044c2 <HAL_I2C_ER_IRQHandler+0x12e>
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	0a1b      	lsrs	r3, r3, #8
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	f043 0308 	orr.w	r3, r3, #8
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80044c0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f001 f835 	bl	8005544 <I2C_ITError>
  }
}
 80044da:	bf00      	nop
 80044dc:	3728      	adds	r7, #40	; 0x28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	460b      	mov	r3, r1
 8004528:	70fb      	strb	r3, [r7, #3]
 800452a:	4613      	mov	r3, r2
 800452c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d150      	bne.n	8004666 <I2C_MasterTransmit_TXE+0xc8>
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b21      	cmp	r3, #33	; 0x21
 80045c8:	d14d      	bne.n	8004666 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d01d      	beq.n	800460c <I2C_MasterTransmit_TXE+0x6e>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d01a      	beq.n	800460c <I2C_MasterTransmit_TXE+0x6e>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045dc:	d016      	beq.n	800460c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ec:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2211      	movs	r2, #17
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff6c 	bl	80044e2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800460a:	e060      	b.n	80046ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800461a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	d107      	bne.n	8004656 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ff7d 	bl	800454e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004654:	e03b      	b.n	80046ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff ff3f 	bl	80044e2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004664:	e033      	b.n	80046ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	2b21      	cmp	r3, #33	; 0x21
 800466a:	d005      	beq.n	8004678 <I2C_MasterTransmit_TXE+0xda>
 800466c:	7bbb      	ldrb	r3, [r7, #14]
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d12d      	bne.n	80046ce <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	2b22      	cmp	r3, #34	; 0x22
 8004676:	d12a      	bne.n	80046ce <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d108      	bne.n	8004694 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004690:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004692:	e01c      	b.n	80046ce <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b40      	cmp	r3, #64	; 0x40
 800469e:	d103      	bne.n	80046a8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f898 	bl	80047d6 <I2C_MemoryTransmit_TXE_BTF>
}
 80046a6:	e012      	b.n	80046ce <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	781a      	ldrb	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046cc:	e7ff      	b.n	80046ce <I2C_MasterTransmit_TXE+0x130>
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b21      	cmp	r3, #33	; 0x21
 80046ee:	d165      	bne.n	80047bc <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d012      	beq.n	8004720 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800471e:	e056      	b.n	80047ce <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b08      	cmp	r3, #8
 8004724:	d01d      	beq.n	8004762 <I2C_MasterTransmit_BTF+0x8c>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b20      	cmp	r3, #32
 800472a:	d01a      	beq.n	8004762 <I2C_MasterTransmit_BTF+0x8c>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004732:	d016      	beq.n	8004762 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004742:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2211      	movs	r2, #17
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fec1 	bl	80044e2 <HAL_I2C_MasterTxCpltCallback>
}
 8004760:	e035      	b.n	80047ce <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004770:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004780:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d107      	bne.n	80047ac <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fed2 	bl	800454e <HAL_I2C_MemTxCpltCallback>
}
 80047aa:	e010      	b.n	80047ce <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fe94 	bl	80044e2 <HAL_I2C_MasterTxCpltCallback>
}
 80047ba:	e008      	b.n	80047ce <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d102      	bne.n	80047ce <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f804 	bl	80047d6 <I2C_MemoryTransmit_TXE_BTF>
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d11d      	bne.n	8004822 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d10b      	bne.n	8004806 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fe:	1c9a      	adds	r2, r3, #2
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004804:	e048      	b.n	8004898 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480a:	b29b      	uxth	r3, r3
 800480c:	121b      	asrs	r3, r3, #8
 800480e:	b2da      	uxtb	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004820:	e03a      	b.n	8004898 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10b      	bne.n	8004842 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482e:	b2da      	uxtb	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004840:	e02a      	b.n	8004898 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004846:	2b02      	cmp	r3, #2
 8004848:	d126      	bne.n	8004898 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b22      	cmp	r3, #34	; 0x22
 8004854:	d108      	bne.n	8004868 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004864:	601a      	str	r2, [r3, #0]
}
 8004866:	e017      	b.n	8004898 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b21      	cmp	r3, #33	; 0x21
 8004872:	d111      	bne.n	8004898 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b22      	cmp	r3, #34	; 0x22
 80048b6:	d173      	bne.n	80049a0 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d920      	bls.n	8004908 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d154      	bne.n	80049a0 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004904:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004906:	e04b      	b.n	80049a0 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	2b02      	cmp	r3, #2
 800490e:	d047      	beq.n	80049a0 <I2C_MasterReceive_RXNE+0xfc>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d002      	beq.n	800491c <I2C_MasterReceive_RXNE+0x78>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d141      	bne.n	80049a0 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800493a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d10a      	bne.n	800498c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff fdec 	bl	8004562 <HAL_I2C_MemRxCpltCallback>
}
 800498a:	e009      	b.n	80049a0 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2212      	movs	r2, #18
 8004998:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff fdab 	bl	80044f6 <HAL_I2C_MasterRxCpltCallback>
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d11b      	bne.n	80049f8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ce:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049f6:	e0bd      	b.n	8004b74 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d129      	bne.n	8004a56 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a10:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d00a      	beq.n	8004a2e <I2C_MasterReceive_BTF+0x86>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d007      	beq.n	8004a2e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a54:	e08e      	b.n	8004b74 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d176      	bne.n	8004b4e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d002      	beq.n	8004a6c <I2C_MasterReceive_BTF+0xc4>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d108      	bne.n	8004a7e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e019      	b.n	8004ab2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d002      	beq.n	8004a8a <I2C_MasterReceive_BTF+0xe2>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d108      	bne.n	8004a9c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e00a      	b.n	8004ab2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d007      	beq.n	8004ab2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b0c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d10a      	bne.n	8004b38 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fd16 	bl	8004562 <HAL_I2C_MemRxCpltCallback>
}
 8004b36:	e01d      	b.n	8004b74 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2212      	movs	r2, #18
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff fcd5 	bl	80044f6 <HAL_I2C_MasterRxCpltCallback>
}
 8004b4c:	e012      	b.n	8004b74 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d117      	bne.n	8004bc0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ba8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004baa:	e067      	b.n	8004c7c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	611a      	str	r2, [r3, #16]
}
 8004bbe:	e05d      	b.n	8004c7c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc8:	d133      	bne.n	8004c32 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b21      	cmp	r3, #33	; 0x21
 8004bd4:	d109      	bne.n	8004bea <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004be6:	611a      	str	r2, [r3, #16]
 8004be8:	e008      	b.n	8004bfc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <I2C_Master_SB+0x92>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d108      	bne.n	8004c20 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d032      	beq.n	8004c7c <I2C_Master_SB+0x100>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02d      	beq.n	8004c7c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2e:	605a      	str	r2, [r3, #4]
}
 8004c30:	e024      	b.n	8004c7c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10e      	bne.n	8004c58 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	11db      	asrs	r3, r3, #7
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 0306 	and.w	r3, r3, #6
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f063 030f 	orn	r3, r3, #15
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	611a      	str	r2, [r3, #16]
}
 8004c56:	e011      	b.n	8004c7c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d10d      	bne.n	8004c7c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	11db      	asrs	r3, r3, #7
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f003 0306 	and.w	r3, r3, #6
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f063 030e 	orn	r3, r3, #14
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	611a      	str	r2, [r3, #16]
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <I2C_Master_ADD10+0x24>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d011      	beq.n	8004cd0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <I2C_Master_ADD10+0x38>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cce:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b091      	sub	sp, #68	; 0x44
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b22      	cmp	r3, #34	; 0x22
 8004d04:	f040 8169 	bne.w	8004fda <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10f      	bne.n	8004d30 <I2C_Master_ADDR+0x54>
 8004d10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d10b      	bne.n	8004d30 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	633b      	str	r3, [r7, #48]	; 0x30
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	e160      	b.n	8004ff2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11d      	bne.n	8004d74 <I2C_Master_ADDR+0x98>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d40:	d118      	bne.n	8004d74 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d42:	2300      	movs	r3, #0
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d66:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	651a      	str	r2, [r3, #80]	; 0x50
 8004d72:	e13e      	b.n	8004ff2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d113      	bne.n	8004da6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7e:	2300      	movs	r3, #0
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	e115      	b.n	8004fd2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	f040 808a 	bne.w	8004ec6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004db8:	d137      	bne.n	8004e2a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd8:	d113      	bne.n	8004e02 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dea:	2300      	movs	r3, #0
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	e0e7      	b.n	8004fd2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e02:	2300      	movs	r3, #0
 8004e04:	623b      	str	r3, [r7, #32]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	623b      	str	r3, [r7, #32]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	e0d3      	b.n	8004fd2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d02e      	beq.n	8004e8e <I2C_Master_ADDR+0x1b2>
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d02b      	beq.n	8004e8e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e38:	2b12      	cmp	r3, #18
 8004e3a:	d102      	bne.n	8004e42 <I2C_Master_ADDR+0x166>
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d125      	bne.n	8004e8e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d00e      	beq.n	8004e66 <I2C_Master_ADDR+0x18a>
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d00b      	beq.n	8004e66 <I2C_Master_ADDR+0x18a>
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d008      	beq.n	8004e66 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e007      	b.n	8004e76 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e74:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	61fb      	str	r3, [r7, #28]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	e0a1      	b.n	8004fd2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e085      	b.n	8004fd2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d14d      	bne.n	8004f6c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d016      	beq.n	8004f04 <I2C_Master_ADDR+0x228>
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d013      	beq.n	8004f04 <I2C_Master_ADDR+0x228>
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	d010      	beq.n	8004f04 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	e007      	b.n	8004f14 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f12:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f22:	d117      	bne.n	8004f54 <I2C_Master_ADDR+0x278>
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f2a:	d00b      	beq.n	8004f44 <I2C_Master_ADDR+0x268>
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d008      	beq.n	8004f44 <I2C_Master_ADDR+0x268>
 8004f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d005      	beq.n	8004f44 <I2C_Master_ADDR+0x268>
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d002      	beq.n	8004f44 <I2C_Master_ADDR+0x268>
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d107      	bne.n	8004f54 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f52:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	e032      	b.n	8004fd2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f7a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8a:	d117      	bne.n	8004fbc <I2C_Master_ADDR+0x2e0>
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f92:	d00b      	beq.n	8004fac <I2C_Master_ADDR+0x2d0>
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d008      	beq.n	8004fac <I2C_Master_ADDR+0x2d0>
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d005      	beq.n	8004fac <I2C_Master_ADDR+0x2d0>
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d002      	beq.n	8004fac <I2C_Master_ADDR+0x2d0>
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d107      	bne.n	8004fbc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004fd8:	e00b      	b.n	8004ff2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	68fb      	ldr	r3, [r7, #12]
}
 8004ff0:	e7ff      	b.n	8004ff2 <I2C_Master_ADDR+0x316>
 8004ff2:	bf00      	nop
 8004ff4:	3744      	adds	r7, #68	; 0x44
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02b      	beq.n	8005070 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d114      	bne.n	8005070 <I2C_SlaveTransmit_TXE+0x72>
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b29      	cmp	r3, #41	; 0x29
 800504a:	d111      	bne.n	8005070 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2221      	movs	r2, #33	; 0x21
 8005060:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2228      	movs	r2, #40	; 0x28
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff fa4d 	bl	800450a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005070:	bf00      	nop
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d011      	beq.n	80050ae <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	781a      	ldrb	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02c      	beq.n	800512e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d114      	bne.n	800512e <I2C_SlaveReceive_RXNE+0x74>
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b2a      	cmp	r3, #42	; 0x2a
 8005108:	d111      	bne.n	800512e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005118:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2222      	movs	r2, #34	; 0x22
 800511e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2228      	movs	r2, #40	; 0x28
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fb ff73 	bl	8001014 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d012      	beq.n	800516e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005184:	2300      	movs	r3, #0
 8005186:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005194:	2b28      	cmp	r3, #40	; 0x28
 8005196:	d127      	bne.n	80051e8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	089b      	lsrs	r3, r3, #2
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	09db      	lsrs	r3, r3, #7
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d103      	bne.n	80051cc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	81bb      	strh	r3, [r7, #12]
 80051ca:	e002      	b.n	80051d2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80051da:	89ba      	ldrh	r2, [r7, #12]
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff f99c 	bl	800451e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051e6:	e008      	b.n	80051fa <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0202 	mvn.w	r2, #2
 80051f0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005212:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005222:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005224:	2300      	movs	r3, #0
 8005226:	60bb      	str	r3, [r7, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005250:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005260:	d172      	bne.n	8005348 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b22      	cmp	r3, #34	; 0x22
 8005266:	d002      	beq.n	800526e <I2C_Slave_STOPF+0x6a>
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b2a      	cmp	r3, #42	; 0x2a
 800526c:	d135      	bne.n	80052da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	b29a      	uxth	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f043 0204 	orr.w	r2, r3, #4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fd fe7e 	bl	8002fa8 <HAL_DMA_GetState>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d049      	beq.n	8005346 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	4a69      	ldr	r2, [pc, #420]	; (800545c <I2C_Slave_STOPF+0x258>)
 80052b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fd fcc6 	bl	8002c50 <HAL_DMA_Abort_IT>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d03d      	beq.n	8005346 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052d4:	4610      	mov	r0, r2
 80052d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052d8:	e035      	b.n	8005346 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f043 0204 	orr.w	r2, r3, #4
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800530c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	4618      	mov	r0, r3
 8005314:	f7fd fe48 	bl	8002fa8 <HAL_DMA_GetState>
 8005318:	4603      	mov	r3, r0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d014      	beq.n	8005348 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005322:	4a4e      	ldr	r2, [pc, #312]	; (800545c <I2C_Slave_STOPF+0x258>)
 8005324:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	4618      	mov	r0, r3
 800532c:	f7fd fc90 	bl	8002c50 <HAL_DMA_Abort_IT>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005340:	4610      	mov	r0, r2
 8005342:	4798      	blx	r3
 8005344:	e000      	b.n	8005348 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005346:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d03e      	beq.n	80053d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d112      	bne.n	8005386 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d112      	bne.n	80053ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	f043 0204 	orr.w	r2, r3, #4
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8b3 	bl	8005544 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053de:	e039      	b.n	8005454 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b2a      	cmp	r3, #42	; 0x2a
 80053e4:	d109      	bne.n	80053fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2228      	movs	r2, #40	; 0x28
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7fb fe0d 	bl	8001014 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b28      	cmp	r3, #40	; 0x28
 8005404:	d111      	bne.n	800542a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a15      	ldr	r2, [pc, #84]	; (8005460 <I2C_Slave_STOPF+0x25c>)
 800540a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff f889 	bl	800453a <HAL_I2C_ListenCpltCallback>
}
 8005428:	e014      	b.n	8005454 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	2b22      	cmp	r3, #34	; 0x22
 8005430:	d002      	beq.n	8005438 <I2C_Slave_STOPF+0x234>
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	2b22      	cmp	r3, #34	; 0x22
 8005436:	d10d      	bne.n	8005454 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fb fde0 	bl	8001014 <HAL_I2C_SlaveRxCpltCallback>
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	080057a1 	.word	0x080057a1
 8005460:	ffff0000 	.word	0xffff0000

08005464 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005472:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b08      	cmp	r3, #8
 800547e:	d002      	beq.n	8005486 <I2C_Slave_AF+0x22>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b20      	cmp	r3, #32
 8005484:	d129      	bne.n	80054da <I2C_Slave_AF+0x76>
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	2b28      	cmp	r3, #40	; 0x28
 800548a:	d126      	bne.n	80054da <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a2c      	ldr	r2, [pc, #176]	; (8005540 <I2C_Slave_AF+0xdc>)
 8005490:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054a0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054aa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff f831 	bl	800453a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80054d8:	e02e      	b.n	8005538 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b21      	cmp	r3, #33	; 0x21
 80054de:	d126      	bne.n	800552e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a17      	ldr	r2, [pc, #92]	; (8005540 <I2C_Slave_AF+0xdc>)
 80054e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2221      	movs	r2, #33	; 0x21
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800550a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005514:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005524:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fe ffef 	bl	800450a <HAL_I2C_SlaveTxCpltCallback>
}
 800552c:	e004      	b.n	8005538 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005536:	615a      	str	r2, [r3, #20]
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	ffff0000 	.word	0xffff0000

08005544 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005552:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b10      	cmp	r3, #16
 800555e:	d10a      	bne.n	8005576 <I2C_ITError+0x32>
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b22      	cmp	r3, #34	; 0x22
 8005564:	d107      	bne.n	8005576 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005574:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800557c:	2b28      	cmp	r3, #40	; 0x28
 800557e:	d107      	bne.n	8005590 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2228      	movs	r2, #40	; 0x28
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800558e:	e015      	b.n	80055bc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800559a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559e:	d006      	beq.n	80055ae <I2C_ITError+0x6a>
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b60      	cmp	r3, #96	; 0x60
 80055a4:	d003      	beq.n	80055ae <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ca:	d162      	bne.n	8005692 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d020      	beq.n	800562c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	4a6a      	ldr	r2, [pc, #424]	; (8005798 <I2C_ITError+0x254>)
 80055f0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fd fb2a 	bl	8002c50 <HAL_DMA_Abort_IT>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8089 	beq.w	8005716 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0201 	bic.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005626:	4610      	mov	r0, r2
 8005628:	4798      	blx	r3
 800562a:	e074      	b.n	8005716 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	4a59      	ldr	r2, [pc, #356]	; (8005798 <I2C_ITError+0x254>)
 8005632:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	4618      	mov	r0, r3
 800563a:	f7fd fb09 	bl	8002c50 <HAL_DMA_Abort_IT>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d068      	beq.n	8005716 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d10b      	bne.n	800566a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0201 	bic.w	r2, r2, #1
 8005678:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800568c:	4610      	mov	r0, r2
 800568e:	4798      	blx	r3
 8005690:	e041      	b.n	8005716 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b60      	cmp	r3, #96	; 0x60
 800569c:	d125      	bne.n	80056ea <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b6:	2b40      	cmp	r3, #64	; 0x40
 80056b8:	d10b      	bne.n	80056d2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fe ff51 	bl	800458a <HAL_I2C_AbortCpltCallback>
 80056e8:	e015      	b.n	8005716 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d10b      	bne.n	8005710 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7fe ff30 	bl	8004576 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10e      	bne.n	8005744 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005736:	2b00      	cmp	r3, #0
 8005738:	d104      	bne.n	8005744 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005752:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b04      	cmp	r3, #4
 8005766:	d113      	bne.n	8005790 <I2C_ITError+0x24c>
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	2b28      	cmp	r3, #40	; 0x28
 800576c:	d110      	bne.n	8005790 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a0a      	ldr	r2, [pc, #40]	; (800579c <I2C_ITError+0x258>)
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fe fed5 	bl	800453a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005790:	bf00      	nop
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	080057a1 	.word	0x080057a1
 800579c:	ffff0000 	.word	0xffff0000

080057a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	2200      	movs	r2, #0
 80057c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	2200      	movs	r2, #0
 80057d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f8:	2200      	movs	r2, #0
 80057fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	2200      	movs	r2, #0
 800580a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0201 	bic.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b60      	cmp	r3, #96	; 0x60
 8005826:	d10e      	bne.n	8005846 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7fe fea3 	bl	800458a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005844:	e027      	b.n	8005896 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005846:	7afb      	ldrb	r3, [r7, #11]
 8005848:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800584c:	2b28      	cmp	r3, #40	; 0x28
 800584e:	d117      	bne.n	8005880 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800586e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2228      	movs	r2, #40	; 0x28
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800587e:	e007      	b.n	8005890 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f7fe fe70 	bl	8004576 <HAL_I2C_ErrorCallback>
}
 8005896:	bf00      	nop
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	603b      	str	r3, [r7, #0]
 80058aa:	4613      	mov	r3, r2
 80058ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058ae:	e025      	b.n	80058fc <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d021      	beq.n	80058fc <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b8:	f7fc fa66 	bl	8001d88 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <I2C_WaitOnFlagUntilTimeout+0x30>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d116      	bne.n	80058fc <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	f043 0220 	orr.w	r2, r3, #32
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e023      	b.n	8005944 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	0c1b      	lsrs	r3, r3, #16
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b01      	cmp	r3, #1
 8005904:	d10d      	bne.n	8005922 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	43da      	mvns	r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4013      	ands	r3, r2
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	bf0c      	ite	eq
 8005918:	2301      	moveq	r3, #1
 800591a:	2300      	movne	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	e00c      	b.n	800593c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	43da      	mvns	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4013      	ands	r3, r2
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf0c      	ite	eq
 8005934:	2301      	moveq	r3, #1
 8005936:	2300      	movne	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	429a      	cmp	r2, r3
 8005940:	d0b6      	beq.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005958:	e02d      	b.n	80059b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f8ca 	bl	8005af4 <I2C_IsAcknowledgeFailed>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e02d      	b.n	80059c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d021      	beq.n	80059b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005972:	f7fc fa09 	bl	8001d88 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	429a      	cmp	r2, r3
 8005980:	d302      	bcc.n	8005988 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d116      	bne.n	80059b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f043 0220 	orr.w	r2, r3, #32
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e007      	b.n	80059c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c0:	2b80      	cmp	r3, #128	; 0x80
 80059c2:	d1ca      	bne.n	800595a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059da:	e029      	b.n	8005a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f889 	bl	8005af4 <I2C_IsAcknowledgeFailed>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e029      	b.n	8005a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ec:	f7fc f9cc 	bl	8001d88 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d116      	bne.n	8005a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e007      	b.n	8005a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d1ce      	bne.n	80059dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a54:	e042      	b.n	8005adc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d119      	bne.n	8005a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0210 	mvn.w	r2, #16
 8005a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e029      	b.n	8005aec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a98:	f7fc f976 	bl	8001d88 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d302      	bcc.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d116      	bne.n	8005adc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e007      	b.n	8005aec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	d1b5      	bne.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0a:	d11b      	bne.n	8005b44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f043 0204 	orr.w	r2, r3, #4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b62:	d103      	bne.n	8005b6c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b6a:	e007      	b.n	8005b7c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b74:	d102      	bne.n	8005b7c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2208      	movs	r2, #8
 8005b7a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b92:	2300      	movs	r3, #0
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	4b20      	ldr	r3, [pc, #128]	; (8005c18 <HAL_PWREx_EnableOverDrive+0x90>)
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	4a1f      	ldr	r2, [pc, #124]	; (8005c18 <HAL_PWREx_EnableOverDrive+0x90>)
 8005b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba2:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <HAL_PWREx_EnableOverDrive+0x90>)
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005bae:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <HAL_PWREx_EnableOverDrive+0x94>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bb4:	f7fc f8e8 	bl	8001d88 <HAL_GetTick>
 8005bb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005bba:	e009      	b.n	8005bd0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005bbc:	f7fc f8e4 	bl	8001d88 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bca:	d901      	bls.n	8005bd0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e01f      	b.n	8005c10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bdc:	d1ee      	bne.n	8005bbc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005bde:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005be4:	f7fc f8d0 	bl	8001d88 <HAL_GetTick>
 8005be8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bea:	e009      	b.n	8005c00 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005bec:	f7fc f8cc 	bl	8001d88 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bfa:	d901      	bls.n	8005c00 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e007      	b.n	8005c10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c0c:	d1ee      	bne.n	8005bec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	420e0040 	.word	0x420e0040
 8005c20:	40007000 	.word	0x40007000
 8005c24:	420e0044 	.word	0x420e0044

08005c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0cc      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b68      	ldr	r3, [pc, #416]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d90c      	bls.n	8005c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b65      	ldr	r3, [pc, #404]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c52:	4b63      	ldr	r3, [pc, #396]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0b8      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d020      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c7c:	4b59      	ldr	r3, [pc, #356]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4a58      	ldr	r2, [pc, #352]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c94:	4b53      	ldr	r3, [pc, #332]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4a52      	ldr	r2, [pc, #328]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca0:	4b50      	ldr	r3, [pc, #320]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	494d      	ldr	r1, [pc, #308]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d044      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc6:	4b47      	ldr	r3, [pc, #284]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d119      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e07f      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d003      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d107      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce6:	4b3f      	ldr	r3, [pc, #252]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e06f      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf6:	4b3b      	ldr	r3, [pc, #236]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e067      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d06:	4b37      	ldr	r3, [pc, #220]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f023 0203 	bic.w	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4934      	ldr	r1, [pc, #208]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d18:	f7fc f836 	bl	8001d88 <HAL_GetTick>
 8005d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1e:	e00a      	b.n	8005d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d20:	f7fc f832 	bl	8001d88 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e04f      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d36:	4b2b      	ldr	r3, [pc, #172]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 020c 	and.w	r2, r3, #12
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d1eb      	bne.n	8005d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d48:	4b25      	ldr	r3, [pc, #148]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d20c      	bcs.n	8005d70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d56:	4b22      	ldr	r3, [pc, #136]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5e:	4b20      	ldr	r3, [pc, #128]	; (8005de0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d001      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e032      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d7c:	4b19      	ldr	r3, [pc, #100]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4916      	ldr	r1, [pc, #88]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d9a:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	490e      	ldr	r1, [pc, #56]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dae:	f000 f887 	bl	8005ec0 <HAL_RCC_GetSysClockFreq>
 8005db2:	4601      	mov	r1, r0
 8005db4:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005dc0:	5cd3      	ldrb	r3, [r2, r3]
 8005dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dca:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fb fb92 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40023c00 	.word	0x40023c00
 8005de4:	40023800 	.word	0x40023800
 8005de8:	0800b104 	.word	0x0800b104
 8005dec:	20000040 	.word	0x20000040
 8005df0:	2000004c 	.word	0x2000004c

08005df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005df8:	4b03      	ldr	r3, [pc, #12]	; (8005e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20000040 	.word	0x20000040

08005e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e10:	f7ff fff0 	bl	8005df4 <HAL_RCC_GetHCLKFreq>
 8005e14:	4601      	mov	r1, r0
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	0a9b      	lsrs	r3, r3, #10
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	4a03      	ldr	r2, [pc, #12]	; (8005e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e22:	5cd3      	ldrb	r3, [r2, r3]
 8005e24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	0800b114 	.word	0x0800b114

08005e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e38:	f7ff ffdc 	bl	8005df4 <HAL_RCC_GetHCLKFreq>
 8005e3c:	4601      	mov	r1, r0
 8005e3e:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	0b5b      	lsrs	r3, r3, #13
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	4a03      	ldr	r2, [pc, #12]	; (8005e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e4a:	5cd3      	ldrb	r3, [r2, r3]
 8005e4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40023800 	.word	0x40023800
 8005e58:	0800b114 	.word	0x0800b114

08005e5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	220f      	movs	r2, #15
 8005e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e6c:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 0203 	and.w	r2, r3, #3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e78:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e84:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e90:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	08db      	lsrs	r3, r3, #3
 8005e96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e9e:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <HAL_RCC_GetClockConfig+0x60>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 020f 	and.w	r2, r3, #15
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	601a      	str	r2, [r3, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40023c00 	.word	0x40023c00

08005ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eda:	4b9f      	ldr	r3, [pc, #636]	; (8006158 <HAL_RCC_GetSysClockFreq+0x298>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	f200 8130 	bhi.w	8006148 <HAL_RCC_GetSysClockFreq+0x288>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <HAL_RCC_GetSysClockFreq+0x30>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f25 	.word	0x08005f25
 8005ef4:	08006149 	.word	0x08006149
 8005ef8:	08006149 	.word	0x08006149
 8005efc:	08006149 	.word	0x08006149
 8005f00:	08005f2b 	.word	0x08005f2b
 8005f04:	08006149 	.word	0x08006149
 8005f08:	08006149 	.word	0x08006149
 8005f0c:	08006149 	.word	0x08006149
 8005f10:	08005f31 	.word	0x08005f31
 8005f14:	08006149 	.word	0x08006149
 8005f18:	08006149 	.word	0x08006149
 8005f1c:	08006149 	.word	0x08006149
 8005f20:	0800603f 	.word	0x0800603f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f24:	4b8d      	ldr	r3, [pc, #564]	; (800615c <HAL_RCC_GetSysClockFreq+0x29c>)
 8005f26:	613b      	str	r3, [r7, #16]
       break;
 8005f28:	e111      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f2a:	4b8d      	ldr	r3, [pc, #564]	; (8006160 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005f2c:	613b      	str	r3, [r7, #16]
      break;
 8005f2e:	e10e      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f30:	4b89      	ldr	r3, [pc, #548]	; (8006158 <HAL_RCC_GetSysClockFreq+0x298>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f38:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f3a:	4b87      	ldr	r3, [pc, #540]	; (8006158 <HAL_RCC_GetSysClockFreq+0x298>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d023      	beq.n	8005f8e <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f46:	4b84      	ldr	r3, [pc, #528]	; (8006158 <HAL_RCC_GetSysClockFreq+0x298>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	099b      	lsrs	r3, r3, #6
 8005f4c:	f04f 0400 	mov.w	r4, #0
 8005f50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	ea03 0501 	and.w	r5, r3, r1
 8005f5c:	ea04 0602 	and.w	r6, r4, r2
 8005f60:	4a7f      	ldr	r2, [pc, #508]	; (8006160 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005f62:	fb02 f106 	mul.w	r1, r2, r6
 8005f66:	2200      	movs	r2, #0
 8005f68:	fb02 f205 	mul.w	r2, r2, r5
 8005f6c:	440a      	add	r2, r1
 8005f6e:	497c      	ldr	r1, [pc, #496]	; (8006160 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005f70:	fba5 0101 	umull	r0, r1, r5, r1
 8005f74:	1853      	adds	r3, r2, r1
 8005f76:	4619      	mov	r1, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f04f 0400 	mov.w	r4, #0
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4623      	mov	r3, r4
 8005f82:	f7fa f945 	bl	8000210 <__aeabi_uldivmod>
 8005f86:	4603      	mov	r3, r0
 8005f88:	460c      	mov	r4, r1
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e049      	b.n	8006022 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f8e:	4b72      	ldr	r3, [pc, #456]	; (8006158 <HAL_RCC_GetSysClockFreq+0x298>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	099b      	lsrs	r3, r3, #6
 8005f94:	f04f 0400 	mov.w	r4, #0
 8005f98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	ea03 0501 	and.w	r5, r3, r1
 8005fa4:	ea04 0602 	and.w	r6, r4, r2
 8005fa8:	4629      	mov	r1, r5
 8005faa:	4632      	mov	r2, r6
 8005fac:	f04f 0300 	mov.w	r3, #0
 8005fb0:	f04f 0400 	mov.w	r4, #0
 8005fb4:	0154      	lsls	r4, r2, #5
 8005fb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005fba:	014b      	lsls	r3, r1, #5
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4622      	mov	r2, r4
 8005fc0:	1b49      	subs	r1, r1, r5
 8005fc2:	eb62 0206 	sbc.w	r2, r2, r6
 8005fc6:	f04f 0300 	mov.w	r3, #0
 8005fca:	f04f 0400 	mov.w	r4, #0
 8005fce:	0194      	lsls	r4, r2, #6
 8005fd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005fd4:	018b      	lsls	r3, r1, #6
 8005fd6:	1a5b      	subs	r3, r3, r1
 8005fd8:	eb64 0402 	sbc.w	r4, r4, r2
 8005fdc:	f04f 0100 	mov.w	r1, #0
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	00e2      	lsls	r2, r4, #3
 8005fe6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005fea:	00d9      	lsls	r1, r3, #3
 8005fec:	460b      	mov	r3, r1
 8005fee:	4614      	mov	r4, r2
 8005ff0:	195b      	adds	r3, r3, r5
 8005ff2:	eb44 0406 	adc.w	r4, r4, r6
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	02a2      	lsls	r2, r4, #10
 8006000:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006004:	0299      	lsls	r1, r3, #10
 8006006:	460b      	mov	r3, r1
 8006008:	4614      	mov	r4, r2
 800600a:	4618      	mov	r0, r3
 800600c:	4621      	mov	r1, r4
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f04f 0400 	mov.w	r4, #0
 8006014:	461a      	mov	r2, r3
 8006016:	4623      	mov	r3, r4
 8006018:	f7fa f8fa 	bl	8000210 <__aeabi_uldivmod>
 800601c:	4603      	mov	r3, r0
 800601e:	460c      	mov	r4, r1
 8006020:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006022:	4b4d      	ldr	r3, [pc, #308]	; (8006158 <HAL_RCC_GetSysClockFreq+0x298>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	0c1b      	lsrs	r3, r3, #16
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	3301      	adds	r3, #1
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	fbb2 f3f3 	udiv	r3, r2, r3
 800603a:	613b      	str	r3, [r7, #16]
      break;
 800603c:	e087      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800603e:	4b46      	ldr	r3, [pc, #280]	; (8006158 <HAL_RCC_GetSysClockFreq+0x298>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006046:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006048:	4b43      	ldr	r3, [pc, #268]	; (8006158 <HAL_RCC_GetSysClockFreq+0x298>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d023      	beq.n	800609c <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006054:	4b40      	ldr	r3, [pc, #256]	; (8006158 <HAL_RCC_GetSysClockFreq+0x298>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	099b      	lsrs	r3, r3, #6
 800605a:	f04f 0400 	mov.w	r4, #0
 800605e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	ea03 0501 	and.w	r5, r3, r1
 800606a:	ea04 0602 	and.w	r6, r4, r2
 800606e:	4a3c      	ldr	r2, [pc, #240]	; (8006160 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8006070:	fb02 f106 	mul.w	r1, r2, r6
 8006074:	2200      	movs	r2, #0
 8006076:	fb02 f205 	mul.w	r2, r2, r5
 800607a:	440a      	add	r2, r1
 800607c:	4938      	ldr	r1, [pc, #224]	; (8006160 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800607e:	fba5 0101 	umull	r0, r1, r5, r1
 8006082:	1853      	adds	r3, r2, r1
 8006084:	4619      	mov	r1, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f04f 0400 	mov.w	r4, #0
 800608c:	461a      	mov	r2, r3
 800608e:	4623      	mov	r3, r4
 8006090:	f7fa f8be 	bl	8000210 <__aeabi_uldivmod>
 8006094:	4603      	mov	r3, r0
 8006096:	460c      	mov	r4, r1
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	e049      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800609c:	4b2e      	ldr	r3, [pc, #184]	; (8006158 <HAL_RCC_GetSysClockFreq+0x298>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	099b      	lsrs	r3, r3, #6
 80060a2:	f04f 0400 	mov.w	r4, #0
 80060a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	ea03 0501 	and.w	r5, r3, r1
 80060b2:	ea04 0602 	and.w	r6, r4, r2
 80060b6:	4629      	mov	r1, r5
 80060b8:	4632      	mov	r2, r6
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	f04f 0400 	mov.w	r4, #0
 80060c2:	0154      	lsls	r4, r2, #5
 80060c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80060c8:	014b      	lsls	r3, r1, #5
 80060ca:	4619      	mov	r1, r3
 80060cc:	4622      	mov	r2, r4
 80060ce:	1b49      	subs	r1, r1, r5
 80060d0:	eb62 0206 	sbc.w	r2, r2, r6
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	f04f 0400 	mov.w	r4, #0
 80060dc:	0194      	lsls	r4, r2, #6
 80060de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80060e2:	018b      	lsls	r3, r1, #6
 80060e4:	1a5b      	subs	r3, r3, r1
 80060e6:	eb64 0402 	sbc.w	r4, r4, r2
 80060ea:	f04f 0100 	mov.w	r1, #0
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	00e2      	lsls	r2, r4, #3
 80060f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80060f8:	00d9      	lsls	r1, r3, #3
 80060fa:	460b      	mov	r3, r1
 80060fc:	4614      	mov	r4, r2
 80060fe:	195b      	adds	r3, r3, r5
 8006100:	eb44 0406 	adc.w	r4, r4, r6
 8006104:	f04f 0100 	mov.w	r1, #0
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	02a2      	lsls	r2, r4, #10
 800610e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006112:	0299      	lsls	r1, r3, #10
 8006114:	460b      	mov	r3, r1
 8006116:	4614      	mov	r4, r2
 8006118:	4618      	mov	r0, r3
 800611a:	4621      	mov	r1, r4
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f04f 0400 	mov.w	r4, #0
 8006122:	461a      	mov	r2, r3
 8006124:	4623      	mov	r3, r4
 8006126:	f7fa f873 	bl	8000210 <__aeabi_uldivmod>
 800612a:	4603      	mov	r3, r0
 800612c:	460c      	mov	r4, r1
 800612e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006130:	4b09      	ldr	r3, [pc, #36]	; (8006158 <HAL_RCC_GetSysClockFreq+0x298>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	0f1b      	lsrs	r3, r3, #28
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	613b      	str	r3, [r7, #16]
      break;
 8006146:	e002      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006148:	4b04      	ldr	r3, [pc, #16]	; (800615c <HAL_RCC_GetSysClockFreq+0x29c>)
 800614a:	613b      	str	r3, [r7, #16]
      break;
 800614c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800614e:	693b      	ldr	r3, [r7, #16]
}
 8006150:	4618      	mov	r0, r3
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006158:	40023800 	.word	0x40023800
 800615c:	00f42400 	.word	0x00f42400
 8006160:	017d7840 	.word	0x017d7840

08006164 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8083 	beq.w	8006284 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800617e:	4b95      	ldr	r3, [pc, #596]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 030c 	and.w	r3, r3, #12
 8006186:	2b04      	cmp	r3, #4
 8006188:	d019      	beq.n	80061be <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800618a:	4b92      	ldr	r3, [pc, #584]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006192:	2b08      	cmp	r3, #8
 8006194:	d106      	bne.n	80061a4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006196:	4b8f      	ldr	r3, [pc, #572]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800619e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061a2:	d00c      	beq.n	80061be <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061a4:	4b8b      	ldr	r3, [pc, #556]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80061ac:	2b0c      	cmp	r3, #12
 80061ae:	d112      	bne.n	80061d6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061b0:	4b88      	ldr	r3, [pc, #544]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061bc:	d10b      	bne.n	80061d6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061be:	4b85      	ldr	r3, [pc, #532]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d05b      	beq.n	8006282 <HAL_RCC_OscConfig+0x11e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d157      	bne.n	8006282 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e216      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061de:	d106      	bne.n	80061ee <HAL_RCC_OscConfig+0x8a>
 80061e0:	4b7c      	ldr	r3, [pc, #496]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a7b      	ldr	r2, [pc, #492]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	e01d      	b.n	800622a <HAL_RCC_OscConfig+0xc6>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061f6:	d10c      	bne.n	8006212 <HAL_RCC_OscConfig+0xae>
 80061f8:	4b76      	ldr	r3, [pc, #472]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a75      	ldr	r2, [pc, #468]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80061fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	4b73      	ldr	r3, [pc, #460]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a72      	ldr	r2, [pc, #456]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 800620a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	e00b      	b.n	800622a <HAL_RCC_OscConfig+0xc6>
 8006212:	4b70      	ldr	r3, [pc, #448]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a6f      	ldr	r2, [pc, #444]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	4b6d      	ldr	r3, [pc, #436]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a6c      	ldr	r2, [pc, #432]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006228:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d013      	beq.n	800625a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006232:	f7fb fda9 	bl	8001d88 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800623a:	f7fb fda5 	bl	8001d88 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b64      	cmp	r3, #100	; 0x64
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e1db      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800624c:	4b61      	ldr	r3, [pc, #388]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCC_OscConfig+0xd6>
 8006258:	e014      	b.n	8006284 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625a:	f7fb fd95 	bl	8001d88 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006262:	f7fb fd91 	bl	8001d88 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b64      	cmp	r3, #100	; 0x64
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e1c7      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006274:	4b57      	ldr	r3, [pc, #348]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f0      	bne.n	8006262 <HAL_RCC_OscConfig+0xfe>
 8006280:	e000      	b.n	8006284 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006282:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d06f      	beq.n	8006370 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006290:	4b50      	ldr	r3, [pc, #320]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 030c 	and.w	r3, r3, #12
 8006298:	2b00      	cmp	r3, #0
 800629a:	d017      	beq.n	80062cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800629c:	4b4d      	ldr	r3, [pc, #308]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d105      	bne.n	80062b4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80062a8:	4b4a      	ldr	r3, [pc, #296]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062b4:	4b47      	ldr	r3, [pc, #284]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80062bc:	2b0c      	cmp	r3, #12
 80062be:	d11c      	bne.n	80062fa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062c0:	4b44      	ldr	r3, [pc, #272]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d116      	bne.n	80062fa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062cc:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_RCC_OscConfig+0x180>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e18f      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e4:	4b3b      	ldr	r3, [pc, #236]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	4938      	ldr	r1, [pc, #224]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062f8:	e03a      	b.n	8006370 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d020      	beq.n	8006344 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006302:	4b35      	ldr	r3, [pc, #212]	; (80063d8 <HAL_RCC_OscConfig+0x274>)
 8006304:	2201      	movs	r2, #1
 8006306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006308:	f7fb fd3e 	bl	8001d88 <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006310:	f7fb fd3a 	bl	8001d88 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e170      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006322:	4b2c      	ldr	r3, [pc, #176]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632e:	4b29      	ldr	r3, [pc, #164]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4925      	ldr	r1, [pc, #148]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 800633e:	4313      	orrs	r3, r2
 8006340:	600b      	str	r3, [r1, #0]
 8006342:	e015      	b.n	8006370 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006344:	4b24      	ldr	r3, [pc, #144]	; (80063d8 <HAL_RCC_OscConfig+0x274>)
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634a:	f7fb fd1d 	bl	8001d88 <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006352:	f7fb fd19 	bl	8001d88 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e14f      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006364:	4b1b      	ldr	r3, [pc, #108]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f0      	bne.n	8006352 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	2b00      	cmp	r3, #0
 800637a:	d037      	beq.n	80063ec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d016      	beq.n	80063b2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006384:	4b15      	ldr	r3, [pc, #84]	; (80063dc <HAL_RCC_OscConfig+0x278>)
 8006386:	2201      	movs	r2, #1
 8006388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638a:	f7fb fcfd 	bl	8001d88 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006392:	f7fb fcf9 	bl	8001d88 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e12f      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <HAL_RCC_OscConfig+0x270>)
 80063a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0f0      	beq.n	8006392 <HAL_RCC_OscConfig+0x22e>
 80063b0:	e01c      	b.n	80063ec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <HAL_RCC_OscConfig+0x278>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b8:	f7fb fce6 	bl	8001d88 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063be:	e00f      	b.n	80063e0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063c0:	f7fb fce2 	bl	8001d88 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d908      	bls.n	80063e0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e118      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
 80063d2:	bf00      	nop
 80063d4:	40023800 	.word	0x40023800
 80063d8:	42470000 	.word	0x42470000
 80063dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063e0:	4b8a      	ldr	r3, [pc, #552]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 80063e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e9      	bne.n	80063c0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8097 	beq.w	8006528 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063fe:	4b83      	ldr	r3, [pc, #524]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10f      	bne.n	800642a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	4b7f      	ldr	r3, [pc, #508]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	4a7e      	ldr	r2, [pc, #504]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006418:	6413      	str	r3, [r2, #64]	; 0x40
 800641a:	4b7c      	ldr	r3, [pc, #496]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006426:	2301      	movs	r3, #1
 8006428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800642a:	4b79      	ldr	r3, [pc, #484]	; (8006610 <HAL_RCC_OscConfig+0x4ac>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006432:	2b00      	cmp	r3, #0
 8006434:	d118      	bne.n	8006468 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006436:	4b76      	ldr	r3, [pc, #472]	; (8006610 <HAL_RCC_OscConfig+0x4ac>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a75      	ldr	r2, [pc, #468]	; (8006610 <HAL_RCC_OscConfig+0x4ac>)
 800643c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006442:	f7fb fca1 	bl	8001d88 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800644a:	f7fb fc9d 	bl	8001d88 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e0d3      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645c:	4b6c      	ldr	r3, [pc, #432]	; (8006610 <HAL_RCC_OscConfig+0x4ac>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <HAL_RCC_OscConfig+0x31a>
 8006470:	4b66      	ldr	r3, [pc, #408]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006474:	4a65      	ldr	r2, [pc, #404]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	6713      	str	r3, [r2, #112]	; 0x70
 800647c:	e01c      	b.n	80064b8 <HAL_RCC_OscConfig+0x354>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2b05      	cmp	r3, #5
 8006484:	d10c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x33c>
 8006486:	4b61      	ldr	r3, [pc, #388]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	4a60      	ldr	r2, [pc, #384]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 800648c:	f043 0304 	orr.w	r3, r3, #4
 8006490:	6713      	str	r3, [r2, #112]	; 0x70
 8006492:	4b5e      	ldr	r3, [pc, #376]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006496:	4a5d      	ldr	r2, [pc, #372]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	6713      	str	r3, [r2, #112]	; 0x70
 800649e:	e00b      	b.n	80064b8 <HAL_RCC_OscConfig+0x354>
 80064a0:	4b5a      	ldr	r3, [pc, #360]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a4:	4a59      	ldr	r2, [pc, #356]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	6713      	str	r3, [r2, #112]	; 0x70
 80064ac:	4b57      	ldr	r3, [pc, #348]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 80064ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b0:	4a56      	ldr	r2, [pc, #344]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 80064b2:	f023 0304 	bic.w	r3, r3, #4
 80064b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d015      	beq.n	80064ec <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c0:	f7fb fc62 	bl	8001d88 <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064c6:	e00a      	b.n	80064de <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064c8:	f7fb fc5e 	bl	8001d88 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e092      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064de:	4b4b      	ldr	r3, [pc, #300]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0ee      	beq.n	80064c8 <HAL_RCC_OscConfig+0x364>
 80064ea:	e014      	b.n	8006516 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ec:	f7fb fc4c 	bl	8001d88 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064f2:	e00a      	b.n	800650a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064f4:	f7fb fc48 	bl	8001d88 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e07c      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800650a:	4b40      	ldr	r3, [pc, #256]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1ee      	bne.n	80064f4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d105      	bne.n	8006528 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800651c:	4b3b      	ldr	r3, [pc, #236]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 800651e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006520:	4a3a      	ldr	r2, [pc, #232]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d068      	beq.n	8006602 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006530:	4b36      	ldr	r3, [pc, #216]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 030c 	and.w	r3, r3, #12
 8006538:	2b08      	cmp	r3, #8
 800653a:	d060      	beq.n	80065fe <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d145      	bne.n	80065d0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006544:	4b33      	ldr	r3, [pc, #204]	; (8006614 <HAL_RCC_OscConfig+0x4b0>)
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654a:	f7fb fc1d 	bl	8001d88 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006552:	f7fb fc19 	bl	8001d88 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e04f      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006564:	4b29      	ldr	r3, [pc, #164]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1f0      	bne.n	8006552 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	431a      	orrs	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	019b      	lsls	r3, r3, #6
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	085b      	lsrs	r3, r3, #1
 8006588:	3b01      	subs	r3, #1
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	061b      	lsls	r3, r3, #24
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	071b      	lsls	r3, r3, #28
 800659c:	491b      	ldr	r1, [pc, #108]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065a2:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <HAL_RCC_OscConfig+0x4b0>)
 80065a4:	2201      	movs	r2, #1
 80065a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a8:	f7fb fbee 	bl	8001d88 <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b0:	f7fb fbea 	bl	8001d88 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e020      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065c2:	4b12      	ldr	r3, [pc, #72]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0x44c>
 80065ce:	e018      	b.n	8006602 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d0:	4b10      	ldr	r3, [pc, #64]	; (8006614 <HAL_RCC_OscConfig+0x4b0>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d6:	f7fb fbd7 	bl	8001d88 <HAL_GetTick>
 80065da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065dc:	e008      	b.n	80065f0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065de:	f7fb fbd3 	bl	8001d88 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e009      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f0:	4b06      	ldr	r3, [pc, #24]	; (800660c <HAL_RCC_OscConfig+0x4a8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f0      	bne.n	80065de <HAL_RCC_OscConfig+0x47a>
 80065fc:	e001      	b.n	8006602 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40023800 	.word	0x40023800
 8006610:	40007000 	.word	0x40007000
 8006614:	42470060 	.word	0x42470060

08006618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e056      	b.n	80066d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d106      	bne.n	800664a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7fa fe85 	bl	8001354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006660:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	ea42 0103 	orr.w	r1, r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	0c1b      	lsrs	r3, r3, #16
 80066a8:	f003 0104 	and.w	r1, r3, #4
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	4613      	mov	r3, r2
 80066ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d101      	bne.n	8006702 <HAL_SPI_Transmit+0x22>
 80066fe:	2302      	movs	r3, #2
 8006700:	e11e      	b.n	8006940 <HAL_SPI_Transmit+0x260>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800670a:	f7fb fb3d 	bl	8001d88 <HAL_GetTick>
 800670e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006710:	88fb      	ldrh	r3, [r7, #6]
 8006712:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b01      	cmp	r3, #1
 800671e:	d002      	beq.n	8006726 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006720:	2302      	movs	r3, #2
 8006722:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006724:	e103      	b.n	800692e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <HAL_SPI_Transmit+0x52>
 800672c:	88fb      	ldrh	r3, [r7, #6]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006736:	e0fa      	b.n	800692e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2203      	movs	r2, #3
 800673c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	88fa      	ldrh	r2, [r7, #6]
 8006750:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677e:	d107      	bne.n	8006790 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800678e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679a:	2b40      	cmp	r3, #64	; 0x40
 800679c:	d007      	beq.n	80067ae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b6:	d14b      	bne.n	8006850 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <HAL_SPI_Transmit+0xe6>
 80067c0:	8afb      	ldrh	r3, [r7, #22]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d13e      	bne.n	8006844 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	881a      	ldrh	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	1c9a      	adds	r2, r3, #2
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067ea:	e02b      	b.n	8006844 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d112      	bne.n	8006820 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	881a      	ldrh	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	1c9a      	adds	r2, r3, #2
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	86da      	strh	r2, [r3, #54]	; 0x36
 800681e:	e011      	b.n	8006844 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006820:	f7fb fab2 	bl	8001d88 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d803      	bhi.n	8006838 <HAL_SPI_Transmit+0x158>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006836:	d102      	bne.n	800683e <HAL_SPI_Transmit+0x15e>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006842:	e074      	b.n	800692e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1ce      	bne.n	80067ec <HAL_SPI_Transmit+0x10c>
 800684e:	e04c      	b.n	80068ea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <HAL_SPI_Transmit+0x17e>
 8006858:	8afb      	ldrh	r3, [r7, #22]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d140      	bne.n	80068e0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006884:	e02c      	b.n	80068e0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b02      	cmp	r3, #2
 8006892:	d113      	bne.n	80068bc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	330c      	adds	r3, #12
 800689e:	7812      	ldrb	r2, [r2, #0]
 80068a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80068ba:	e011      	b.n	80068e0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068bc:	f7fb fa64 	bl	8001d88 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d803      	bhi.n	80068d4 <HAL_SPI_Transmit+0x1f4>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	d102      	bne.n	80068da <HAL_SPI_Transmit+0x1fa>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068de:	e026      	b.n	800692e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1cd      	bne.n	8006886 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 fafa 	bl	8006ee8 <SPI_EndRxTxTransaction>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006908:	2300      	movs	r3, #0
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	613b      	str	r3, [r7, #16]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	77fb      	strb	r3, [r7, #31]
 800692a:	e000      	b.n	800692e <HAL_SPI_Transmit+0x24e>
  }

error:
 800692c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800693e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_SPI_Transmit_DMA+0x20>
 8006964:	2302      	movs	r3, #2
 8006966:	e093      	b.n	8006a90 <HAL_SPI_Transmit_DMA+0x148>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d002      	beq.n	8006982 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800697c:	2302      	movs	r3, #2
 800697e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006980:	e081      	b.n	8006a86 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <HAL_SPI_Transmit_DMA+0x46>
 8006988:	88fb      	ldrh	r3, [r7, #6]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006992:	e078      	b.n	8006a86 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2203      	movs	r2, #3
 8006998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	88fa      	ldrh	r2, [r7, #6]
 80069ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	88fa      	ldrh	r2, [r7, #6]
 80069b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069da:	d107      	bne.n	80069ec <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f0:	4a29      	ldr	r2, [pc, #164]	; (8006a98 <HAL_SPI_Transmit_DMA+0x150>)
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f8:	4a28      	ldr	r2, [pc, #160]	; (8006a9c <HAL_SPI_Transmit_DMA+0x154>)
 80069fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a00:	4a27      	ldr	r2, [pc, #156]	; (8006aa0 <HAL_SPI_Transmit_DMA+0x158>)
 8006a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a08:	2200      	movs	r2, #0
 8006a0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	4619      	mov	r1, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	330c      	adds	r3, #12
 8006a1c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006a24:	f7fc f8bc 	bl	8002ba0 <HAL_DMA_Start_IT>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a32:	f043 0210 	orr.w	r2, r3, #16
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006a46:	e01e      	b.n	8006a86 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a52:	2b40      	cmp	r3, #64	; 0x40
 8006a54:	d007      	beq.n	8006a66 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a64:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0220 	orr.w	r2, r2, #32
 8006a74:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0202 	orr.w	r2, r2, #2
 8006a84:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	08006d91 	.word	0x08006d91
 8006a9c:	08006ce9 	.word	0x08006ce9
 8006aa0:	08006dad 	.word	0x08006dad

08006aa4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	099b      	lsrs	r3, r3, #6
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10f      	bne.n	8006ae8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	099b      	lsrs	r3, r3, #6
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	4798      	blx	r3
    return;
 8006ae6:	e0d8      	b.n	8006c9a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	085b      	lsrs	r3, r3, #1
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <HAL_SPI_IRQHandler+0x66>
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	09db      	lsrs	r3, r3, #7
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d004      	beq.n	8006b0a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
    return;
 8006b08:	e0c7      	b.n	8006c9a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10c      	bne.n	8006b30 <HAL_SPI_IRQHandler+0x8c>
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	099b      	lsrs	r3, r3, #6
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d106      	bne.n	8006b30 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	0a1b      	lsrs	r3, r3, #8
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 80b5 	beq.w	8006c9a <HAL_SPI_IRQHandler+0x1f6>
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80ae 	beq.w	8006c9a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	099b      	lsrs	r3, r3, #6
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d023      	beq.n	8006b92 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d011      	beq.n	8006b7a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	f043 0204 	orr.w	r2, r3, #4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	e00b      	b.n	8006b92 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	693b      	ldr	r3, [r7, #16]
        return;
 8006b90:	e083      	b.n	8006c9a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d014      	beq.n	8006bc8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba2:	f043 0201 	orr.w	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	0a1b      	lsrs	r3, r3, #8
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00c      	beq.n	8006bee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd8:	f043 0208 	orr.w	r2, r3, #8
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006be0:	2300      	movs	r3, #0
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	60bb      	str	r3, [r7, #8]
 8006bec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d050      	beq.n	8006c98 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c04:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <HAL_SPI_IRQHandler+0x17e>
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d034      	beq.n	8006c8c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0203 	bic.w	r2, r2, #3
 8006c30:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d011      	beq.n	8006c5e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3e:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <HAL_SPI_IRQHandler+0x1fc>)
 8006c40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fc f802 	bl	8002c50 <HAL_DMA_Abort_IT>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d016      	beq.n	8006c94 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	4a0d      	ldr	r2, [pc, #52]	; (8006ca0 <HAL_SPI_IRQHandler+0x1fc>)
 8006c6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fb ffec 	bl	8002c50 <HAL_DMA_Abort_IT>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006c8a:	e003      	b.n	8006c94 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f813 	bl	8006cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c92:	e000      	b.n	8006c96 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006c94:	bf00      	nop
    return;
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
  }
}
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	08006ded 	.word	0x08006ded

08006ca4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cda:	b2db      	uxtb	r3, r3
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cf6:	f7fb f847 	bl	8001d88 <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0a:	d03b      	beq.n	8006d84 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0220 	bic.w	r2, r2, #32
 8006d1a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0202 	bic.w	r2, r2, #2
 8006d2a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	2164      	movs	r1, #100	; 0x64
 8006d30:	6978      	ldr	r0, [r7, #20]
 8006d32:	f000 f8d9 	bl	8006ee8 <SPI_EndRxTxTransaction>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d40:	f043 0220 	orr.w	r2, r3, #32
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006d7c:	6978      	ldr	r0, [r7, #20]
 8006d7e:	f7ff ff9b 	bl	8006cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006d82:	e002      	b.n	8006d8a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006d84:	6978      	ldr	r0, [r7, #20]
 8006d86:	f7fa f92b 	bl	8000fe0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f7ff ff80 	bl	8006ca4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0203 	bic.w	r2, r2, #3
 8006dc8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	f043 0210 	orr.w	r2, r3, #16
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f7ff ff6a 	bl	8006cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006de4:	bf00      	nop
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff ff56 	bl	8006cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	4613      	mov	r3, r2
 8006e22:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e24:	e04c      	b.n	8006ec0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2c:	d048      	beq.n	8006ec0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006e2e:	f7fa ffab 	bl	8001d88 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d902      	bls.n	8006e44 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d13d      	bne.n	8006ec0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e5c:	d111      	bne.n	8006e82 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e66:	d004      	beq.n	8006e72 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e70:	d107      	bne.n	8006e82 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e8a:	d10f      	bne.n	8006eac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006eaa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e00f      	b.n	8006ee0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	bf0c      	ite	eq
 8006ed0:	2301      	moveq	r3, #1
 8006ed2:	2300      	movne	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d1a3      	bne.n	8006e26 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ef4:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <SPI_EndRxTxTransaction+0x7c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1b      	ldr	r2, [pc, #108]	; (8006f68 <SPI_EndRxTxTransaction+0x80>)
 8006efa:	fba2 2303 	umull	r2, r3, r2, r3
 8006efe:	0d5b      	lsrs	r3, r3, #21
 8006f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f04:	fb02 f303 	mul.w	r3, r2, r3
 8006f08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f12:	d112      	bne.n	8006f3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2180      	movs	r1, #128	; 0x80
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f7ff ff78 	bl	8006e14 <SPI_WaitFlagStateUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d016      	beq.n	8006f58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2e:	f043 0220 	orr.w	r2, r3, #32
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e00f      	b.n	8006f5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f50:	2b80      	cmp	r3, #128	; 0x80
 8006f52:	d0f2      	beq.n	8006f3a <SPI_EndRxTxTransaction+0x52>
 8006f54:	e000      	b.n	8006f58 <SPI_EndRxTxTransaction+0x70>
        break;
 8006f56:	bf00      	nop
  }

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20000040 	.word	0x20000040
 8006f68:	165e9f81 	.word	0x165e9f81

08006f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e01d      	b.n	8006fba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d106      	bne.n	8006f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f815 	bl	8006fc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4610      	mov	r0, r2
 8006fac:	f000 f968 	bl	8007280 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 0201 	orr.w	r2, r2, #1
 8006fec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f003 0307 	and.w	r3, r3, #7
 8006ff8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b06      	cmp	r3, #6
 8006ffe:	d007      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0201 	orr.w	r2, r2, #1
 800700e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b02      	cmp	r3, #2
 8007032:	d122      	bne.n	800707a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b02      	cmp	r3, #2
 8007040:	d11b      	bne.n	800707a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f06f 0202 	mvn.w	r2, #2
 800704a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f8ee 	bl	8007242 <HAL_TIM_IC_CaptureCallback>
 8007066:	e005      	b.n	8007074 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f8e0 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f8f1 	bl	8007256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b04      	cmp	r3, #4
 8007086:	d122      	bne.n	80070ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f003 0304 	and.w	r3, r3, #4
 8007092:	2b04      	cmp	r3, #4
 8007094:	d11b      	bne.n	80070ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f06f 0204 	mvn.w	r2, #4
 800709e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f8c4 	bl	8007242 <HAL_TIM_IC_CaptureCallback>
 80070ba:	e005      	b.n	80070c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f8b6 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8c7 	bl	8007256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d122      	bne.n	8007122 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b08      	cmp	r3, #8
 80070e8:	d11b      	bne.n	8007122 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f06f 0208 	mvn.w	r2, #8
 80070f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2204      	movs	r2, #4
 80070f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f89a 	bl	8007242 <HAL_TIM_IC_CaptureCallback>
 800710e:	e005      	b.n	800711c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f88c 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f89d 	bl	8007256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b10      	cmp	r3, #16
 800712e:	d122      	bne.n	8007176 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0310 	and.w	r3, r3, #16
 800713a:	2b10      	cmp	r3, #16
 800713c:	d11b      	bne.n	8007176 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f06f 0210 	mvn.w	r2, #16
 8007146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2208      	movs	r2, #8
 800714c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f870 	bl	8007242 <HAL_TIM_IC_CaptureCallback>
 8007162:	e005      	b.n	8007170 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f862 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f873 	bl	8007256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d10e      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b01      	cmp	r3, #1
 8007190:	d107      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f06f 0201 	mvn.w	r2, #1
 800719a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7f9 ffbb 	bl	8001118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ac:	2b80      	cmp	r3, #128	; 0x80
 80071ae:	d10e      	bne.n	80071ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ba:	2b80      	cmp	r3, #128	; 0x80
 80071bc:	d107      	bne.n	80071ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f903 	bl	80073d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	d10e      	bne.n	80071fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e6:	2b40      	cmp	r3, #64	; 0x40
 80071e8:	d107      	bne.n	80071fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f838 	bl	800726a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b20      	cmp	r3, #32
 8007206:	d10e      	bne.n	8007226 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b20      	cmp	r3, #32
 8007214:	d107      	bne.n	8007226 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f06f 0220 	mvn.w	r2, #32
 800721e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f8cd 	bl	80073c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
	...

08007280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a40      	ldr	r2, [pc, #256]	; (8007394 <TIM_Base_SetConfig+0x114>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d013      	beq.n	80072c0 <TIM_Base_SetConfig+0x40>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729e:	d00f      	beq.n	80072c0 <TIM_Base_SetConfig+0x40>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a3d      	ldr	r2, [pc, #244]	; (8007398 <TIM_Base_SetConfig+0x118>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00b      	beq.n	80072c0 <TIM_Base_SetConfig+0x40>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a3c      	ldr	r2, [pc, #240]	; (800739c <TIM_Base_SetConfig+0x11c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d007      	beq.n	80072c0 <TIM_Base_SetConfig+0x40>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a3b      	ldr	r2, [pc, #236]	; (80073a0 <TIM_Base_SetConfig+0x120>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_Base_SetConfig+0x40>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a3a      	ldr	r2, [pc, #232]	; (80073a4 <TIM_Base_SetConfig+0x124>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d108      	bne.n	80072d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a2f      	ldr	r2, [pc, #188]	; (8007394 <TIM_Base_SetConfig+0x114>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d02b      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e0:	d027      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a2c      	ldr	r2, [pc, #176]	; (8007398 <TIM_Base_SetConfig+0x118>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d023      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a2b      	ldr	r2, [pc, #172]	; (800739c <TIM_Base_SetConfig+0x11c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d01f      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a2a      	ldr	r2, [pc, #168]	; (80073a0 <TIM_Base_SetConfig+0x120>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d01b      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a29      	ldr	r2, [pc, #164]	; (80073a4 <TIM_Base_SetConfig+0x124>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d017      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a28      	ldr	r2, [pc, #160]	; (80073a8 <TIM_Base_SetConfig+0x128>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a27      	ldr	r2, [pc, #156]	; (80073ac <TIM_Base_SetConfig+0x12c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00f      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a26      	ldr	r2, [pc, #152]	; (80073b0 <TIM_Base_SetConfig+0x130>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00b      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a25      	ldr	r2, [pc, #148]	; (80073b4 <TIM_Base_SetConfig+0x134>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d007      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a24      	ldr	r2, [pc, #144]	; (80073b8 <TIM_Base_SetConfig+0x138>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d003      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a23      	ldr	r2, [pc, #140]	; (80073bc <TIM_Base_SetConfig+0x13c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d108      	bne.n	8007344 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <TIM_Base_SetConfig+0x114>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <TIM_Base_SetConfig+0xf8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a0c      	ldr	r2, [pc, #48]	; (80073a4 <TIM_Base_SetConfig+0x124>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d103      	bne.n	8007380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	615a      	str	r2, [r3, #20]
}
 8007386:	bf00      	nop
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40010000 	.word	0x40010000
 8007398:	40000400 	.word	0x40000400
 800739c:	40000800 	.word	0x40000800
 80073a0:	40000c00 	.word	0x40000c00
 80073a4:	40010400 	.word	0x40010400
 80073a8:	40014000 	.word	0x40014000
 80073ac:	40014400 	.word	0x40014400
 80073b0:	40014800 	.word	0x40014800
 80073b4:	40001800 	.word	0x40001800
 80073b8:	40001c00 	.word	0x40001c00
 80073bc:	40002000 	.word	0x40002000

080073c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e03f      	b.n	800747a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d106      	bne.n	8007414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fa f822 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2224      	movs	r2, #36	; 0x24
 8007418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800742a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa69 	bl	8007904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691a      	ldr	r2, [r3, #16]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	695a      	ldr	r2, [r3, #20]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10d      	bne.n	80074d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d008      	beq.n	80074d6 <HAL_UART_IRQHandler+0x52>
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f996 	bl	8007800 <UART_Receive_IT>
      return;
 80074d4:	e0d1      	b.n	800767a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 80b0 	beq.w	800763e <HAL_UART_IRQHandler+0x1ba>
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d105      	bne.n	80074f4 <HAL_UART_IRQHandler+0x70>
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80a5 	beq.w	800763e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <HAL_UART_IRQHandler+0x90>
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007504:	2b00      	cmp	r3, #0
 8007506:	d005      	beq.n	8007514 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750c:	f043 0201 	orr.w	r2, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <HAL_UART_IRQHandler+0xb0>
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752c:	f043 0202 	orr.w	r2, r3, #2
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_UART_IRQHandler+0xd0>
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754c:	f043 0204 	orr.w	r2, r3, #4
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00f      	beq.n	800757e <HAL_UART_IRQHandler+0xfa>
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d104      	bne.n	8007572 <HAL_UART_IRQHandler+0xee>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007576:	f043 0208 	orr.w	r2, r3, #8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007582:	2b00      	cmp	r3, #0
 8007584:	d078      	beq.n	8007678 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	f003 0320 	and.w	r3, r3, #32
 800758c:	2b00      	cmp	r3, #0
 800758e:	d007      	beq.n	80075a0 <HAL_UART_IRQHandler+0x11c>
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f930 	bl	8007800 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b40      	cmp	r3, #64	; 0x40
 80075ac:	bf0c      	ite	eq
 80075ae:	2301      	moveq	r3, #1
 80075b0:	2300      	movne	r3, #0
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ba:	f003 0308 	and.w	r3, r3, #8
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d102      	bne.n	80075c8 <HAL_UART_IRQHandler+0x144>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d031      	beq.n	800762c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f879 	bl	80076c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b40      	cmp	r3, #64	; 0x40
 80075da:	d123      	bne.n	8007624 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695a      	ldr	r2, [r3, #20]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d013      	beq.n	800761c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	4a21      	ldr	r2, [pc, #132]	; (8007680 <HAL_UART_IRQHandler+0x1fc>)
 80075fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007600:	4618      	mov	r0, r3
 8007602:	f7fb fb25 	bl	8002c50 <HAL_DMA_Abort_IT>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d016      	beq.n	800763a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007616:	4610      	mov	r0, r2
 8007618:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761a:	e00e      	b.n	800763a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f845 	bl	80076ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007622:	e00a      	b.n	800763a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f841 	bl	80076ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762a:	e006      	b.n	800763a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f83d 	bl	80076ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007638:	e01e      	b.n	8007678 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763a:	bf00      	nop
    return;
 800763c:	e01c      	b.n	8007678 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007644:	2b00      	cmp	r3, #0
 8007646:	d008      	beq.n	800765a <HAL_UART_IRQHandler+0x1d6>
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f866 	bl	8007724 <UART_Transmit_IT>
    return;
 8007658:	e00f      	b.n	800767a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <HAL_UART_IRQHandler+0x1f6>
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f8ae 	bl	80077d0 <UART_EndTransmit_IT>
    return;
 8007674:	bf00      	nop
 8007676:	e000      	b.n	800767a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007678:	bf00      	nop
  }
}
 800767a:	3720      	adds	r7, #32
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	080076fd 	.word	0x080076fd

08007684 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695a      	ldr	r2, [r3, #20]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0201 	bic.w	r2, r2, #1
 80076e6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7ff ffc8 	bl	80076ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b21      	cmp	r3, #33	; 0x21
 8007736:	d144      	bne.n	80077c2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007740:	d11a      	bne.n	8007778 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007756:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	1c9a      	adds	r2, r3, #2
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	621a      	str	r2, [r3, #32]
 800776a:	e00e      	b.n	800778a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	621a      	str	r2, [r3, #32]
 8007776:	e008      	b.n	800778a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	1c59      	adds	r1, r3, #1
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6211      	str	r1, [r2, #32]
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29b      	uxth	r3, r3
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	4619      	mov	r1, r3
 8007798:	84d1      	strh	r1, [r2, #38]	; 0x26
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10f      	bne.n	80077be <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e000      	b.n	80077c4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077c2:	2302      	movs	r3, #2
  }
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff ff47 	bl	8007684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b22      	cmp	r3, #34	; 0x22
 8007812:	d171      	bne.n	80078f8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781c:	d123      	bne.n	8007866 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10e      	bne.n	800784a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	b29b      	uxth	r3, r3
 8007834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007838:	b29a      	uxth	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	1c9a      	adds	r2, r3, #2
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	629a      	str	r2, [r3, #40]	; 0x28
 8007848:	e029      	b.n	800789e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	b29b      	uxth	r3, r3
 8007852:	b2db      	uxtb	r3, r3
 8007854:	b29a      	uxth	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	629a      	str	r2, [r3, #40]	; 0x28
 8007864:	e01b      	b.n	800789e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6858      	ldr	r0, [r3, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	1c59      	adds	r1, r3, #1
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6291      	str	r1, [r2, #40]	; 0x28
 800787e:	b2c2      	uxtb	r2, r0
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	e00c      	b.n	800789e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	b2da      	uxtb	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	1c58      	adds	r0, r3, #1
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	6288      	str	r0, [r1, #40]	; 0x28
 8007896:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	4619      	mov	r1, r3
 80078ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d120      	bne.n	80078f4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0220 	bic.w	r2, r2, #32
 80078c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695a      	ldr	r2, [r3, #20]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0201 	bic.w	r2, r2, #1
 80078e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff fed4 	bl	8007698 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	e002      	b.n	80078fa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007908:	b085      	sub	sp, #20
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68da      	ldr	r2, [r3, #12]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007946:	f023 030c 	bic.w	r3, r3, #12
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	68f9      	ldr	r1, [r7, #12]
 8007950:	430b      	orrs	r3, r1
 8007952:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007972:	f040 818b 	bne.w	8007c8c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4ac1      	ldr	r2, [pc, #772]	; (8007c80 <UART_SetConfig+0x37c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d005      	beq.n	800798c <UART_SetConfig+0x88>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4abf      	ldr	r2, [pc, #764]	; (8007c84 <UART_SetConfig+0x380>)
 8007986:	4293      	cmp	r3, r2
 8007988:	f040 80bd 	bne.w	8007b06 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800798c:	f7fe fa52 	bl	8005e34 <HAL_RCC_GetPCLK2Freq>
 8007990:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	461d      	mov	r5, r3
 8007996:	f04f 0600 	mov.w	r6, #0
 800799a:	46a8      	mov	r8, r5
 800799c:	46b1      	mov	r9, r6
 800799e:	eb18 0308 	adds.w	r3, r8, r8
 80079a2:	eb49 0409 	adc.w	r4, r9, r9
 80079a6:	4698      	mov	r8, r3
 80079a8:	46a1      	mov	r9, r4
 80079aa:	eb18 0805 	adds.w	r8, r8, r5
 80079ae:	eb49 0906 	adc.w	r9, r9, r6
 80079b2:	f04f 0100 	mov.w	r1, #0
 80079b6:	f04f 0200 	mov.w	r2, #0
 80079ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80079be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80079c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80079c6:	4688      	mov	r8, r1
 80079c8:	4691      	mov	r9, r2
 80079ca:	eb18 0005 	adds.w	r0, r8, r5
 80079ce:	eb49 0106 	adc.w	r1, r9, r6
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	461d      	mov	r5, r3
 80079d8:	f04f 0600 	mov.w	r6, #0
 80079dc:	196b      	adds	r3, r5, r5
 80079de:	eb46 0406 	adc.w	r4, r6, r6
 80079e2:	461a      	mov	r2, r3
 80079e4:	4623      	mov	r3, r4
 80079e6:	f7f8 fc13 	bl	8000210 <__aeabi_uldivmod>
 80079ea:	4603      	mov	r3, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	461a      	mov	r2, r3
 80079f0:	4ba5      	ldr	r3, [pc, #660]	; (8007c88 <UART_SetConfig+0x384>)
 80079f2:	fba3 2302 	umull	r2, r3, r3, r2
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	461d      	mov	r5, r3
 8007a00:	f04f 0600 	mov.w	r6, #0
 8007a04:	46a9      	mov	r9, r5
 8007a06:	46b2      	mov	sl, r6
 8007a08:	eb19 0309 	adds.w	r3, r9, r9
 8007a0c:	eb4a 040a 	adc.w	r4, sl, sl
 8007a10:	4699      	mov	r9, r3
 8007a12:	46a2      	mov	sl, r4
 8007a14:	eb19 0905 	adds.w	r9, r9, r5
 8007a18:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a1c:	f04f 0100 	mov.w	r1, #0
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a30:	4689      	mov	r9, r1
 8007a32:	4692      	mov	sl, r2
 8007a34:	eb19 0005 	adds.w	r0, r9, r5
 8007a38:	eb4a 0106 	adc.w	r1, sl, r6
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	461d      	mov	r5, r3
 8007a42:	f04f 0600 	mov.w	r6, #0
 8007a46:	196b      	adds	r3, r5, r5
 8007a48:	eb46 0406 	adc.w	r4, r6, r6
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	4623      	mov	r3, r4
 8007a50:	f7f8 fbde 	bl	8000210 <__aeabi_uldivmod>
 8007a54:	4603      	mov	r3, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4b8b      	ldr	r3, [pc, #556]	; (8007c88 <UART_SetConfig+0x384>)
 8007a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	2164      	movs	r1, #100	; 0x64
 8007a64:	fb01 f303 	mul.w	r3, r1, r3
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	3332      	adds	r3, #50	; 0x32
 8007a6e:	4a86      	ldr	r2, [pc, #536]	; (8007c88 <UART_SetConfig+0x384>)
 8007a70:	fba2 2303 	umull	r2, r3, r2, r3
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a7c:	4498      	add	r8, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	461d      	mov	r5, r3
 8007a82:	f04f 0600 	mov.w	r6, #0
 8007a86:	46a9      	mov	r9, r5
 8007a88:	46b2      	mov	sl, r6
 8007a8a:	eb19 0309 	adds.w	r3, r9, r9
 8007a8e:	eb4a 040a 	adc.w	r4, sl, sl
 8007a92:	4699      	mov	r9, r3
 8007a94:	46a2      	mov	sl, r4
 8007a96:	eb19 0905 	adds.w	r9, r9, r5
 8007a9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a9e:	f04f 0100 	mov.w	r1, #0
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007aaa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007aae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ab2:	4689      	mov	r9, r1
 8007ab4:	4692      	mov	sl, r2
 8007ab6:	eb19 0005 	adds.w	r0, r9, r5
 8007aba:	eb4a 0106 	adc.w	r1, sl, r6
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	461d      	mov	r5, r3
 8007ac4:	f04f 0600 	mov.w	r6, #0
 8007ac8:	196b      	adds	r3, r5, r5
 8007aca:	eb46 0406 	adc.w	r4, r6, r6
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4623      	mov	r3, r4
 8007ad2:	f7f8 fb9d 	bl	8000210 <__aeabi_uldivmod>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	460c      	mov	r4, r1
 8007ada:	461a      	mov	r2, r3
 8007adc:	4b6a      	ldr	r3, [pc, #424]	; (8007c88 <UART_SetConfig+0x384>)
 8007ade:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	2164      	movs	r1, #100	; 0x64
 8007ae6:	fb01 f303 	mul.w	r3, r1, r3
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	3332      	adds	r3, #50	; 0x32
 8007af0:	4a65      	ldr	r2, [pc, #404]	; (8007c88 <UART_SetConfig+0x384>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	f003 0207 	and.w	r2, r3, #7
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4442      	add	r2, r8
 8007b02:	609a      	str	r2, [r3, #8]
 8007b04:	e26f      	b.n	8007fe6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b06:	f7fe f981 	bl	8005e0c <HAL_RCC_GetPCLK1Freq>
 8007b0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	461d      	mov	r5, r3
 8007b10:	f04f 0600 	mov.w	r6, #0
 8007b14:	46a8      	mov	r8, r5
 8007b16:	46b1      	mov	r9, r6
 8007b18:	eb18 0308 	adds.w	r3, r8, r8
 8007b1c:	eb49 0409 	adc.w	r4, r9, r9
 8007b20:	4698      	mov	r8, r3
 8007b22:	46a1      	mov	r9, r4
 8007b24:	eb18 0805 	adds.w	r8, r8, r5
 8007b28:	eb49 0906 	adc.w	r9, r9, r6
 8007b2c:	f04f 0100 	mov.w	r1, #0
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b40:	4688      	mov	r8, r1
 8007b42:	4691      	mov	r9, r2
 8007b44:	eb18 0005 	adds.w	r0, r8, r5
 8007b48:	eb49 0106 	adc.w	r1, r9, r6
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	461d      	mov	r5, r3
 8007b52:	f04f 0600 	mov.w	r6, #0
 8007b56:	196b      	adds	r3, r5, r5
 8007b58:	eb46 0406 	adc.w	r4, r6, r6
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	4623      	mov	r3, r4
 8007b60:	f7f8 fb56 	bl	8000210 <__aeabi_uldivmod>
 8007b64:	4603      	mov	r3, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4b47      	ldr	r3, [pc, #284]	; (8007c88 <UART_SetConfig+0x384>)
 8007b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	461d      	mov	r5, r3
 8007b7a:	f04f 0600 	mov.w	r6, #0
 8007b7e:	46a9      	mov	r9, r5
 8007b80:	46b2      	mov	sl, r6
 8007b82:	eb19 0309 	adds.w	r3, r9, r9
 8007b86:	eb4a 040a 	adc.w	r4, sl, sl
 8007b8a:	4699      	mov	r9, r3
 8007b8c:	46a2      	mov	sl, r4
 8007b8e:	eb19 0905 	adds.w	r9, r9, r5
 8007b92:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b96:	f04f 0100 	mov.w	r1, #0
 8007b9a:	f04f 0200 	mov.w	r2, #0
 8007b9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ba2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ba6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007baa:	4689      	mov	r9, r1
 8007bac:	4692      	mov	sl, r2
 8007bae:	eb19 0005 	adds.w	r0, r9, r5
 8007bb2:	eb4a 0106 	adc.w	r1, sl, r6
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	461d      	mov	r5, r3
 8007bbc:	f04f 0600 	mov.w	r6, #0
 8007bc0:	196b      	adds	r3, r5, r5
 8007bc2:	eb46 0406 	adc.w	r4, r6, r6
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	4623      	mov	r3, r4
 8007bca:	f7f8 fb21 	bl	8000210 <__aeabi_uldivmod>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	4b2c      	ldr	r3, [pc, #176]	; (8007c88 <UART_SetConfig+0x384>)
 8007bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8007bda:	095b      	lsrs	r3, r3, #5
 8007bdc:	2164      	movs	r1, #100	; 0x64
 8007bde:	fb01 f303 	mul.w	r3, r1, r3
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	3332      	adds	r3, #50	; 0x32
 8007be8:	4a27      	ldr	r2, [pc, #156]	; (8007c88 <UART_SetConfig+0x384>)
 8007bea:	fba2 2303 	umull	r2, r3, r2, r3
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bf6:	4498      	add	r8, r3
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	461d      	mov	r5, r3
 8007bfc:	f04f 0600 	mov.w	r6, #0
 8007c00:	46a9      	mov	r9, r5
 8007c02:	46b2      	mov	sl, r6
 8007c04:	eb19 0309 	adds.w	r3, r9, r9
 8007c08:	eb4a 040a 	adc.w	r4, sl, sl
 8007c0c:	4699      	mov	r9, r3
 8007c0e:	46a2      	mov	sl, r4
 8007c10:	eb19 0905 	adds.w	r9, r9, r5
 8007c14:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c18:	f04f 0100 	mov.w	r1, #0
 8007c1c:	f04f 0200 	mov.w	r2, #0
 8007c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c2c:	4689      	mov	r9, r1
 8007c2e:	4692      	mov	sl, r2
 8007c30:	eb19 0005 	adds.w	r0, r9, r5
 8007c34:	eb4a 0106 	adc.w	r1, sl, r6
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	461d      	mov	r5, r3
 8007c3e:	f04f 0600 	mov.w	r6, #0
 8007c42:	196b      	adds	r3, r5, r5
 8007c44:	eb46 0406 	adc.w	r4, r6, r6
 8007c48:	461a      	mov	r2, r3
 8007c4a:	4623      	mov	r3, r4
 8007c4c:	f7f8 fae0 	bl	8000210 <__aeabi_uldivmod>
 8007c50:	4603      	mov	r3, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	461a      	mov	r2, r3
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <UART_SetConfig+0x384>)
 8007c58:	fba3 1302 	umull	r1, r3, r3, r2
 8007c5c:	095b      	lsrs	r3, r3, #5
 8007c5e:	2164      	movs	r1, #100	; 0x64
 8007c60:	fb01 f303 	mul.w	r3, r1, r3
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	3332      	adds	r3, #50	; 0x32
 8007c6a:	4a07      	ldr	r2, [pc, #28]	; (8007c88 <UART_SetConfig+0x384>)
 8007c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c70:	095b      	lsrs	r3, r3, #5
 8007c72:	f003 0207 	and.w	r2, r3, #7
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4442      	add	r2, r8
 8007c7c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007c7e:	e1b2      	b.n	8007fe6 <UART_SetConfig+0x6e2>
 8007c80:	40011000 	.word	0x40011000
 8007c84:	40011400 	.word	0x40011400
 8007c88:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4ad7      	ldr	r2, [pc, #860]	; (8007ff0 <UART_SetConfig+0x6ec>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d005      	beq.n	8007ca2 <UART_SetConfig+0x39e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4ad6      	ldr	r2, [pc, #856]	; (8007ff4 <UART_SetConfig+0x6f0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	f040 80d1 	bne.w	8007e44 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ca2:	f7fe f8c7 	bl	8005e34 <HAL_RCC_GetPCLK2Freq>
 8007ca6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	469a      	mov	sl, r3
 8007cac:	f04f 0b00 	mov.w	fp, #0
 8007cb0:	46d0      	mov	r8, sl
 8007cb2:	46d9      	mov	r9, fp
 8007cb4:	eb18 0308 	adds.w	r3, r8, r8
 8007cb8:	eb49 0409 	adc.w	r4, r9, r9
 8007cbc:	4698      	mov	r8, r3
 8007cbe:	46a1      	mov	r9, r4
 8007cc0:	eb18 080a 	adds.w	r8, r8, sl
 8007cc4:	eb49 090b 	adc.w	r9, r9, fp
 8007cc8:	f04f 0100 	mov.w	r1, #0
 8007ccc:	f04f 0200 	mov.w	r2, #0
 8007cd0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007cd4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007cd8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007cdc:	4688      	mov	r8, r1
 8007cde:	4691      	mov	r9, r2
 8007ce0:	eb1a 0508 	adds.w	r5, sl, r8
 8007ce4:	eb4b 0609 	adc.w	r6, fp, r9
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	4619      	mov	r1, r3
 8007cee:	f04f 0200 	mov.w	r2, #0
 8007cf2:	f04f 0300 	mov.w	r3, #0
 8007cf6:	f04f 0400 	mov.w	r4, #0
 8007cfa:	0094      	lsls	r4, r2, #2
 8007cfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d00:	008b      	lsls	r3, r1, #2
 8007d02:	461a      	mov	r2, r3
 8007d04:	4623      	mov	r3, r4
 8007d06:	4628      	mov	r0, r5
 8007d08:	4631      	mov	r1, r6
 8007d0a:	f7f8 fa81 	bl	8000210 <__aeabi_uldivmod>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	460c      	mov	r4, r1
 8007d12:	461a      	mov	r2, r3
 8007d14:	4bb8      	ldr	r3, [pc, #736]	; (8007ff8 <UART_SetConfig+0x6f4>)
 8007d16:	fba3 2302 	umull	r2, r3, r3, r2
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	469b      	mov	fp, r3
 8007d24:	f04f 0c00 	mov.w	ip, #0
 8007d28:	46d9      	mov	r9, fp
 8007d2a:	46e2      	mov	sl, ip
 8007d2c:	eb19 0309 	adds.w	r3, r9, r9
 8007d30:	eb4a 040a 	adc.w	r4, sl, sl
 8007d34:	4699      	mov	r9, r3
 8007d36:	46a2      	mov	sl, r4
 8007d38:	eb19 090b 	adds.w	r9, r9, fp
 8007d3c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d40:	f04f 0100 	mov.w	r1, #0
 8007d44:	f04f 0200 	mov.w	r2, #0
 8007d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d54:	4689      	mov	r9, r1
 8007d56:	4692      	mov	sl, r2
 8007d58:	eb1b 0509 	adds.w	r5, fp, r9
 8007d5c:	eb4c 060a 	adc.w	r6, ip, sl
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	4619      	mov	r1, r3
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	f04f 0300 	mov.w	r3, #0
 8007d6e:	f04f 0400 	mov.w	r4, #0
 8007d72:	0094      	lsls	r4, r2, #2
 8007d74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d78:	008b      	lsls	r3, r1, #2
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	4623      	mov	r3, r4
 8007d7e:	4628      	mov	r0, r5
 8007d80:	4631      	mov	r1, r6
 8007d82:	f7f8 fa45 	bl	8000210 <__aeabi_uldivmod>
 8007d86:	4603      	mov	r3, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	4b9a      	ldr	r3, [pc, #616]	; (8007ff8 <UART_SetConfig+0x6f4>)
 8007d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	2164      	movs	r1, #100	; 0x64
 8007d96:	fb01 f303 	mul.w	r3, r1, r3
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	3332      	adds	r3, #50	; 0x32
 8007da0:	4a95      	ldr	r2, [pc, #596]	; (8007ff8 <UART_SetConfig+0x6f4>)
 8007da2:	fba2 2303 	umull	r2, r3, r2, r3
 8007da6:	095b      	lsrs	r3, r3, #5
 8007da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dac:	4498      	add	r8, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	469b      	mov	fp, r3
 8007db2:	f04f 0c00 	mov.w	ip, #0
 8007db6:	46d9      	mov	r9, fp
 8007db8:	46e2      	mov	sl, ip
 8007dba:	eb19 0309 	adds.w	r3, r9, r9
 8007dbe:	eb4a 040a 	adc.w	r4, sl, sl
 8007dc2:	4699      	mov	r9, r3
 8007dc4:	46a2      	mov	sl, r4
 8007dc6:	eb19 090b 	adds.w	r9, r9, fp
 8007dca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007dce:	f04f 0100 	mov.w	r1, #0
 8007dd2:	f04f 0200 	mov.w	r2, #0
 8007dd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007dde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007de2:	4689      	mov	r9, r1
 8007de4:	4692      	mov	sl, r2
 8007de6:	eb1b 0509 	adds.w	r5, fp, r9
 8007dea:	eb4c 060a 	adc.w	r6, ip, sl
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	4619      	mov	r1, r3
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	f04f 0400 	mov.w	r4, #0
 8007e00:	0094      	lsls	r4, r2, #2
 8007e02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e06:	008b      	lsls	r3, r1, #2
 8007e08:	461a      	mov	r2, r3
 8007e0a:	4623      	mov	r3, r4
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	4631      	mov	r1, r6
 8007e10:	f7f8 f9fe 	bl	8000210 <__aeabi_uldivmod>
 8007e14:	4603      	mov	r3, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4b77      	ldr	r3, [pc, #476]	; (8007ff8 <UART_SetConfig+0x6f4>)
 8007e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	2164      	movs	r1, #100	; 0x64
 8007e24:	fb01 f303 	mul.w	r3, r1, r3
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	3332      	adds	r3, #50	; 0x32
 8007e2e:	4a72      	ldr	r2, [pc, #456]	; (8007ff8 <UART_SetConfig+0x6f4>)
 8007e30:	fba2 2303 	umull	r2, r3, r2, r3
 8007e34:	095b      	lsrs	r3, r3, #5
 8007e36:	f003 020f 	and.w	r2, r3, #15
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4442      	add	r2, r8
 8007e40:	609a      	str	r2, [r3, #8]
 8007e42:	e0d0      	b.n	8007fe6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e44:	f7fd ffe2 	bl	8005e0c <HAL_RCC_GetPCLK1Freq>
 8007e48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	469a      	mov	sl, r3
 8007e4e:	f04f 0b00 	mov.w	fp, #0
 8007e52:	46d0      	mov	r8, sl
 8007e54:	46d9      	mov	r9, fp
 8007e56:	eb18 0308 	adds.w	r3, r8, r8
 8007e5a:	eb49 0409 	adc.w	r4, r9, r9
 8007e5e:	4698      	mov	r8, r3
 8007e60:	46a1      	mov	r9, r4
 8007e62:	eb18 080a 	adds.w	r8, r8, sl
 8007e66:	eb49 090b 	adc.w	r9, r9, fp
 8007e6a:	f04f 0100 	mov.w	r1, #0
 8007e6e:	f04f 0200 	mov.w	r2, #0
 8007e72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e7e:	4688      	mov	r8, r1
 8007e80:	4691      	mov	r9, r2
 8007e82:	eb1a 0508 	adds.w	r5, sl, r8
 8007e86:	eb4b 0609 	adc.w	r6, fp, r9
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	f04f 0200 	mov.w	r2, #0
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	f04f 0400 	mov.w	r4, #0
 8007e9c:	0094      	lsls	r4, r2, #2
 8007e9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ea2:	008b      	lsls	r3, r1, #2
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	4623      	mov	r3, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	4631      	mov	r1, r6
 8007eac:	f7f8 f9b0 	bl	8000210 <__aeabi_uldivmod>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4b50      	ldr	r3, [pc, #320]	; (8007ff8 <UART_SetConfig+0x6f4>)
 8007eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	469b      	mov	fp, r3
 8007ec6:	f04f 0c00 	mov.w	ip, #0
 8007eca:	46d9      	mov	r9, fp
 8007ecc:	46e2      	mov	sl, ip
 8007ece:	eb19 0309 	adds.w	r3, r9, r9
 8007ed2:	eb4a 040a 	adc.w	r4, sl, sl
 8007ed6:	4699      	mov	r9, r3
 8007ed8:	46a2      	mov	sl, r4
 8007eda:	eb19 090b 	adds.w	r9, r9, fp
 8007ede:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ee2:	f04f 0100 	mov.w	r1, #0
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007eee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ef2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ef6:	4689      	mov	r9, r1
 8007ef8:	4692      	mov	sl, r2
 8007efa:	eb1b 0509 	adds.w	r5, fp, r9
 8007efe:	eb4c 060a 	adc.w	r6, ip, sl
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	4619      	mov	r1, r3
 8007f08:	f04f 0200 	mov.w	r2, #0
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	f04f 0400 	mov.w	r4, #0
 8007f14:	0094      	lsls	r4, r2, #2
 8007f16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f1a:	008b      	lsls	r3, r1, #2
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4623      	mov	r3, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	4631      	mov	r1, r6
 8007f24:	f7f8 f974 	bl	8000210 <__aeabi_uldivmod>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4b32      	ldr	r3, [pc, #200]	; (8007ff8 <UART_SetConfig+0x6f4>)
 8007f30:	fba3 1302 	umull	r1, r3, r3, r2
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	2164      	movs	r1, #100	; 0x64
 8007f38:	fb01 f303 	mul.w	r3, r1, r3
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	011b      	lsls	r3, r3, #4
 8007f40:	3332      	adds	r3, #50	; 0x32
 8007f42:	4a2d      	ldr	r2, [pc, #180]	; (8007ff8 <UART_SetConfig+0x6f4>)
 8007f44:	fba2 2303 	umull	r2, r3, r2, r3
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f4e:	4498      	add	r8, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	469b      	mov	fp, r3
 8007f54:	f04f 0c00 	mov.w	ip, #0
 8007f58:	46d9      	mov	r9, fp
 8007f5a:	46e2      	mov	sl, ip
 8007f5c:	eb19 0309 	adds.w	r3, r9, r9
 8007f60:	eb4a 040a 	adc.w	r4, sl, sl
 8007f64:	4699      	mov	r9, r3
 8007f66:	46a2      	mov	sl, r4
 8007f68:	eb19 090b 	adds.w	r9, r9, fp
 8007f6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f70:	f04f 0100 	mov.w	r1, #0
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f84:	4689      	mov	r9, r1
 8007f86:	4692      	mov	sl, r2
 8007f88:	eb1b 0509 	adds.w	r5, fp, r9
 8007f8c:	eb4c 060a 	adc.w	r6, ip, sl
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	4619      	mov	r1, r3
 8007f96:	f04f 0200 	mov.w	r2, #0
 8007f9a:	f04f 0300 	mov.w	r3, #0
 8007f9e:	f04f 0400 	mov.w	r4, #0
 8007fa2:	0094      	lsls	r4, r2, #2
 8007fa4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007fa8:	008b      	lsls	r3, r1, #2
 8007faa:	461a      	mov	r2, r3
 8007fac:	4623      	mov	r3, r4
 8007fae:	4628      	mov	r0, r5
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	f7f8 f92d 	bl	8000210 <__aeabi_uldivmod>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	461a      	mov	r2, r3
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <UART_SetConfig+0x6f4>)
 8007fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	2164      	movs	r1, #100	; 0x64
 8007fc6:	fb01 f303 	mul.w	r3, r1, r3
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	3332      	adds	r3, #50	; 0x32
 8007fd0:	4a09      	ldr	r2, [pc, #36]	; (8007ff8 <UART_SetConfig+0x6f4>)
 8007fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	f003 020f 	and.w	r2, r3, #15
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4442      	add	r2, r8
 8007fe2:	609a      	str	r2, [r3, #8]
}
 8007fe4:	e7ff      	b.n	8007fe6 <UART_SetConfig+0x6e2>
 8007fe6:	bf00      	nop
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff0:	40011000 	.word	0x40011000
 8007ff4:	40011400 	.word	0x40011400
 8007ff8:	51eb851f 	.word	0x51eb851f

08007ffc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4a07      	ldr	r2, [pc, #28]	; (8008028 <vApplicationGetIdleTaskMemory+0x2c>)
 800800c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	4a06      	ldr	r2, [pc, #24]	; (800802c <vApplicationGetIdleTaskMemory+0x30>)
 8008012:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2280      	movs	r2, #128	; 0x80
 8008018:	601a      	str	r2, [r3, #0]
}
 800801a:	bf00      	nop
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	20000288 	.word	0x20000288
 800802c:	200002e4 	.word	0x200002e4

08008030 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4a07      	ldr	r2, [pc, #28]	; (800805c <vApplicationGetTimerTaskMemory+0x2c>)
 8008040:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	4a06      	ldr	r2, [pc, #24]	; (8008060 <vApplicationGetTimerTaskMemory+0x30>)
 8008046:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800804e:	601a      	str	r2, [r3, #0]
}
 8008050:	bf00      	nop
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	200004e4 	.word	0x200004e4
 8008060:	20000540 	.word	0x20000540

08008064 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f103 0208 	add.w	r2, r3, #8
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f04f 32ff 	mov.w	r2, #4294967295
 800807c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f103 0208 	add.w	r2, r3, #8
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f103 0208 	add.w	r2, r3, #8
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080be:	b480      	push	{r7}
 80080c0:	b085      	sub	sp, #20
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	601a      	str	r2, [r3, #0]
}
 80080fa:	bf00      	nop
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008106:	b480      	push	{r7}
 8008108:	b085      	sub	sp, #20
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811c:	d103      	bne.n	8008126 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	e00c      	b.n	8008140 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3308      	adds	r3, #8
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	e002      	b.n	8008134 <vListInsert+0x2e>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	429a      	cmp	r2, r3
 800813e:	d2f6      	bcs.n	800812e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	601a      	str	r2, [r3, #0]
}
 800816c:	bf00      	nop
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	6892      	ldr	r2, [r2, #8]
 800818e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	6852      	ldr	r2, [r2, #4]
 8008198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d103      	bne.n	80081ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	1e5a      	subs	r2, r3, #1
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d109      	bne.n	80081f4 <xQueueGenericReset+0x28>
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	60bb      	str	r3, [r7, #8]
 80081f2:	e7fe      	b.n	80081f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80081f4:	f002 fb42 	bl	800a87c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008200:	68f9      	ldr	r1, [r7, #12]
 8008202:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008204:	fb01 f303 	mul.w	r3, r1, r3
 8008208:	441a      	add	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008224:	3b01      	subs	r3, #1
 8008226:	68f9      	ldr	r1, [r7, #12]
 8008228:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800822a:	fb01 f303 	mul.w	r3, r1, r3
 800822e:	441a      	add	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	22ff      	movs	r2, #255	; 0xff
 8008238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	22ff      	movs	r2, #255	; 0xff
 8008240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d114      	bne.n	8008274 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d01a      	beq.n	8008288 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3310      	adds	r3, #16
 8008256:	4618      	mov	r0, r3
 8008258:	f001 fb3e 	bl	80098d8 <xTaskRemoveFromEventList>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d012      	beq.n	8008288 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008262:	4b0d      	ldr	r3, [pc, #52]	; (8008298 <xQueueGenericReset+0xcc>)
 8008264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	e009      	b.n	8008288 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3310      	adds	r3, #16
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff fef3 	bl	8008064 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3324      	adds	r3, #36	; 0x24
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff feee 	bl	8008064 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008288:	f002 fb26 	bl	800a8d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800828c:	2301      	movs	r3, #1
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	e000ed04 	.word	0xe000ed04

0800829c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08e      	sub	sp, #56	; 0x38
 80082a0:	af02      	add	r7, sp, #8
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d109      	bne.n	80082c4 <xQueueGenericCreateStatic+0x28>
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082c2:	e7fe      	b.n	80082c2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d109      	bne.n	80082de <xQueueGenericCreateStatic+0x42>
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
 80082dc:	e7fe      	b.n	80082dc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <xQueueGenericCreateStatic+0x4e>
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <xQueueGenericCreateStatic+0x52>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <xQueueGenericCreateStatic+0x54>
 80082ee:	2300      	movs	r3, #0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d109      	bne.n	8008308 <xQueueGenericCreateStatic+0x6c>
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	623b      	str	r3, [r7, #32]
 8008306:	e7fe      	b.n	8008306 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d102      	bne.n	8008314 <xQueueGenericCreateStatic+0x78>
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <xQueueGenericCreateStatic+0x7c>
 8008314:	2301      	movs	r3, #1
 8008316:	e000      	b.n	800831a <xQueueGenericCreateStatic+0x7e>
 8008318:	2300      	movs	r3, #0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <xQueueGenericCreateStatic+0x96>
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	61fb      	str	r3, [r7, #28]
 8008330:	e7fe      	b.n	8008330 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008332:	2350      	movs	r3, #80	; 0x50
 8008334:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b50      	cmp	r3, #80	; 0x50
 800833a:	d009      	beq.n	8008350 <xQueueGenericCreateStatic+0xb4>
 800833c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	61bb      	str	r3, [r7, #24]
 800834e:	e7fe      	b.n	800834e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00d      	beq.n	8008376 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008362:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	4613      	mov	r3, r2
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	68b9      	ldr	r1, [r7, #8]
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 f842 	bl	80083fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008378:	4618      	mov	r0, r3
 800837a:	3730      	adds	r7, #48	; 0x30
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af02      	add	r7, sp, #8
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	4613      	mov	r3, r2
 800838c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <xQueueGenericCreate+0x28>
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	613b      	str	r3, [r7, #16]
 80083a6:	e7fe      	b.n	80083a6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d102      	bne.n	80083b4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	61fb      	str	r3, [r7, #28]
 80083b2:	e004      	b.n	80083be <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	fb02 f303 	mul.w	r3, r2, r3
 80083bc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	3350      	adds	r3, #80	; 0x50
 80083c2:	4618      	mov	r0, r3
 80083c4:	f002 fb74 	bl	800aab0 <pvPortMalloc>
 80083c8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00f      	beq.n	80083f0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	3350      	adds	r3, #80	; 0x50
 80083d4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083de:	79fa      	ldrb	r2, [r7, #7]
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	4613      	mov	r3, r2
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 f805 	bl	80083fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80083f0:	69bb      	ldr	r3, [r7, #24]
	}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3720      	adds	r7, #32
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	607a      	str	r2, [r7, #4]
 8008406:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d103      	bne.n	8008416 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	e002      	b.n	800841c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008428:	2101      	movs	r1, #1
 800842a:	69b8      	ldr	r0, [r7, #24]
 800842c:	f7ff fece 	bl	80081cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	78fa      	ldrb	r2, [r7, #3]
 8008434:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008438:	bf00      	nop
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08e      	sub	sp, #56	; 0x38
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800844e:	2300      	movs	r3, #0
 8008450:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	2b00      	cmp	r3, #0
 800845a:	d109      	bne.n	8008470 <xQueueGenericSend+0x30>
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
 800846e:	e7fe      	b.n	800846e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d103      	bne.n	800847e <xQueueGenericSend+0x3e>
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <xQueueGenericSend+0x42>
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <xQueueGenericSend+0x44>
 8008482:	2300      	movs	r3, #0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d109      	bne.n	800849c <xQueueGenericSend+0x5c>
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
 800849a:	e7fe      	b.n	800849a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d103      	bne.n	80084aa <xQueueGenericSend+0x6a>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d101      	bne.n	80084ae <xQueueGenericSend+0x6e>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e000      	b.n	80084b0 <xQueueGenericSend+0x70>
 80084ae:	2300      	movs	r3, #0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d109      	bne.n	80084c8 <xQueueGenericSend+0x88>
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	623b      	str	r3, [r7, #32]
 80084c6:	e7fe      	b.n	80084c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084c8:	f001 fbc2 	bl	8009c50 <xTaskGetSchedulerState>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d102      	bne.n	80084d8 <xQueueGenericSend+0x98>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <xQueueGenericSend+0x9c>
 80084d8:	2301      	movs	r3, #1
 80084da:	e000      	b.n	80084de <xQueueGenericSend+0x9e>
 80084dc:	2300      	movs	r3, #0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d109      	bne.n	80084f6 <xQueueGenericSend+0xb6>
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	61fb      	str	r3, [r7, #28]
 80084f4:	e7fe      	b.n	80084f4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084f6:	f002 f9c1 	bl	800a87c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008502:	429a      	cmp	r2, r3
 8008504:	d302      	bcc.n	800850c <xQueueGenericSend+0xcc>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b02      	cmp	r3, #2
 800850a:	d129      	bne.n	8008560 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	68b9      	ldr	r1, [r7, #8]
 8008510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008512:	f000 fc26 	bl	8008d62 <prvCopyDataToQueue>
 8008516:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	2b00      	cmp	r3, #0
 800851e:	d010      	beq.n	8008542 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	3324      	adds	r3, #36	; 0x24
 8008524:	4618      	mov	r0, r3
 8008526:	f001 f9d7 	bl	80098d8 <xTaskRemoveFromEventList>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d013      	beq.n	8008558 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008530:	4b3f      	ldr	r3, [pc, #252]	; (8008630 <xQueueGenericSend+0x1f0>)
 8008532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	e00a      	b.n	8008558 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008548:	4b39      	ldr	r3, [pc, #228]	; (8008630 <xQueueGenericSend+0x1f0>)
 800854a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008558:	f002 f9be 	bl	800a8d8 <vPortExitCritical>
				return pdPASS;
 800855c:	2301      	movs	r3, #1
 800855e:	e063      	b.n	8008628 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d103      	bne.n	800856e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008566:	f002 f9b7 	bl	800a8d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800856a:	2300      	movs	r3, #0
 800856c:	e05c      	b.n	8008628 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800856e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008570:	2b00      	cmp	r3, #0
 8008572:	d106      	bne.n	8008582 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008574:	f107 0314 	add.w	r3, r7, #20
 8008578:	4618      	mov	r0, r3
 800857a:	f001 fa0f 	bl	800999c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800857e:	2301      	movs	r3, #1
 8008580:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008582:	f002 f9a9 	bl	800a8d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008586:	f000 ff85 	bl	8009494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800858a:	f002 f977 	bl	800a87c <vPortEnterCritical>
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008594:	b25b      	sxtb	r3, r3
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859a:	d103      	bne.n	80085a4 <xQueueGenericSend+0x164>
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085aa:	b25b      	sxtb	r3, r3
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b0:	d103      	bne.n	80085ba <xQueueGenericSend+0x17a>
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085ba:	f002 f98d 	bl	800a8d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085be:	1d3a      	adds	r2, r7, #4
 80085c0:	f107 0314 	add.w	r3, r7, #20
 80085c4:	4611      	mov	r1, r2
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 f9fe 	bl	80099c8 <xTaskCheckForTimeOut>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d124      	bne.n	800861c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085d4:	f000 fcbd 	bl	8008f52 <prvIsQueueFull>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d018      	beq.n	8008610 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	3310      	adds	r3, #16
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	4611      	mov	r1, r2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f001 f928 	bl	800983c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80085ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ee:	f000 fc48 	bl	8008e82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80085f2:	f000 ff5d 	bl	80094b0 <xTaskResumeAll>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f47f af7c 	bne.w	80084f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80085fe:	4b0c      	ldr	r3, [pc, #48]	; (8008630 <xQueueGenericSend+0x1f0>)
 8008600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	e772      	b.n	80084f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008612:	f000 fc36 	bl	8008e82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008616:	f000 ff4b 	bl	80094b0 <xTaskResumeAll>
 800861a:	e76c      	b.n	80084f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800861c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800861e:	f000 fc30 	bl	8008e82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008622:	f000 ff45 	bl	80094b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008626:	2300      	movs	r3, #0
		}
	}
}
 8008628:	4618      	mov	r0, r3
 800862a:	3738      	adds	r7, #56	; 0x38
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	e000ed04 	.word	0xe000ed04

08008634 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08e      	sub	sp, #56	; 0x38
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	2b00      	cmp	r3, #0
 800864a:	d109      	bne.n	8008660 <xQueueGenericSendFromISR+0x2c>
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
 800865e:	e7fe      	b.n	800865e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d103      	bne.n	800866e <xQueueGenericSendFromISR+0x3a>
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <xQueueGenericSendFromISR+0x3e>
 800866e:	2301      	movs	r3, #1
 8008670:	e000      	b.n	8008674 <xQueueGenericSendFromISR+0x40>
 8008672:	2300      	movs	r3, #0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d109      	bne.n	800868c <xQueueGenericSendFromISR+0x58>
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	623b      	str	r3, [r7, #32]
 800868a:	e7fe      	b.n	800868a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d103      	bne.n	800869a <xQueueGenericSendFromISR+0x66>
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <xQueueGenericSendFromISR+0x6a>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <xQueueGenericSendFromISR+0x6c>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d109      	bne.n	80086b8 <xQueueGenericSendFromISR+0x84>
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	61fb      	str	r3, [r7, #28]
 80086b6:	e7fe      	b.n	80086b6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086b8:	f002 f9bc 	bl	800aa34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80086bc:	f3ef 8211 	mrs	r2, BASEPRI
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	61ba      	str	r2, [r7, #24]
 80086d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80086d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d302      	bcc.n	80086ea <xQueueGenericSendFromISR+0xb6>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d12c      	bne.n	8008744 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	68b9      	ldr	r1, [r7, #8]
 80086f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086fa:	f000 fb32 	bl	8008d62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008706:	d112      	bne.n	800872e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	2b00      	cmp	r3, #0
 800870e:	d016      	beq.n	800873e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	3324      	adds	r3, #36	; 0x24
 8008714:	4618      	mov	r0, r3
 8008716:	f001 f8df 	bl	80098d8 <xTaskRemoveFromEventList>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00e      	beq.n	800873e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	e007      	b.n	800873e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800872e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008732:	3301      	adds	r3, #1
 8008734:	b2db      	uxtb	r3, r3
 8008736:	b25a      	sxtb	r2, r3
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800873e:	2301      	movs	r3, #1
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008742:	e001      	b.n	8008748 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008744:	2300      	movs	r3, #0
 8008746:	637b      	str	r3, [r7, #52]	; 0x34
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008754:	4618      	mov	r0, r3
 8008756:	3738      	adds	r7, #56	; 0x38
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08e      	sub	sp, #56	; 0x38
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	2b00      	cmp	r3, #0
 800876e:	d109      	bne.n	8008784 <xQueueGiveFromISR+0x28>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	623b      	str	r3, [r7, #32]
 8008782:	e7fe      	b.n	8008782 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <xQueueGiveFromISR+0x44>
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	61fb      	str	r3, [r7, #28]
 800879e:	e7fe      	b.n	800879e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80087a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d103      	bne.n	80087b0 <xQueueGiveFromISR+0x54>
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <xQueueGiveFromISR+0x58>
 80087b0:	2301      	movs	r3, #1
 80087b2:	e000      	b.n	80087b6 <xQueueGiveFromISR+0x5a>
 80087b4:	2300      	movs	r3, #0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d109      	bne.n	80087ce <xQueueGiveFromISR+0x72>
 80087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	61bb      	str	r3, [r7, #24]
 80087cc:	e7fe      	b.n	80087cc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087ce:	f002 f931 	bl	800aa34 <vPortValidateInterruptPriority>
	__asm volatile
 80087d2:	f3ef 8211 	mrs	r2, BASEPRI
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	617a      	str	r2, [r7, #20]
 80087e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80087ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80087f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d22b      	bcs.n	8008856 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008810:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008818:	d112      	bne.n	8008840 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	2b00      	cmp	r3, #0
 8008820:	d016      	beq.n	8008850 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	3324      	adds	r3, #36	; 0x24
 8008826:	4618      	mov	r0, r3
 8008828:	f001 f856 	bl	80098d8 <xTaskRemoveFromEventList>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00e      	beq.n	8008850 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00b      	beq.n	8008850 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2201      	movs	r2, #1
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	e007      	b.n	8008850 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008844:	3301      	adds	r3, #1
 8008846:	b2db      	uxtb	r3, r3
 8008848:	b25a      	sxtb	r2, r3
 800884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008850:	2301      	movs	r3, #1
 8008852:	637b      	str	r3, [r7, #52]	; 0x34
 8008854:	e001      	b.n	800885a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008856:	2300      	movs	r3, #0
 8008858:	637b      	str	r3, [r7, #52]	; 0x34
 800885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008866:	4618      	mov	r0, r3
 8008868:	3738      	adds	r7, #56	; 0x38
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b08c      	sub	sp, #48	; 0x30
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800887c:	2300      	movs	r3, #0
 800887e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <xQueueReceive+0x2e>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	623b      	str	r3, [r7, #32]
 800889c:	e7fe      	b.n	800889c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d103      	bne.n	80088ac <xQueueReceive+0x3c>
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <xQueueReceive+0x40>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e000      	b.n	80088b2 <xQueueReceive+0x42>
 80088b0:	2300      	movs	r3, #0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d109      	bne.n	80088ca <xQueueReceive+0x5a>
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	61fb      	str	r3, [r7, #28]
 80088c8:	e7fe      	b.n	80088c8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088ca:	f001 f9c1 	bl	8009c50 <xTaskGetSchedulerState>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <xQueueReceive+0x6a>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <xQueueReceive+0x6e>
 80088da:	2301      	movs	r3, #1
 80088dc:	e000      	b.n	80088e0 <xQueueReceive+0x70>
 80088de:	2300      	movs	r3, #0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d109      	bne.n	80088f8 <xQueueReceive+0x88>
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	61bb      	str	r3, [r7, #24]
 80088f6:	e7fe      	b.n	80088f6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80088f8:	f001 ffc0 	bl	800a87c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008900:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01f      	beq.n	8008948 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008908:	68b9      	ldr	r1, [r7, #8]
 800890a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800890c:	f000 fa93 	bl	8008e36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	1e5a      	subs	r2, r3, #1
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00f      	beq.n	8008940 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	3310      	adds	r3, #16
 8008924:	4618      	mov	r0, r3
 8008926:	f000 ffd7 	bl	80098d8 <xTaskRemoveFromEventList>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d007      	beq.n	8008940 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008930:	4b3c      	ldr	r3, [pc, #240]	; (8008a24 <xQueueReceive+0x1b4>)
 8008932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008940:	f001 ffca 	bl	800a8d8 <vPortExitCritical>
				return pdPASS;
 8008944:	2301      	movs	r3, #1
 8008946:	e069      	b.n	8008a1c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d103      	bne.n	8008956 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800894e:	f001 ffc3 	bl	800a8d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008952:	2300      	movs	r3, #0
 8008954:	e062      	b.n	8008a1c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d106      	bne.n	800896a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800895c:	f107 0310 	add.w	r3, r7, #16
 8008960:	4618      	mov	r0, r3
 8008962:	f001 f81b 	bl	800999c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008966:	2301      	movs	r3, #1
 8008968:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800896a:	f001 ffb5 	bl	800a8d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800896e:	f000 fd91 	bl	8009494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008972:	f001 ff83 	bl	800a87c <vPortEnterCritical>
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800897c:	b25b      	sxtb	r3, r3
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008982:	d103      	bne.n	800898c <xQueueReceive+0x11c>
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008992:	b25b      	sxtb	r3, r3
 8008994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008998:	d103      	bne.n	80089a2 <xQueueReceive+0x132>
 800899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899c:	2200      	movs	r2, #0
 800899e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089a2:	f001 ff99 	bl	800a8d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089a6:	1d3a      	adds	r2, r7, #4
 80089a8:	f107 0310 	add.w	r3, r7, #16
 80089ac:	4611      	mov	r1, r2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f001 f80a 	bl	80099c8 <xTaskCheckForTimeOut>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d123      	bne.n	8008a02 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089bc:	f000 fab3 	bl	8008f26 <prvIsQueueEmpty>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d017      	beq.n	80089f6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	3324      	adds	r3, #36	; 0x24
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 ff34 	bl	800983c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089d6:	f000 fa54 	bl	8008e82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089da:	f000 fd69 	bl	80094b0 <xTaskResumeAll>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d189      	bne.n	80088f8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80089e4:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <xQueueReceive+0x1b4>)
 80089e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	e780      	b.n	80088f8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80089f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089f8:	f000 fa43 	bl	8008e82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089fc:	f000 fd58 	bl	80094b0 <xTaskResumeAll>
 8008a00:	e77a      	b.n	80088f8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a04:	f000 fa3d 	bl	8008e82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a08:	f000 fd52 	bl	80094b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a0e:	f000 fa8a 	bl	8008f26 <prvIsQueueEmpty>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f43f af6f 	beq.w	80088f8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3730      	adds	r7, #48	; 0x30
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	e000ed04 	.word	0xe000ed04

08008a28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b08e      	sub	sp, #56	; 0x38
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a32:	2300      	movs	r3, #0
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d109      	bne.n	8008a58 <xQueueSemaphoreTake+0x30>
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	623b      	str	r3, [r7, #32]
 8008a56:	e7fe      	b.n	8008a56 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d009      	beq.n	8008a74 <xQueueSemaphoreTake+0x4c>
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	61fb      	str	r3, [r7, #28]
 8008a72:	e7fe      	b.n	8008a72 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a74:	f001 f8ec 	bl	8009c50 <xTaskGetSchedulerState>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d102      	bne.n	8008a84 <xQueueSemaphoreTake+0x5c>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <xQueueSemaphoreTake+0x60>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e000      	b.n	8008a8a <xQueueSemaphoreTake+0x62>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <xQueueSemaphoreTake+0x7a>
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	61bb      	str	r3, [r7, #24]
 8008aa0:	e7fe      	b.n	8008aa0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008aa2:	f001 feeb 	bl	800a87c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d024      	beq.n	8008afc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	1e5a      	subs	r2, r3, #1
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d104      	bne.n	8008acc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008ac2:	f001 fa41 	bl	8009f48 <pvTaskIncrementMutexHeldCount>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00f      	beq.n	8008af4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	3310      	adds	r3, #16
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 fefd 	bl	80098d8 <xTaskRemoveFromEventList>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d007      	beq.n	8008af4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ae4:	4b53      	ldr	r3, [pc, #332]	; (8008c34 <xQueueSemaphoreTake+0x20c>)
 8008ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008af4:	f001 fef0 	bl	800a8d8 <vPortExitCritical>
				return pdPASS;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e096      	b.n	8008c2a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d110      	bne.n	8008b24 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d009      	beq.n	8008b1c <xQueueSemaphoreTake+0xf4>
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	617b      	str	r3, [r7, #20]
 8008b1a:	e7fe      	b.n	8008b1a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008b1c:	f001 fedc 	bl	800a8d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b20:	2300      	movs	r3, #0
 8008b22:	e082      	b.n	8008c2a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d106      	bne.n	8008b38 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b2a:	f107 030c 	add.w	r3, r7, #12
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 ff34 	bl	800999c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b34:	2301      	movs	r3, #1
 8008b36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b38:	f001 fece 	bl	800a8d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b3c:	f000 fcaa 	bl	8009494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b40:	f001 fe9c 	bl	800a87c <vPortEnterCritical>
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b4a:	b25b      	sxtb	r3, r3
 8008b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b50:	d103      	bne.n	8008b5a <xQueueSemaphoreTake+0x132>
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b60:	b25b      	sxtb	r3, r3
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b66:	d103      	bne.n	8008b70 <xQueueSemaphoreTake+0x148>
 8008b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b70:	f001 feb2 	bl	800a8d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b74:	463a      	mov	r2, r7
 8008b76:	f107 030c 	add.w	r3, r7, #12
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 ff23 	bl	80099c8 <xTaskCheckForTimeOut>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d132      	bne.n	8008bee <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b8a:	f000 f9cc 	bl	8008f26 <prvIsQueueEmpty>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d026      	beq.n	8008be2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d109      	bne.n	8008bb0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008b9c:	f001 fe6e 	bl	800a87c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f001 f871 	bl	8009c8c <xTaskPriorityInherit>
 8008baa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008bac:	f001 fe94 	bl	800a8d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	3324      	adds	r3, #36	; 0x24
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 fe3f 	bl	800983c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bc0:	f000 f95f 	bl	8008e82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bc4:	f000 fc74 	bl	80094b0 <xTaskResumeAll>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f47f af69 	bne.w	8008aa2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008bd0:	4b18      	ldr	r3, [pc, #96]	; (8008c34 <xQueueSemaphoreTake+0x20c>)
 8008bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	e75f      	b.n	8008aa2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008be2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008be4:	f000 f94d 	bl	8008e82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008be8:	f000 fc62 	bl	80094b0 <xTaskResumeAll>
 8008bec:	e759      	b.n	8008aa2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008bee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bf0:	f000 f947 	bl	8008e82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bf4:	f000 fc5c 	bl	80094b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bfa:	f000 f994 	bl	8008f26 <prvIsQueueEmpty>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f43f af4e 	beq.w	8008aa2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00d      	beq.n	8008c28 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008c0c:	f001 fe36 	bl	800a87c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008c10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c12:	f000 f88e 	bl	8008d32 <prvGetDisinheritPriorityAfterTimeout>
 8008c16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 f90e 	bl	8009e40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008c24:	f001 fe58 	bl	800a8d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3738      	adds	r7, #56	; 0x38
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	e000ed04 	.word	0xe000ed04

08008c38 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08e      	sub	sp, #56	; 0x38
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d109      	bne.n	8008c62 <xQueueReceiveFromISR+0x2a>
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	623b      	str	r3, [r7, #32]
 8008c60:	e7fe      	b.n	8008c60 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d103      	bne.n	8008c70 <xQueueReceiveFromISR+0x38>
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <xQueueReceiveFromISR+0x3c>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e000      	b.n	8008c76 <xQueueReceiveFromISR+0x3e>
 8008c74:	2300      	movs	r3, #0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d109      	bne.n	8008c8e <xQueueReceiveFromISR+0x56>
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	61fb      	str	r3, [r7, #28]
 8008c8c:	e7fe      	b.n	8008c8c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c8e:	f001 fed1 	bl	800aa34 <vPortValidateInterruptPriority>
	__asm volatile
 8008c92:	f3ef 8211 	mrs	r2, BASEPRI
 8008c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	61ba      	str	r2, [r7, #24]
 8008ca8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008caa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d02f      	beq.n	8008d1a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cc8:	f000 f8b5 	bl	8008e36 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	1e5a      	subs	r2, r3, #1
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008cd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cdc:	d112      	bne.n	8008d04 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d016      	beq.n	8008d14 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	3310      	adds	r3, #16
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 fdf4 	bl	80098d8 <xTaskRemoveFromEventList>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00e      	beq.n	8008d14 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00b      	beq.n	8008d14 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	e007      	b.n	8008d14 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d08:	3301      	adds	r3, #1
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	b25a      	sxtb	r2, r3
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008d14:	2301      	movs	r3, #1
 8008d16:	637b      	str	r3, [r7, #52]	; 0x34
 8008d18:	e001      	b.n	8008d1e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3738      	adds	r7, #56	; 0x38
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008d32:	b480      	push	{r7}
 8008d34:	b085      	sub	sp, #20
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d006      	beq.n	8008d50 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	e001      	b.n	8008d54 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008d50:	2300      	movs	r3, #0
 8008d52:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008d54:	68fb      	ldr	r3, [r7, #12]
	}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b086      	sub	sp, #24
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10d      	bne.n	8008d9c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d14d      	bne.n	8008e24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 ffeb 	bl	8009d68 <xTaskPriorityDisinherit>
 8008d92:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	605a      	str	r2, [r3, #4]
 8008d9a:	e043      	b.n	8008e24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d119      	bne.n	8008dd6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6898      	ldr	r0, [r3, #8]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	461a      	mov	r2, r3
 8008dac:	68b9      	ldr	r1, [r7, #8]
 8008dae:	f002 f893 	bl	800aed8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dba:	441a      	add	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	689a      	ldr	r2, [r3, #8]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d32b      	bcc.n	8008e24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	609a      	str	r2, [r3, #8]
 8008dd4:	e026      	b.n	8008e24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	68d8      	ldr	r0, [r3, #12]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	461a      	mov	r2, r3
 8008de0:	68b9      	ldr	r1, [r7, #8]
 8008de2:	f002 f879 	bl	800aed8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	425b      	negs	r3, r3
 8008df0:	441a      	add	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d207      	bcs.n	8008e12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0a:	425b      	negs	r3, r3
 8008e0c:	441a      	add	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d105      	bne.n	8008e24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d002      	beq.n	8008e24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	1c5a      	adds	r2, r3, #1
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e2c:	697b      	ldr	r3, [r7, #20]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d018      	beq.n	8008e7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68da      	ldr	r2, [r3, #12]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e50:	441a      	add	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d303      	bcc.n	8008e6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68d9      	ldr	r1, [r3, #12]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	461a      	mov	r2, r3
 8008e74:	6838      	ldr	r0, [r7, #0]
 8008e76:	f002 f82f 	bl	800aed8 <memcpy>
	}
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e8a:	f001 fcf7 	bl	800a87c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e96:	e011      	b.n	8008ebc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d012      	beq.n	8008ec6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3324      	adds	r3, #36	; 0x24
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 fd17 	bl	80098d8 <xTaskRemoveFromEventList>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008eb0:	f000 fdea 	bl	8009a88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	dce9      	bgt.n	8008e98 <prvUnlockQueue+0x16>
 8008ec4:	e000      	b.n	8008ec8 <prvUnlockQueue+0x46>
					break;
 8008ec6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	22ff      	movs	r2, #255	; 0xff
 8008ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ed0:	f001 fd02 	bl	800a8d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ed4:	f001 fcd2 	bl	800a87c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ede:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ee0:	e011      	b.n	8008f06 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d012      	beq.n	8008f10 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3310      	adds	r3, #16
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fcf2 	bl	80098d8 <xTaskRemoveFromEventList>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008efa:	f000 fdc5 	bl	8009a88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	dce9      	bgt.n	8008ee2 <prvUnlockQueue+0x60>
 8008f0e:	e000      	b.n	8008f12 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f10:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	22ff      	movs	r2, #255	; 0xff
 8008f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f1a:	f001 fcdd 	bl	800a8d8 <vPortExitCritical>
}
 8008f1e:	bf00      	nop
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f2e:	f001 fca5 	bl	800a87c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d102      	bne.n	8008f40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]
 8008f3e:	e001      	b.n	8008f44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f44:	f001 fcc8 	bl	800a8d8 <vPortExitCritical>

	return xReturn;
 8008f48:	68fb      	ldr	r3, [r7, #12]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f5a:	f001 fc8f 	bl	800a87c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d102      	bne.n	8008f70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	e001      	b.n	8008f74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f74:	f001 fcb0 	bl	800a8d8 <vPortExitCritical>

	return xReturn;
 8008f78:	68fb      	ldr	r3, [r7, #12]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
	...

08008f84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60fb      	str	r3, [r7, #12]
 8008f92:	e014      	b.n	8008fbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f94:	4a0e      	ldr	r2, [pc, #56]	; (8008fd0 <vQueueAddToRegistry+0x4c>)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10b      	bne.n	8008fb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008fa0:	490b      	ldr	r1, [pc, #44]	; (8008fd0 <vQueueAddToRegistry+0x4c>)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008faa:	4a09      	ldr	r2, [pc, #36]	; (8008fd0 <vQueueAddToRegistry+0x4c>)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008fb6:	e005      	b.n	8008fc4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b07      	cmp	r3, #7
 8008fc2:	d9e7      	bls.n	8008f94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008fc4:	bf00      	nop
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	20004e0c 	.word	0x20004e0c

08008fd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008fe4:	f001 fc4a 	bl	800a87c <vPortEnterCritical>
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fee:	b25b      	sxtb	r3, r3
 8008ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff4:	d103      	bne.n	8008ffe <vQueueWaitForMessageRestricted+0x2a>
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009004:	b25b      	sxtb	r3, r3
 8009006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900a:	d103      	bne.n	8009014 <vQueueWaitForMessageRestricted+0x40>
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009014:	f001 fc60 	bl	800a8d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901c:	2b00      	cmp	r3, #0
 800901e:	d106      	bne.n	800902e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	3324      	adds	r3, #36	; 0x24
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fc2b 	bl	8009884 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800902e:	6978      	ldr	r0, [r7, #20]
 8009030:	f7ff ff27 	bl	8008e82 <prvUnlockQueue>
	}
 8009034:	bf00      	nop
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800903c:	b580      	push	{r7, lr}
 800903e:	b08e      	sub	sp, #56	; 0x38
 8009040:	af04      	add	r7, sp, #16
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800904a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904c:	2b00      	cmp	r3, #0
 800904e:	d109      	bne.n	8009064 <xTaskCreateStatic+0x28>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	623b      	str	r3, [r7, #32]
 8009062:	e7fe      	b.n	8009062 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	2b00      	cmp	r3, #0
 8009068:	d109      	bne.n	800907e <xTaskCreateStatic+0x42>
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	61fb      	str	r3, [r7, #28]
 800907c:	e7fe      	b.n	800907c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800907e:	235c      	movs	r3, #92	; 0x5c
 8009080:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	2b5c      	cmp	r3, #92	; 0x5c
 8009086:	d009      	beq.n	800909c <xTaskCreateStatic+0x60>
 8009088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	61bb      	str	r3, [r7, #24]
 800909a:	e7fe      	b.n	800909a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01e      	beq.n	80090e0 <xTaskCreateStatic+0xa4>
 80090a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d01b      	beq.n	80090e0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	2202      	movs	r2, #2
 80090b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090ba:	2300      	movs	r3, #0
 80090bc:	9303      	str	r3, [sp, #12]
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	9302      	str	r3, [sp, #8]
 80090c2:	f107 0314 	add.w	r3, r7, #20
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	68b9      	ldr	r1, [r7, #8]
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 f850 	bl	8009178 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090da:	f000 f8d3 	bl	8009284 <prvAddNewTaskToReadyList>
 80090de:	e001      	b.n	80090e4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090e4:	697b      	ldr	r3, [r7, #20]
	}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3728      	adds	r7, #40	; 0x28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b08c      	sub	sp, #48	; 0x30
 80090f2:	af04      	add	r7, sp, #16
 80090f4:	60f8      	str	r0, [r7, #12]
 80090f6:	60b9      	str	r1, [r7, #8]
 80090f8:	603b      	str	r3, [r7, #0]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090fe:	88fb      	ldrh	r3, [r7, #6]
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4618      	mov	r0, r3
 8009104:	f001 fcd4 	bl	800aab0 <pvPortMalloc>
 8009108:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00e      	beq.n	800912e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009110:	205c      	movs	r0, #92	; 0x5c
 8009112:	f001 fccd 	bl	800aab0 <pvPortMalloc>
 8009116:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	631a      	str	r2, [r3, #48]	; 0x30
 8009124:	e005      	b.n	8009132 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009126:	6978      	ldr	r0, [r7, #20]
 8009128:	f001 fd84 	bl	800ac34 <vPortFree>
 800912c:	e001      	b.n	8009132 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800912e:	2300      	movs	r3, #0
 8009130:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d017      	beq.n	8009168 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009140:	88fa      	ldrh	r2, [r7, #6]
 8009142:	2300      	movs	r3, #0
 8009144:	9303      	str	r3, [sp, #12]
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	9302      	str	r3, [sp, #8]
 800914a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914c:	9301      	str	r3, [sp, #4]
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 f80e 	bl	8009178 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800915c:	69f8      	ldr	r0, [r7, #28]
 800915e:	f000 f891 	bl	8009284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009162:	2301      	movs	r3, #1
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	e002      	b.n	800916e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009168:	f04f 33ff 	mov.w	r3, #4294967295
 800916c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800916e:	69bb      	ldr	r3, [r7, #24]
	}
 8009170:	4618      	mov	r0, r3
 8009172:	3720      	adds	r7, #32
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	461a      	mov	r2, r3
 8009190:	21a5      	movs	r1, #165	; 0xa5
 8009192:	f001 feac 	bl	800aeee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091a0:	3b01      	subs	r3, #1
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	f023 0307 	bic.w	r3, r3, #7
 80091ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	f003 0307 	and.w	r3, r3, #7
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <prvInitialiseNewTask+0x56>
 80091ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	617b      	str	r3, [r7, #20]
 80091cc:	e7fe      	b.n	80091cc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091ce:	2300      	movs	r3, #0
 80091d0:	61fb      	str	r3, [r7, #28]
 80091d2:	e012      	b.n	80091fa <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	7819      	ldrb	r1, [r3, #0]
 80091dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	4413      	add	r3, r2
 80091e2:	3334      	adds	r3, #52	; 0x34
 80091e4:	460a      	mov	r2, r1
 80091e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	4413      	add	r3, r2
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d006      	beq.n	8009202 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	3301      	adds	r3, #1
 80091f8:	61fb      	str	r3, [r7, #28]
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	2b0f      	cmp	r3, #15
 80091fe:	d9e9      	bls.n	80091d4 <prvInitialiseNewTask+0x5c>
 8009200:	e000      	b.n	8009204 <prvInitialiseNewTask+0x8c>
		{
			break;
 8009202:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	2b37      	cmp	r3, #55	; 0x37
 8009210:	d901      	bls.n	8009216 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009212:	2337      	movs	r3, #55	; 0x37
 8009214:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800921a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009220:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009224:	2200      	movs	r2, #0
 8009226:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	3304      	adds	r3, #4
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe ff39 	bl	80080a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	3318      	adds	r3, #24
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe ff34 	bl	80080a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800923c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009240:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009250:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	2200      	movs	r2, #0
 8009256:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009260:	683a      	ldr	r2, [r7, #0]
 8009262:	68f9      	ldr	r1, [r7, #12]
 8009264:	69b8      	ldr	r0, [r7, #24]
 8009266:	f001 f9e1 	bl	800a62c <pxPortInitialiseStack>
 800926a:	4602      	mov	r2, r0
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800927a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800927c:	bf00      	nop
 800927e:	3720      	adds	r7, #32
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800928c:	f001 faf6 	bl	800a87c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009290:	4b2d      	ldr	r3, [pc, #180]	; (8009348 <prvAddNewTaskToReadyList+0xc4>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	4a2c      	ldr	r2, [pc, #176]	; (8009348 <prvAddNewTaskToReadyList+0xc4>)
 8009298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800929a:	4b2c      	ldr	r3, [pc, #176]	; (800934c <prvAddNewTaskToReadyList+0xc8>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d109      	bne.n	80092b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092a2:	4a2a      	ldr	r2, [pc, #168]	; (800934c <prvAddNewTaskToReadyList+0xc8>)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092a8:	4b27      	ldr	r3, [pc, #156]	; (8009348 <prvAddNewTaskToReadyList+0xc4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d110      	bne.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092b0:	f000 fc0e 	bl	8009ad0 <prvInitialiseTaskLists>
 80092b4:	e00d      	b.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092b6:	4b26      	ldr	r3, [pc, #152]	; (8009350 <prvAddNewTaskToReadyList+0xcc>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d109      	bne.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092be:	4b23      	ldr	r3, [pc, #140]	; (800934c <prvAddNewTaskToReadyList+0xc8>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d802      	bhi.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092cc:	4a1f      	ldr	r2, [pc, #124]	; (800934c <prvAddNewTaskToReadyList+0xc8>)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092d2:	4b20      	ldr	r3, [pc, #128]	; (8009354 <prvAddNewTaskToReadyList+0xd0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3301      	adds	r3, #1
 80092d8:	4a1e      	ldr	r2, [pc, #120]	; (8009354 <prvAddNewTaskToReadyList+0xd0>)
 80092da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80092dc:	4b1d      	ldr	r3, [pc, #116]	; (8009354 <prvAddNewTaskToReadyList+0xd0>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e8:	4b1b      	ldr	r3, [pc, #108]	; (8009358 <prvAddNewTaskToReadyList+0xd4>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d903      	bls.n	80092f8 <prvAddNewTaskToReadyList+0x74>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	4a18      	ldr	r2, [pc, #96]	; (8009358 <prvAddNewTaskToReadyList+0xd4>)
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fc:	4613      	mov	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4a15      	ldr	r2, [pc, #84]	; (800935c <prvAddNewTaskToReadyList+0xd8>)
 8009306:	441a      	add	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3304      	adds	r3, #4
 800930c:	4619      	mov	r1, r3
 800930e:	4610      	mov	r0, r2
 8009310:	f7fe fed5 	bl	80080be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009314:	f001 fae0 	bl	800a8d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009318:	4b0d      	ldr	r3, [pc, #52]	; (8009350 <prvAddNewTaskToReadyList+0xcc>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00e      	beq.n	800933e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009320:	4b0a      	ldr	r3, [pc, #40]	; (800934c <prvAddNewTaskToReadyList+0xc8>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	429a      	cmp	r2, r3
 800932c:	d207      	bcs.n	800933e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800932e:	4b0c      	ldr	r3, [pc, #48]	; (8009360 <prvAddNewTaskToReadyList+0xdc>)
 8009330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20000e14 	.word	0x20000e14
 800934c:	20000940 	.word	0x20000940
 8009350:	20000e20 	.word	0x20000e20
 8009354:	20000e30 	.word	0x20000e30
 8009358:	20000e1c 	.word	0x20000e1c
 800935c:	20000944 	.word	0x20000944
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d016      	beq.n	80093a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009376:	4b13      	ldr	r3, [pc, #76]	; (80093c4 <vTaskDelay+0x60>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d009      	beq.n	8009392 <vTaskDelay+0x2e>
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	60bb      	str	r3, [r7, #8]
 8009390:	e7fe      	b.n	8009390 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009392:	f000 f87f 	bl	8009494 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009396:	2100      	movs	r1, #0
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fde9 	bl	8009f70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800939e:	f000 f887 	bl	80094b0 <xTaskResumeAll>
 80093a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d107      	bne.n	80093ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80093aa:	4b07      	ldr	r3, [pc, #28]	; (80093c8 <vTaskDelay+0x64>)
 80093ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093ba:	bf00      	nop
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20000e3c 	.word	0x20000e3c
 80093c8:	e000ed04 	.word	0xe000ed04

080093cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08a      	sub	sp, #40	; 0x28
 80093d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093da:	463a      	mov	r2, r7
 80093dc:	1d39      	adds	r1, r7, #4
 80093de:	f107 0308 	add.w	r3, r7, #8
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fe0a 	bl	8007ffc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	9202      	str	r2, [sp, #8]
 80093f0:	9301      	str	r3, [sp, #4]
 80093f2:	2300      	movs	r3, #0
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	2300      	movs	r3, #0
 80093f8:	460a      	mov	r2, r1
 80093fa:	4920      	ldr	r1, [pc, #128]	; (800947c <vTaskStartScheduler+0xb0>)
 80093fc:	4820      	ldr	r0, [pc, #128]	; (8009480 <vTaskStartScheduler+0xb4>)
 80093fe:	f7ff fe1d 	bl	800903c <xTaskCreateStatic>
 8009402:	4602      	mov	r2, r0
 8009404:	4b1f      	ldr	r3, [pc, #124]	; (8009484 <vTaskStartScheduler+0xb8>)
 8009406:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009408:	4b1e      	ldr	r3, [pc, #120]	; (8009484 <vTaskStartScheduler+0xb8>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009410:	2301      	movs	r3, #1
 8009412:	617b      	str	r3, [r7, #20]
 8009414:	e001      	b.n	800941a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009416:	2300      	movs	r3, #0
 8009418:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d102      	bne.n	8009426 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009420:	f000 fdfa 	bl	800a018 <xTimerCreateTimerTask>
 8009424:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d115      	bne.n	8009458 <vTaskStartScheduler+0x8c>
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800943e:	4b12      	ldr	r3, [pc, #72]	; (8009488 <vTaskStartScheduler+0xbc>)
 8009440:	f04f 32ff 	mov.w	r2, #4294967295
 8009444:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009446:	4b11      	ldr	r3, [pc, #68]	; (800948c <vTaskStartScheduler+0xc0>)
 8009448:	2201      	movs	r2, #1
 800944a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800944c:	4b10      	ldr	r3, [pc, #64]	; (8009490 <vTaskStartScheduler+0xc4>)
 800944e:	2200      	movs	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009452:	f001 f975 	bl	800a740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009456:	e00d      	b.n	8009474 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945e:	d109      	bne.n	8009474 <vTaskStartScheduler+0xa8>
 8009460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	60fb      	str	r3, [r7, #12]
 8009472:	e7fe      	b.n	8009472 <vTaskStartScheduler+0xa6>
}
 8009474:	bf00      	nop
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	0800afec 	.word	0x0800afec
 8009480:	08009aa1 	.word	0x08009aa1
 8009484:	20000e38 	.word	0x20000e38
 8009488:	20000e34 	.word	0x20000e34
 800948c:	20000e20 	.word	0x20000e20
 8009490:	20000e18 	.word	0x20000e18

08009494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009494:	b480      	push	{r7}
 8009496:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009498:	4b04      	ldr	r3, [pc, #16]	; (80094ac <vTaskSuspendAll+0x18>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3301      	adds	r3, #1
 800949e:	4a03      	ldr	r2, [pc, #12]	; (80094ac <vTaskSuspendAll+0x18>)
 80094a0:	6013      	str	r3, [r2, #0]
}
 80094a2:	bf00      	nop
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	20000e3c 	.word	0x20000e3c

080094b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094ba:	2300      	movs	r3, #0
 80094bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094be:	4b41      	ldr	r3, [pc, #260]	; (80095c4 <xTaskResumeAll+0x114>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d109      	bne.n	80094da <xTaskResumeAll+0x2a>
 80094c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	603b      	str	r3, [r7, #0]
 80094d8:	e7fe      	b.n	80094d8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094da:	f001 f9cf 	bl	800a87c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094de:	4b39      	ldr	r3, [pc, #228]	; (80095c4 <xTaskResumeAll+0x114>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	4a37      	ldr	r2, [pc, #220]	; (80095c4 <xTaskResumeAll+0x114>)
 80094e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094e8:	4b36      	ldr	r3, [pc, #216]	; (80095c4 <xTaskResumeAll+0x114>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d162      	bne.n	80095b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094f0:	4b35      	ldr	r3, [pc, #212]	; (80095c8 <xTaskResumeAll+0x118>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d05e      	beq.n	80095b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094f8:	e02f      	b.n	800955a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80094fa:	4b34      	ldr	r3, [pc, #208]	; (80095cc <xTaskResumeAll+0x11c>)
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3318      	adds	r3, #24
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe fe36 	bl	8008178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	3304      	adds	r3, #4
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe fe31 	bl	8008178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951a:	4b2d      	ldr	r3, [pc, #180]	; (80095d0 <xTaskResumeAll+0x120>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	429a      	cmp	r2, r3
 8009520:	d903      	bls.n	800952a <xTaskResumeAll+0x7a>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009526:	4a2a      	ldr	r2, [pc, #168]	; (80095d0 <xTaskResumeAll+0x120>)
 8009528:	6013      	str	r3, [r2, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4a27      	ldr	r2, [pc, #156]	; (80095d4 <xTaskResumeAll+0x124>)
 8009538:	441a      	add	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	3304      	adds	r3, #4
 800953e:	4619      	mov	r1, r3
 8009540:	4610      	mov	r0, r2
 8009542:	f7fe fdbc 	bl	80080be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954a:	4b23      	ldr	r3, [pc, #140]	; (80095d8 <xTaskResumeAll+0x128>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	429a      	cmp	r2, r3
 8009552:	d302      	bcc.n	800955a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009554:	4b21      	ldr	r3, [pc, #132]	; (80095dc <xTaskResumeAll+0x12c>)
 8009556:	2201      	movs	r2, #1
 8009558:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800955a:	4b1c      	ldr	r3, [pc, #112]	; (80095cc <xTaskResumeAll+0x11c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1cb      	bne.n	80094fa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009568:	f000 fb4c 	bl	8009c04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800956c:	4b1c      	ldr	r3, [pc, #112]	; (80095e0 <xTaskResumeAll+0x130>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d010      	beq.n	800959a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009578:	f000 f846 	bl	8009608 <xTaskIncrementTick>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d002      	beq.n	8009588 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009582:	4b16      	ldr	r3, [pc, #88]	; (80095dc <xTaskResumeAll+0x12c>)
 8009584:	2201      	movs	r2, #1
 8009586:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3b01      	subs	r3, #1
 800958c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1f1      	bne.n	8009578 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009594:	4b12      	ldr	r3, [pc, #72]	; (80095e0 <xTaskResumeAll+0x130>)
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800959a:	4b10      	ldr	r3, [pc, #64]	; (80095dc <xTaskResumeAll+0x12c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d009      	beq.n	80095b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095a2:	2301      	movs	r3, #1
 80095a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095a6:	4b0f      	ldr	r3, [pc, #60]	; (80095e4 <xTaskResumeAll+0x134>)
 80095a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095b6:	f001 f98f 	bl	800a8d8 <vPortExitCritical>

	return xAlreadyYielded;
 80095ba:	68bb      	ldr	r3, [r7, #8]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000e3c 	.word	0x20000e3c
 80095c8:	20000e14 	.word	0x20000e14
 80095cc:	20000dd4 	.word	0x20000dd4
 80095d0:	20000e1c 	.word	0x20000e1c
 80095d4:	20000944 	.word	0x20000944
 80095d8:	20000940 	.word	0x20000940
 80095dc:	20000e28 	.word	0x20000e28
 80095e0:	20000e24 	.word	0x20000e24
 80095e4:	e000ed04 	.word	0xe000ed04

080095e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095ee:	4b05      	ldr	r3, [pc, #20]	; (8009604 <xTaskGetTickCount+0x1c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095f4:	687b      	ldr	r3, [r7, #4]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20000e18 	.word	0x20000e18

08009608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009612:	4b51      	ldr	r3, [pc, #324]	; (8009758 <xTaskIncrementTick+0x150>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f040 808d 	bne.w	8009736 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800961c:	4b4f      	ldr	r3, [pc, #316]	; (800975c <xTaskIncrementTick+0x154>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3301      	adds	r3, #1
 8009622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009624:	4a4d      	ldr	r2, [pc, #308]	; (800975c <xTaskIncrementTick+0x154>)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d11f      	bne.n	8009670 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009630:	4b4b      	ldr	r3, [pc, #300]	; (8009760 <xTaskIncrementTick+0x158>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d009      	beq.n	800964e <xTaskIncrementTick+0x46>
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	e7fe      	b.n	800964c <xTaskIncrementTick+0x44>
 800964e:	4b44      	ldr	r3, [pc, #272]	; (8009760 <xTaskIncrementTick+0x158>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	4b43      	ldr	r3, [pc, #268]	; (8009764 <xTaskIncrementTick+0x15c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a41      	ldr	r2, [pc, #260]	; (8009760 <xTaskIncrementTick+0x158>)
 800965a:	6013      	str	r3, [r2, #0]
 800965c:	4a41      	ldr	r2, [pc, #260]	; (8009764 <xTaskIncrementTick+0x15c>)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	4b41      	ldr	r3, [pc, #260]	; (8009768 <xTaskIncrementTick+0x160>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3301      	adds	r3, #1
 8009668:	4a3f      	ldr	r2, [pc, #252]	; (8009768 <xTaskIncrementTick+0x160>)
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	f000 faca 	bl	8009c04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009670:	4b3e      	ldr	r3, [pc, #248]	; (800976c <xTaskIncrementTick+0x164>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	429a      	cmp	r2, r3
 8009678:	d34e      	bcc.n	8009718 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800967a:	4b39      	ldr	r3, [pc, #228]	; (8009760 <xTaskIncrementTick+0x158>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <xTaskIncrementTick+0x80>
 8009684:	2301      	movs	r3, #1
 8009686:	e000      	b.n	800968a <xTaskIncrementTick+0x82>
 8009688:	2300      	movs	r3, #0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d004      	beq.n	8009698 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800968e:	4b37      	ldr	r3, [pc, #220]	; (800976c <xTaskIncrementTick+0x164>)
 8009690:	f04f 32ff 	mov.w	r2, #4294967295
 8009694:	601a      	str	r2, [r3, #0]
					break;
 8009696:	e03f      	b.n	8009718 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009698:	4b31      	ldr	r3, [pc, #196]	; (8009760 <xTaskIncrementTick+0x158>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d203      	bcs.n	80096b8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096b0:	4a2e      	ldr	r2, [pc, #184]	; (800976c <xTaskIncrementTick+0x164>)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6013      	str	r3, [r2, #0]
						break;
 80096b6:	e02f      	b.n	8009718 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe fd5b 	bl	8008178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	3318      	adds	r3, #24
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fd52 	bl	8008178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d8:	4b25      	ldr	r3, [pc, #148]	; (8009770 <xTaskIncrementTick+0x168>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d903      	bls.n	80096e8 <xTaskIncrementTick+0xe0>
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	4a22      	ldr	r2, [pc, #136]	; (8009770 <xTaskIncrementTick+0x168>)
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4a1f      	ldr	r2, [pc, #124]	; (8009774 <xTaskIncrementTick+0x16c>)
 80096f6:	441a      	add	r2, r3
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	3304      	adds	r3, #4
 80096fc:	4619      	mov	r1, r3
 80096fe:	4610      	mov	r0, r2
 8009700:	f7fe fcdd 	bl	80080be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009708:	4b1b      	ldr	r3, [pc, #108]	; (8009778 <xTaskIncrementTick+0x170>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970e:	429a      	cmp	r2, r3
 8009710:	d3b3      	bcc.n	800967a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009712:	2301      	movs	r3, #1
 8009714:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009716:	e7b0      	b.n	800967a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009718:	4b17      	ldr	r3, [pc, #92]	; (8009778 <xTaskIncrementTick+0x170>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	4915      	ldr	r1, [pc, #84]	; (8009774 <xTaskIncrementTick+0x16c>)
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	440b      	add	r3, r1
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d907      	bls.n	8009740 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009730:	2301      	movs	r3, #1
 8009732:	617b      	str	r3, [r7, #20]
 8009734:	e004      	b.n	8009740 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009736:	4b11      	ldr	r3, [pc, #68]	; (800977c <xTaskIncrementTick+0x174>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3301      	adds	r3, #1
 800973c:	4a0f      	ldr	r2, [pc, #60]	; (800977c <xTaskIncrementTick+0x174>)
 800973e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009740:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <xTaskIncrementTick+0x178>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009748:	2301      	movs	r3, #1
 800974a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800974c:	697b      	ldr	r3, [r7, #20]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20000e3c 	.word	0x20000e3c
 800975c:	20000e18 	.word	0x20000e18
 8009760:	20000dcc 	.word	0x20000dcc
 8009764:	20000dd0 	.word	0x20000dd0
 8009768:	20000e2c 	.word	0x20000e2c
 800976c:	20000e34 	.word	0x20000e34
 8009770:	20000e1c 	.word	0x20000e1c
 8009774:	20000944 	.word	0x20000944
 8009778:	20000940 	.word	0x20000940
 800977c:	20000e24 	.word	0x20000e24
 8009780:	20000e28 	.word	0x20000e28

08009784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800978a:	4b27      	ldr	r3, [pc, #156]	; (8009828 <vTaskSwitchContext+0xa4>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009792:	4b26      	ldr	r3, [pc, #152]	; (800982c <vTaskSwitchContext+0xa8>)
 8009794:	2201      	movs	r2, #1
 8009796:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009798:	e040      	b.n	800981c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800979a:	4b24      	ldr	r3, [pc, #144]	; (800982c <vTaskSwitchContext+0xa8>)
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80097a0:	4b23      	ldr	r3, [pc, #140]	; (8009830 <vTaskSwitchContext+0xac>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	60fb      	str	r3, [r7, #12]
 80097a6:	e00f      	b.n	80097c8 <vTaskSwitchContext+0x44>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d109      	bne.n	80097c2 <vTaskSwitchContext+0x3e>
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
 80097c0:	e7fe      	b.n	80097c0 <vTaskSwitchContext+0x3c>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	491a      	ldr	r1, [pc, #104]	; (8009834 <vTaskSwitchContext+0xb0>)
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4613      	mov	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d0e5      	beq.n	80097a8 <vTaskSwitchContext+0x24>
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	4613      	mov	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4a13      	ldr	r2, [pc, #76]	; (8009834 <vTaskSwitchContext+0xb0>)
 80097e8:	4413      	add	r3, r2
 80097ea:	60bb      	str	r3, [r7, #8]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	605a      	str	r2, [r3, #4]
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	685a      	ldr	r2, [r3, #4]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	3308      	adds	r3, #8
 80097fe:	429a      	cmp	r2, r3
 8009800:	d104      	bne.n	800980c <vTaskSwitchContext+0x88>
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	605a      	str	r2, [r3, #4]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	4a09      	ldr	r2, [pc, #36]	; (8009838 <vTaskSwitchContext+0xb4>)
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	4a06      	ldr	r2, [pc, #24]	; (8009830 <vTaskSwitchContext+0xac>)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6013      	str	r3, [r2, #0]
}
 800981c:	bf00      	nop
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	20000e3c 	.word	0x20000e3c
 800982c:	20000e28 	.word	0x20000e28
 8009830:	20000e1c 	.word	0x20000e1c
 8009834:	20000944 	.word	0x20000944
 8009838:	20000940 	.word	0x20000940

0800983c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d109      	bne.n	8009860 <vTaskPlaceOnEventList+0x24>
 800984c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	60fb      	str	r3, [r7, #12]
 800985e:	e7fe      	b.n	800985e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009860:	4b07      	ldr	r3, [pc, #28]	; (8009880 <vTaskPlaceOnEventList+0x44>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3318      	adds	r3, #24
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7fe fc4c 	bl	8008106 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800986e:	2101      	movs	r1, #1
 8009870:	6838      	ldr	r0, [r7, #0]
 8009872:	f000 fb7d 	bl	8009f70 <prvAddCurrentTaskToDelayedList>
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000940 	.word	0x20000940

08009884 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d109      	bne.n	80098aa <vTaskPlaceOnEventListRestricted+0x26>
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	617b      	str	r3, [r7, #20]
 80098a8:	e7fe      	b.n	80098a8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098aa:	4b0a      	ldr	r3, [pc, #40]	; (80098d4 <vTaskPlaceOnEventListRestricted+0x50>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3318      	adds	r3, #24
 80098b0:	4619      	mov	r1, r3
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f7fe fc03 	bl	80080be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d002      	beq.n	80098c4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80098be:	f04f 33ff 	mov.w	r3, #4294967295
 80098c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098c4:	6879      	ldr	r1, [r7, #4]
 80098c6:	68b8      	ldr	r0, [r7, #8]
 80098c8:	f000 fb52 	bl	8009f70 <prvAddCurrentTaskToDelayedList>
	}
 80098cc:	bf00      	nop
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	20000940 	.word	0x20000940

080098d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d109      	bne.n	8009902 <xTaskRemoveFromEventList+0x2a>
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	e7fe      	b.n	8009900 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	3318      	adds	r3, #24
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe fc36 	bl	8008178 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800990c:	4b1d      	ldr	r3, [pc, #116]	; (8009984 <xTaskRemoveFromEventList+0xac>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d11d      	bne.n	8009950 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	3304      	adds	r3, #4
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fc2d 	bl	8008178 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009922:	4b19      	ldr	r3, [pc, #100]	; (8009988 <xTaskRemoveFromEventList+0xb0>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	429a      	cmp	r2, r3
 8009928:	d903      	bls.n	8009932 <xTaskRemoveFromEventList+0x5a>
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992e:	4a16      	ldr	r2, [pc, #88]	; (8009988 <xTaskRemoveFromEventList+0xb0>)
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009936:	4613      	mov	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4a13      	ldr	r2, [pc, #76]	; (800998c <xTaskRemoveFromEventList+0xb4>)
 8009940:	441a      	add	r2, r3
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	3304      	adds	r3, #4
 8009946:	4619      	mov	r1, r3
 8009948:	4610      	mov	r0, r2
 800994a:	f7fe fbb8 	bl	80080be <vListInsertEnd>
 800994e:	e005      	b.n	800995c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	3318      	adds	r3, #24
 8009954:	4619      	mov	r1, r3
 8009956:	480e      	ldr	r0, [pc, #56]	; (8009990 <xTaskRemoveFromEventList+0xb8>)
 8009958:	f7fe fbb1 	bl	80080be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009960:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <xTaskRemoveFromEventList+0xbc>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009966:	429a      	cmp	r2, r3
 8009968:	d905      	bls.n	8009976 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800996a:	2301      	movs	r3, #1
 800996c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800996e:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <xTaskRemoveFromEventList+0xc0>)
 8009970:	2201      	movs	r2, #1
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	e001      	b.n	800997a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009976:	2300      	movs	r3, #0
 8009978:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800997a:	697b      	ldr	r3, [r7, #20]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	20000e3c 	.word	0x20000e3c
 8009988:	20000e1c 	.word	0x20000e1c
 800998c:	20000944 	.word	0x20000944
 8009990:	20000dd4 	.word	0x20000dd4
 8009994:	20000940 	.word	0x20000940
 8009998:	20000e28 	.word	0x20000e28

0800999c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099a4:	4b06      	ldr	r3, [pc, #24]	; (80099c0 <vTaskInternalSetTimeOutState+0x24>)
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099ac:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <vTaskInternalSetTimeOutState+0x28>)
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	605a      	str	r2, [r3, #4]
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	20000e2c 	.word	0x20000e2c
 80099c4:	20000e18 	.word	0x20000e18

080099c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d109      	bne.n	80099ec <xTaskCheckForTimeOut+0x24>
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	613b      	str	r3, [r7, #16]
 80099ea:	e7fe      	b.n	80099ea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d109      	bne.n	8009a06 <xTaskCheckForTimeOut+0x3e>
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	e7fe      	b.n	8009a04 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009a06:	f000 ff39 	bl	800a87c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a0a:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <xTaskCheckForTimeOut+0xb8>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	69ba      	ldr	r2, [r7, #24]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a22:	d102      	bne.n	8009a2a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a24:	2300      	movs	r3, #0
 8009a26:	61fb      	str	r3, [r7, #28]
 8009a28:	e023      	b.n	8009a72 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	4b15      	ldr	r3, [pc, #84]	; (8009a84 <xTaskCheckForTimeOut+0xbc>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d007      	beq.n	8009a46 <xTaskCheckForTimeOut+0x7e>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d302      	bcc.n	8009a46 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a40:	2301      	movs	r3, #1
 8009a42:	61fb      	str	r3, [r7, #28]
 8009a44:	e015      	b.n	8009a72 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d20b      	bcs.n	8009a68 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	1ad2      	subs	r2, r2, r3
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7ff ff9d 	bl	800999c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a62:	2300      	movs	r3, #0
 8009a64:	61fb      	str	r3, [r7, #28]
 8009a66:	e004      	b.n	8009a72 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a72:	f000 ff31 	bl	800a8d8 <vPortExitCritical>

	return xReturn;
 8009a76:	69fb      	ldr	r3, [r7, #28]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3720      	adds	r7, #32
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	20000e18 	.word	0x20000e18
 8009a84:	20000e2c 	.word	0x20000e2c

08009a88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a8c:	4b03      	ldr	r3, [pc, #12]	; (8009a9c <vTaskMissedYield+0x14>)
 8009a8e:	2201      	movs	r2, #1
 8009a90:	601a      	str	r2, [r3, #0]
}
 8009a92:	bf00      	nop
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	20000e28 	.word	0x20000e28

08009aa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009aa8:	f000 f852 	bl	8009b50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009aac:	4b06      	ldr	r3, [pc, #24]	; (8009ac8 <prvIdleTask+0x28>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d9f9      	bls.n	8009aa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ab4:	4b05      	ldr	r3, [pc, #20]	; (8009acc <prvIdleTask+0x2c>)
 8009ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ac4:	e7f0      	b.n	8009aa8 <prvIdleTask+0x8>
 8009ac6:	bf00      	nop
 8009ac8:	20000944 	.word	0x20000944
 8009acc:	e000ed04 	.word	0xe000ed04

08009ad0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	607b      	str	r3, [r7, #4]
 8009ada:	e00c      	b.n	8009af6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4a12      	ldr	r2, [pc, #72]	; (8009b30 <prvInitialiseTaskLists+0x60>)
 8009ae8:	4413      	add	r3, r2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe faba 	bl	8008064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3301      	adds	r3, #1
 8009af4:	607b      	str	r3, [r7, #4]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b37      	cmp	r3, #55	; 0x37
 8009afa:	d9ef      	bls.n	8009adc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009afc:	480d      	ldr	r0, [pc, #52]	; (8009b34 <prvInitialiseTaskLists+0x64>)
 8009afe:	f7fe fab1 	bl	8008064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b02:	480d      	ldr	r0, [pc, #52]	; (8009b38 <prvInitialiseTaskLists+0x68>)
 8009b04:	f7fe faae 	bl	8008064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b08:	480c      	ldr	r0, [pc, #48]	; (8009b3c <prvInitialiseTaskLists+0x6c>)
 8009b0a:	f7fe faab 	bl	8008064 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b0e:	480c      	ldr	r0, [pc, #48]	; (8009b40 <prvInitialiseTaskLists+0x70>)
 8009b10:	f7fe faa8 	bl	8008064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b14:	480b      	ldr	r0, [pc, #44]	; (8009b44 <prvInitialiseTaskLists+0x74>)
 8009b16:	f7fe faa5 	bl	8008064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <prvInitialiseTaskLists+0x78>)
 8009b1c:	4a05      	ldr	r2, [pc, #20]	; (8009b34 <prvInitialiseTaskLists+0x64>)
 8009b1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b20:	4b0a      	ldr	r3, [pc, #40]	; (8009b4c <prvInitialiseTaskLists+0x7c>)
 8009b22:	4a05      	ldr	r2, [pc, #20]	; (8009b38 <prvInitialiseTaskLists+0x68>)
 8009b24:	601a      	str	r2, [r3, #0]
}
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20000944 	.word	0x20000944
 8009b34:	20000da4 	.word	0x20000da4
 8009b38:	20000db8 	.word	0x20000db8
 8009b3c:	20000dd4 	.word	0x20000dd4
 8009b40:	20000de8 	.word	0x20000de8
 8009b44:	20000e00 	.word	0x20000e00
 8009b48:	20000dcc 	.word	0x20000dcc
 8009b4c:	20000dd0 	.word	0x20000dd0

08009b50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b56:	e019      	b.n	8009b8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b58:	f000 fe90 	bl	800a87c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009b5c:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <prvCheckTasksWaitingTermination+0x4c>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3304      	adds	r3, #4
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe fb05 	bl	8008178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ba0 <prvCheckTasksWaitingTermination+0x50>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	4a0a      	ldr	r2, [pc, #40]	; (8009ba0 <prvCheckTasksWaitingTermination+0x50>)
 8009b76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b78:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <prvCheckTasksWaitingTermination+0x54>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	4a09      	ldr	r2, [pc, #36]	; (8009ba4 <prvCheckTasksWaitingTermination+0x54>)
 8009b80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b82:	f000 fea9 	bl	800a8d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f80e 	bl	8009ba8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b8c:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <prvCheckTasksWaitingTermination+0x54>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e1      	bne.n	8009b58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20000de8 	.word	0x20000de8
 8009ba0:	20000e14 	.word	0x20000e14
 8009ba4:	20000dfc 	.word	0x20000dfc

08009ba8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d108      	bne.n	8009bcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f001 f838 	bl	800ac34 <vPortFree>
				vPortFree( pxTCB );
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 f835 	bl	800ac34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bca:	e017      	b.n	8009bfc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d103      	bne.n	8009bde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f001 f82c 	bl	800ac34 <vPortFree>
	}
 8009bdc:	e00e      	b.n	8009bfc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d009      	beq.n	8009bfc <prvDeleteTCB+0x54>
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	e7fe      	b.n	8009bfa <prvDeleteTCB+0x52>
	}
 8009bfc:	bf00      	nop
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c0a:	4b0f      	ldr	r3, [pc, #60]	; (8009c48 <prvResetNextTaskUnblockTime+0x44>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <prvResetNextTaskUnblockTime+0x14>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e000      	b.n	8009c1a <prvResetNextTaskUnblockTime+0x16>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d004      	beq.n	8009c28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	; (8009c4c <prvResetNextTaskUnblockTime+0x48>)
 8009c20:	f04f 32ff 	mov.w	r2, #4294967295
 8009c24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c26:	e008      	b.n	8009c3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009c28:	4b07      	ldr	r3, [pc, #28]	; (8009c48 <prvResetNextTaskUnblockTime+0x44>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	4a05      	ldr	r2, [pc, #20]	; (8009c4c <prvResetNextTaskUnblockTime+0x48>)
 8009c38:	6013      	str	r3, [r2, #0]
}
 8009c3a:	bf00      	nop
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	20000dcc 	.word	0x20000dcc
 8009c4c:	20000e34 	.word	0x20000e34

08009c50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c56:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <xTaskGetSchedulerState+0x34>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d102      	bne.n	8009c64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	607b      	str	r3, [r7, #4]
 8009c62:	e008      	b.n	8009c76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c64:	4b08      	ldr	r3, [pc, #32]	; (8009c88 <xTaskGetSchedulerState+0x38>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d102      	bne.n	8009c72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	607b      	str	r3, [r7, #4]
 8009c70:	e001      	b.n	8009c76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c72:	2300      	movs	r3, #0
 8009c74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c76:	687b      	ldr	r3, [r7, #4]
	}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	20000e20 	.word	0x20000e20
 8009c88:	20000e3c 	.word	0x20000e3c

08009c8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d056      	beq.n	8009d50 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca6:	4b2d      	ldr	r3, [pc, #180]	; (8009d5c <xTaskPriorityInherit+0xd0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d246      	bcs.n	8009d3e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	db06      	blt.n	8009cc6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cb8:	4b28      	ldr	r3, [pc, #160]	; (8009d5c <xTaskPriorityInherit+0xd0>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	6959      	ldr	r1, [r3, #20]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cce:	4613      	mov	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4a22      	ldr	r2, [pc, #136]	; (8009d60 <xTaskPriorityInherit+0xd4>)
 8009cd8:	4413      	add	r3, r2
 8009cda:	4299      	cmp	r1, r3
 8009cdc:	d101      	bne.n	8009ce2 <xTaskPriorityInherit+0x56>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <xTaskPriorityInherit+0x58>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d022      	beq.n	8009d2e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	3304      	adds	r3, #4
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fe fa43 	bl	8008178 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009cf2:	4b1a      	ldr	r3, [pc, #104]	; (8009d5c <xTaskPriorityInherit+0xd0>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d00:	4b18      	ldr	r3, [pc, #96]	; (8009d64 <xTaskPriorityInherit+0xd8>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d903      	bls.n	8009d10 <xTaskPriorityInherit+0x84>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0c:	4a15      	ldr	r2, [pc, #84]	; (8009d64 <xTaskPriorityInherit+0xd8>)
 8009d0e:	6013      	str	r3, [r2, #0]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d14:	4613      	mov	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4a10      	ldr	r2, [pc, #64]	; (8009d60 <xTaskPriorityInherit+0xd4>)
 8009d1e:	441a      	add	r2, r3
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	3304      	adds	r3, #4
 8009d24:	4619      	mov	r1, r3
 8009d26:	4610      	mov	r0, r2
 8009d28:	f7fe f9c9 	bl	80080be <vListInsertEnd>
 8009d2c:	e004      	b.n	8009d38 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d2e:	4b0b      	ldr	r3, [pc, #44]	; (8009d5c <xTaskPriorityInherit+0xd0>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	e008      	b.n	8009d50 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d42:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <xTaskPriorityInherit+0xd0>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d201      	bcs.n	8009d50 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d50:	68fb      	ldr	r3, [r7, #12]
	}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000940 	.word	0x20000940
 8009d60:	20000944 	.word	0x20000944
 8009d64:	20000e1c 	.word	0x20000e1c

08009d68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d74:	2300      	movs	r3, #0
 8009d76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d054      	beq.n	8009e28 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d7e:	4b2d      	ldr	r3, [pc, #180]	; (8009e34 <xTaskPriorityDisinherit+0xcc>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d009      	beq.n	8009d9c <xTaskPriorityDisinherit+0x34>
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	e7fe      	b.n	8009d9a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d109      	bne.n	8009db8 <xTaskPriorityDisinherit+0x50>
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	60bb      	str	r3, [r7, #8]
 8009db6:	e7fe      	b.n	8009db6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dbc:	1e5a      	subs	r2, r3, #1
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d02c      	beq.n	8009e28 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d128      	bne.n	8009e28 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	3304      	adds	r3, #4
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe f9cc 	bl	8008178 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df8:	4b0f      	ldr	r3, [pc, #60]	; (8009e38 <xTaskPriorityDisinherit+0xd0>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d903      	bls.n	8009e08 <xTaskPriorityDisinherit+0xa0>
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	4a0c      	ldr	r2, [pc, #48]	; (8009e38 <xTaskPriorityDisinherit+0xd0>)
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4a09      	ldr	r2, [pc, #36]	; (8009e3c <xTaskPriorityDisinherit+0xd4>)
 8009e16:	441a      	add	r2, r3
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4610      	mov	r0, r2
 8009e20:	f7fe f94d 	bl	80080be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e24:	2301      	movs	r3, #1
 8009e26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e28:	697b      	ldr	r3, [r7, #20]
	}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000940 	.word	0x20000940
 8009e38:	20000e1c 	.word	0x20000e1c
 8009e3c:	20000944 	.word	0x20000944

08009e40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d06d      	beq.n	8009f34 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d109      	bne.n	8009e74 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	60fb      	str	r3, [r7, #12]
 8009e72:	e7fe      	b.n	8009e72 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d902      	bls.n	8009e84 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	61fb      	str	r3, [r7, #28]
 8009e82:	e002      	b.n	8009e8a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e88:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8e:	69fa      	ldr	r2, [r7, #28]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d04f      	beq.n	8009f34 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d14a      	bne.n	8009f34 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009e9e:	4b27      	ldr	r3, [pc, #156]	; (8009f3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	69ba      	ldr	r2, [r7, #24]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d109      	bne.n	8009ebc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	60bb      	str	r3, [r7, #8]
 8009eba:	e7fe      	b.n	8009eba <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	69fa      	ldr	r2, [r7, #28]
 8009ec6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	db04      	blt.n	8009eda <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	6959      	ldr	r1, [r3, #20]
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4a15      	ldr	r2, [pc, #84]	; (8009f40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009eea:	4413      	add	r3, r2
 8009eec:	4299      	cmp	r1, r3
 8009eee:	d101      	bne.n	8009ef4 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d01c      	beq.n	8009f34 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe f93a 	bl	8008178 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f08:	4b0e      	ldr	r3, [pc, #56]	; (8009f44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d903      	bls.n	8009f18 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f14:	4a0b      	ldr	r2, [pc, #44]	; (8009f44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4a06      	ldr	r2, [pc, #24]	; (8009f40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009f26:	441a      	add	r2, r3
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	f7fe f8c5 	bl	80080be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f34:	bf00      	nop
 8009f36:	3720      	adds	r7, #32
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	20000940 	.word	0x20000940
 8009f40:	20000944 	.word	0x20000944
 8009f44:	20000e1c 	.word	0x20000e1c

08009f48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009f48:	b480      	push	{r7}
 8009f4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009f4c:	4b07      	ldr	r3, [pc, #28]	; (8009f6c <pvTaskIncrementMutexHeldCount+0x24>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d004      	beq.n	8009f5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009f54:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <pvTaskIncrementMutexHeldCount+0x24>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f5a:	3201      	adds	r2, #1
 8009f5c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009f5e:	4b03      	ldr	r3, [pc, #12]	; (8009f6c <pvTaskIncrementMutexHeldCount+0x24>)
 8009f60:	681b      	ldr	r3, [r3, #0]
	}
 8009f62:	4618      	mov	r0, r3
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	20000940 	.word	0x20000940

08009f70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f7a:	4b21      	ldr	r3, [pc, #132]	; (800a000 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f80:	4b20      	ldr	r3, [pc, #128]	; (800a004 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3304      	adds	r3, #4
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fe f8f6 	bl	8008178 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f92:	d10a      	bne.n	8009faa <prvAddCurrentTaskToDelayedList+0x3a>
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d007      	beq.n	8009faa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f9a:	4b1a      	ldr	r3, [pc, #104]	; (800a004 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4819      	ldr	r0, [pc, #100]	; (800a008 <prvAddCurrentTaskToDelayedList+0x98>)
 8009fa4:	f7fe f88b 	bl	80080be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fa8:	e026      	b.n	8009ff8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4413      	add	r3, r2
 8009fb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fb2:	4b14      	ldr	r3, [pc, #80]	; (800a004 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d209      	bcs.n	8009fd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fc2:	4b12      	ldr	r3, [pc, #72]	; (800a00c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	4b0f      	ldr	r3, [pc, #60]	; (800a004 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3304      	adds	r3, #4
 8009fcc:	4619      	mov	r1, r3
 8009fce:	4610      	mov	r0, r2
 8009fd0:	f7fe f899 	bl	8008106 <vListInsert>
}
 8009fd4:	e010      	b.n	8009ff8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fd6:	4b0e      	ldr	r3, [pc, #56]	; (800a010 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	4b0a      	ldr	r3, [pc, #40]	; (800a004 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3304      	adds	r3, #4
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	f7fe f88f 	bl	8008106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fe8:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d202      	bcs.n	8009ff8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ff2:	4a08      	ldr	r2, [pc, #32]	; (800a014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	6013      	str	r3, [r2, #0]
}
 8009ff8:	bf00      	nop
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20000e18 	.word	0x20000e18
 800a004:	20000940 	.word	0x20000940
 800a008:	20000e00 	.word	0x20000e00
 800a00c:	20000dd0 	.word	0x20000dd0
 800a010:	20000dcc 	.word	0x20000dcc
 800a014:	20000e34 	.word	0x20000e34

0800a018 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08a      	sub	sp, #40	; 0x28
 800a01c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a01e:	2300      	movs	r3, #0
 800a020:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a022:	f000 fac3 	bl	800a5ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a026:	4b1c      	ldr	r3, [pc, #112]	; (800a098 <xTimerCreateTimerTask+0x80>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d021      	beq.n	800a072 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a032:	2300      	movs	r3, #0
 800a034:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a036:	1d3a      	adds	r2, r7, #4
 800a038:	f107 0108 	add.w	r1, r7, #8
 800a03c:	f107 030c 	add.w	r3, r7, #12
 800a040:	4618      	mov	r0, r3
 800a042:	f7fd fff5 	bl	8008030 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	9202      	str	r2, [sp, #8]
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	2302      	movs	r3, #2
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	2300      	movs	r3, #0
 800a056:	460a      	mov	r2, r1
 800a058:	4910      	ldr	r1, [pc, #64]	; (800a09c <xTimerCreateTimerTask+0x84>)
 800a05a:	4811      	ldr	r0, [pc, #68]	; (800a0a0 <xTimerCreateTimerTask+0x88>)
 800a05c:	f7fe ffee 	bl	800903c <xTaskCreateStatic>
 800a060:	4602      	mov	r2, r0
 800a062:	4b10      	ldr	r3, [pc, #64]	; (800a0a4 <xTimerCreateTimerTask+0x8c>)
 800a064:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a066:	4b0f      	ldr	r3, [pc, #60]	; (800a0a4 <xTimerCreateTimerTask+0x8c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a06e:	2301      	movs	r3, #1
 800a070:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d109      	bne.n	800a08c <xTimerCreateTimerTask+0x74>
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	613b      	str	r3, [r7, #16]
 800a08a:	e7fe      	b.n	800a08a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a08c:	697b      	ldr	r3, [r7, #20]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20000e70 	.word	0x20000e70
 800a09c:	0800aff4 	.word	0x0800aff4
 800a0a0:	0800a1c1 	.word	0x0800a1c1
 800a0a4:	20000e74 	.word	0x20000e74

0800a0a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08a      	sub	sp, #40	; 0x28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d109      	bne.n	800a0d4 <xTimerGenericCommand+0x2c>
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	623b      	str	r3, [r7, #32]
 800a0d2:	e7fe      	b.n	800a0d2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0d4:	4b19      	ldr	r3, [pc, #100]	; (800a13c <xTimerGenericCommand+0x94>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d02a      	beq.n	800a132 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b05      	cmp	r3, #5
 800a0ec:	dc18      	bgt.n	800a120 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a0ee:	f7ff fdaf 	bl	8009c50 <xTaskGetSchedulerState>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d109      	bne.n	800a10c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0f8:	4b10      	ldr	r3, [pc, #64]	; (800a13c <xTimerGenericCommand+0x94>)
 800a0fa:	6818      	ldr	r0, [r3, #0]
 800a0fc:	f107 0110 	add.w	r1, r7, #16
 800a100:	2300      	movs	r3, #0
 800a102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a104:	f7fe f99c 	bl	8008440 <xQueueGenericSend>
 800a108:	6278      	str	r0, [r7, #36]	; 0x24
 800a10a:	e012      	b.n	800a132 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a10c:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <xTimerGenericCommand+0x94>)
 800a10e:	6818      	ldr	r0, [r3, #0]
 800a110:	f107 0110 	add.w	r1, r7, #16
 800a114:	2300      	movs	r3, #0
 800a116:	2200      	movs	r2, #0
 800a118:	f7fe f992 	bl	8008440 <xQueueGenericSend>
 800a11c:	6278      	str	r0, [r7, #36]	; 0x24
 800a11e:	e008      	b.n	800a132 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a120:	4b06      	ldr	r3, [pc, #24]	; (800a13c <xTimerGenericCommand+0x94>)
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	f107 0110 	add.w	r1, r7, #16
 800a128:	2300      	movs	r3, #0
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	f7fe fa82 	bl	8008634 <xQueueGenericSendFromISR>
 800a130:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a134:	4618      	mov	r0, r3
 800a136:	3728      	adds	r7, #40	; 0x28
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	20000e70 	.word	0x20000e70

0800a140 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af02      	add	r7, sp, #8
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a14a:	4b1c      	ldr	r3, [pc, #112]	; (800a1bc <prvProcessExpiredTimer+0x7c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	3304      	adds	r3, #4
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fe f80d 	bl	8008178 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d121      	bne.n	800a1aa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	699a      	ldr	r2, [r3, #24]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	18d1      	adds	r1, r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	6978      	ldr	r0, [r7, #20]
 800a174:	f000 f8c8 	bl	800a308 <prvInsertTimerInActiveList>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d015      	beq.n	800a1aa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a17e:	2300      	movs	r3, #0
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	2300      	movs	r3, #0
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	2100      	movs	r1, #0
 800a188:	6978      	ldr	r0, [r7, #20]
 800a18a:	f7ff ff8d 	bl	800a0a8 <xTimerGenericCommand>
 800a18e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d109      	bne.n	800a1aa <prvProcessExpiredTimer+0x6a>
 800a196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	e7fe      	b.n	800a1a8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	6978      	ldr	r0, [r7, #20]
 800a1b0:	4798      	blx	r3
}
 800a1b2:	bf00      	nop
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20000e68 	.word	0x20000e68

0800a1c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1c8:	f107 0308 	add.w	r3, r7, #8
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 f857 	bl	800a280 <prvGetNextExpireTime>
 800a1d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 f803 	bl	800a1e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1de:	f000 f8d5 	bl	800a38c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1e2:	e7f1      	b.n	800a1c8 <prvTimerTask+0x8>

0800a1e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1ee:	f7ff f951 	bl	8009494 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1f2:	f107 0308 	add.w	r3, r7, #8
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 f866 	bl	800a2c8 <prvSampleTimeNow>
 800a1fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d130      	bne.n	800a266 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <prvProcessTimerOrBlockTask+0x3c>
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d806      	bhi.n	800a220 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a212:	f7ff f94d 	bl	80094b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a216:	68f9      	ldr	r1, [r7, #12]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff ff91 	bl	800a140 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a21e:	e024      	b.n	800a26a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d008      	beq.n	800a238 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a226:	4b13      	ldr	r3, [pc, #76]	; (800a274 <prvProcessTimerOrBlockTask+0x90>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	bf0c      	ite	eq
 800a230:	2301      	moveq	r3, #1
 800a232:	2300      	movne	r3, #0
 800a234:	b2db      	uxtb	r3, r3
 800a236:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a238:	4b0f      	ldr	r3, [pc, #60]	; (800a278 <prvProcessTimerOrBlockTask+0x94>)
 800a23a:	6818      	ldr	r0, [r3, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	4619      	mov	r1, r3
 800a246:	f7fe fec5 	bl	8008fd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a24a:	f7ff f931 	bl	80094b0 <xTaskResumeAll>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a254:	4b09      	ldr	r3, [pc, #36]	; (800a27c <prvProcessTimerOrBlockTask+0x98>)
 800a256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a25a:	601a      	str	r2, [r3, #0]
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	f3bf 8f6f 	isb	sy
}
 800a264:	e001      	b.n	800a26a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a266:	f7ff f923 	bl	80094b0 <xTaskResumeAll>
}
 800a26a:	bf00      	nop
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20000e6c 	.word	0x20000e6c
 800a278:	20000e70 	.word	0x20000e70
 800a27c:	e000ed04 	.word	0xe000ed04

0800a280 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a288:	4b0e      	ldr	r3, [pc, #56]	; (800a2c4 <prvGetNextExpireTime+0x44>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	bf0c      	ite	eq
 800a292:	2301      	moveq	r3, #1
 800a294:	2300      	movne	r3, #0
 800a296:	b2db      	uxtb	r3, r3
 800a298:	461a      	mov	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d105      	bne.n	800a2b2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2a6:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <prvGetNextExpireTime+0x44>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	e001      	b.n	800a2b6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	20000e68 	.word	0x20000e68

0800a2c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a2d0:	f7ff f98a 	bl	80095e8 <xTaskGetTickCount>
 800a2d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	; (800a304 <prvSampleTimeNow+0x3c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d205      	bcs.n	800a2ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2e0:	f000 f904 	bl	800a4ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	601a      	str	r2, [r3, #0]
 800a2ea:	e002      	b.n	800a2f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2f2:	4a04      	ldr	r2, [pc, #16]	; (800a304 <prvSampleTimeNow+0x3c>)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20000e78 	.word	0x20000e78

0800a308 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d812      	bhi.n	800a354 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	1ad2      	subs	r2, r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d302      	bcc.n	800a342 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a33c:	2301      	movs	r3, #1
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	e01b      	b.n	800a37a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a342:	4b10      	ldr	r3, [pc, #64]	; (800a384 <prvInsertTimerInActiveList+0x7c>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3304      	adds	r3, #4
 800a34a:	4619      	mov	r1, r3
 800a34c:	4610      	mov	r0, r2
 800a34e:	f7fd feda 	bl	8008106 <vListInsert>
 800a352:	e012      	b.n	800a37a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d206      	bcs.n	800a36a <prvInsertTimerInActiveList+0x62>
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d302      	bcc.n	800a36a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a364:	2301      	movs	r3, #1
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	e007      	b.n	800a37a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a36a:	4b07      	ldr	r3, [pc, #28]	; (800a388 <prvInsertTimerInActiveList+0x80>)
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3304      	adds	r3, #4
 800a372:	4619      	mov	r1, r3
 800a374:	4610      	mov	r0, r2
 800a376:	f7fd fec6 	bl	8008106 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a37a:	697b      	ldr	r3, [r7, #20]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3718      	adds	r7, #24
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	20000e6c 	.word	0x20000e6c
 800a388:	20000e68 	.word	0x20000e68

0800a38c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08e      	sub	sp, #56	; 0x38
 800a390:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a392:	e099      	b.n	800a4c8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	da17      	bge.n	800a3ca <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a39a:	1d3b      	adds	r3, r7, #4
 800a39c:	3304      	adds	r3, #4
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d109      	bne.n	800a3ba <prvProcessReceivedCommands+0x2e>
 800a3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	61fb      	str	r3, [r7, #28]
 800a3b8:	e7fe      	b.n	800a3b8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3c0:	6850      	ldr	r0, [r2, #4]
 800a3c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3c4:	6892      	ldr	r2, [r2, #8]
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	db7a      	blt.n	800a4c6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d004      	beq.n	800a3e6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fd fec9 	bl	8008178 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff ff6d 	bl	800a2c8 <prvSampleTimeNow>
 800a3ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b09      	cmp	r3, #9
 800a3f4:	d868      	bhi.n	800a4c8 <prvProcessReceivedCommands+0x13c>
 800a3f6:	a201      	add	r2, pc, #4	; (adr r2, 800a3fc <prvProcessReceivedCommands+0x70>)
 800a3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fc:	0800a425 	.word	0x0800a425
 800a400:	0800a425 	.word	0x0800a425
 800a404:	0800a425 	.word	0x0800a425
 800a408:	0800a4c9 	.word	0x0800a4c9
 800a40c:	0800a47f 	.word	0x0800a47f
 800a410:	0800a4b5 	.word	0x0800a4b5
 800a414:	0800a425 	.word	0x0800a425
 800a418:	0800a425 	.word	0x0800a425
 800a41c:	0800a4c9 	.word	0x0800a4c9
 800a420:	0800a47f 	.word	0x0800a47f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	18d1      	adds	r1, r2, r3
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a432:	f7ff ff69 	bl	800a308 <prvInsertTimerInActiveList>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d045      	beq.n	800a4c8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a442:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	69db      	ldr	r3, [r3, #28]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d13d      	bne.n	800a4c8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	441a      	add	r2, r3
 800a454:	2300      	movs	r3, #0
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	2300      	movs	r3, #0
 800a45a:	2100      	movs	r1, #0
 800a45c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a45e:	f7ff fe23 	bl	800a0a8 <xTimerGenericCommand>
 800a462:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d12e      	bne.n	800a4c8 <prvProcessReceivedCommands+0x13c>
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	61bb      	str	r3, [r7, #24]
 800a47c:	e7fe      	b.n	800a47c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d109      	bne.n	800a4a0 <prvProcessReceivedCommands+0x114>
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	617b      	str	r3, [r7, #20]
 800a49e:	e7fe      	b.n	800a49e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	699a      	ldr	r2, [r3, #24]
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	18d1      	adds	r1, r2, r3
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ae:	f7ff ff2b 	bl	800a308 <prvInsertTimerInActiveList>
					break;
 800a4b2:	e009      	b.n	800a4c8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d104      	bne.n	800a4c8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800a4be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c0:	f000 fbb8 	bl	800ac34 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4c4:	e000      	b.n	800a4c8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a4c6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4c8:	4b07      	ldr	r3, [pc, #28]	; (800a4e8 <prvProcessReceivedCommands+0x15c>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	1d39      	adds	r1, r7, #4
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe f9cd 	bl	8008870 <xQueueReceive>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f47f af5b 	bne.w	800a394 <prvProcessReceivedCommands+0x8>
	}
}
 800a4de:	bf00      	nop
 800a4e0:	3730      	adds	r7, #48	; 0x30
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20000e70 	.word	0x20000e70

0800a4ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b088      	sub	sp, #32
 800a4f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4f2:	e044      	b.n	800a57e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4f4:	4b2b      	ldr	r3, [pc, #172]	; (800a5a4 <prvSwitchTimerLists+0xb8>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4fe:	4b29      	ldr	r3, [pc, #164]	; (800a5a4 <prvSwitchTimerLists+0xb8>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	3304      	adds	r3, #4
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fd fe33 	bl	8008178 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d12d      	bne.n	800a57e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	4413      	add	r3, r2
 800a52a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	429a      	cmp	r2, r3
 800a532:	d90e      	bls.n	800a552 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a540:	4b18      	ldr	r3, [pc, #96]	; (800a5a4 <prvSwitchTimerLists+0xb8>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3304      	adds	r3, #4
 800a548:	4619      	mov	r1, r3
 800a54a:	4610      	mov	r0, r2
 800a54c:	f7fd fddb 	bl	8008106 <vListInsert>
 800a550:	e015      	b.n	800a57e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a552:	2300      	movs	r3, #0
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	2300      	movs	r3, #0
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	2100      	movs	r1, #0
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f7ff fda3 	bl	800a0a8 <xTimerGenericCommand>
 800a562:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d109      	bne.n	800a57e <prvSwitchTimerLists+0x92>
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	603b      	str	r3, [r7, #0]
 800a57c:	e7fe      	b.n	800a57c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a57e:	4b09      	ldr	r3, [pc, #36]	; (800a5a4 <prvSwitchTimerLists+0xb8>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1b5      	bne.n	800a4f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a588:	4b06      	ldr	r3, [pc, #24]	; (800a5a4 <prvSwitchTimerLists+0xb8>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a58e:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <prvSwitchTimerLists+0xbc>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a04      	ldr	r2, [pc, #16]	; (800a5a4 <prvSwitchTimerLists+0xb8>)
 800a594:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a596:	4a04      	ldr	r2, [pc, #16]	; (800a5a8 <prvSwitchTimerLists+0xbc>)
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	6013      	str	r3, [r2, #0]
}
 800a59c:	bf00      	nop
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20000e68 	.word	0x20000e68
 800a5a8:	20000e6c 	.word	0x20000e6c

0800a5ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5b2:	f000 f963 	bl	800a87c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5b6:	4b15      	ldr	r3, [pc, #84]	; (800a60c <prvCheckForValidListAndQueue+0x60>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d120      	bne.n	800a600 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5be:	4814      	ldr	r0, [pc, #80]	; (800a610 <prvCheckForValidListAndQueue+0x64>)
 800a5c0:	f7fd fd50 	bl	8008064 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5c4:	4813      	ldr	r0, [pc, #76]	; (800a614 <prvCheckForValidListAndQueue+0x68>)
 800a5c6:	f7fd fd4d 	bl	8008064 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a5ca:	4b13      	ldr	r3, [pc, #76]	; (800a618 <prvCheckForValidListAndQueue+0x6c>)
 800a5cc:	4a10      	ldr	r2, [pc, #64]	; (800a610 <prvCheckForValidListAndQueue+0x64>)
 800a5ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a5d0:	4b12      	ldr	r3, [pc, #72]	; (800a61c <prvCheckForValidListAndQueue+0x70>)
 800a5d2:	4a10      	ldr	r2, [pc, #64]	; (800a614 <prvCheckForValidListAndQueue+0x68>)
 800a5d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	4b11      	ldr	r3, [pc, #68]	; (800a620 <prvCheckForValidListAndQueue+0x74>)
 800a5dc:	4a11      	ldr	r2, [pc, #68]	; (800a624 <prvCheckForValidListAndQueue+0x78>)
 800a5de:	2110      	movs	r1, #16
 800a5e0:	200a      	movs	r0, #10
 800a5e2:	f7fd fe5b 	bl	800829c <xQueueGenericCreateStatic>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	4b08      	ldr	r3, [pc, #32]	; (800a60c <prvCheckForValidListAndQueue+0x60>)
 800a5ea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a5ec:	4b07      	ldr	r3, [pc, #28]	; (800a60c <prvCheckForValidListAndQueue+0x60>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d005      	beq.n	800a600 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a5f4:	4b05      	ldr	r3, [pc, #20]	; (800a60c <prvCheckForValidListAndQueue+0x60>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	490b      	ldr	r1, [pc, #44]	; (800a628 <prvCheckForValidListAndQueue+0x7c>)
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe fcc2 	bl	8008f84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a600:	f000 f96a 	bl	800a8d8 <vPortExitCritical>
}
 800a604:	bf00      	nop
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20000e70 	.word	0x20000e70
 800a610:	20000e40 	.word	0x20000e40
 800a614:	20000e54 	.word	0x20000e54
 800a618:	20000e68 	.word	0x20000e68
 800a61c:	20000e6c 	.word	0x20000e6c
 800a620:	20000f1c 	.word	0x20000f1c
 800a624:	20000e7c 	.word	0x20000e7c
 800a628:	0800affc 	.word	0x0800affc

0800a62c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3b04      	subs	r3, #4
 800a63c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3b04      	subs	r3, #4
 800a64a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f023 0201 	bic.w	r2, r3, #1
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3b04      	subs	r3, #4
 800a65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a65c:	4a0c      	ldr	r2, [pc, #48]	; (800a690 <pxPortInitialiseStack+0x64>)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3b14      	subs	r3, #20
 800a666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3b04      	subs	r3, #4
 800a672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f06f 0202 	mvn.w	r2, #2
 800a67a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	3b20      	subs	r3, #32
 800a680:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a682:	68fb      	ldr	r3, [r7, #12]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	0800a695 	.word	0x0800a695

0800a694 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a69a:	2300      	movs	r3, #0
 800a69c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a69e:	4b11      	ldr	r3, [pc, #68]	; (800a6e4 <prvTaskExitError+0x50>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a6:	d009      	beq.n	800a6bc <prvTaskExitError+0x28>
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	60fb      	str	r3, [r7, #12]
 800a6ba:	e7fe      	b.n	800a6ba <prvTaskExitError+0x26>
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6ce:	bf00      	nop
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0fc      	beq.n	800a6d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6d6:	bf00      	nop
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	20000054 	.word	0x20000054
	...

0800a6f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a6f0:	4b07      	ldr	r3, [pc, #28]	; (800a710 <pxCurrentTCBConst2>)
 800a6f2:	6819      	ldr	r1, [r3, #0]
 800a6f4:	6808      	ldr	r0, [r1, #0]
 800a6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fa:	f380 8809 	msr	PSP, r0
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f04f 0000 	mov.w	r0, #0
 800a706:	f380 8811 	msr	BASEPRI, r0
 800a70a:	4770      	bx	lr
 800a70c:	f3af 8000 	nop.w

0800a710 <pxCurrentTCBConst2>:
 800a710:	20000940 	.word	0x20000940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop

0800a718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a718:	4808      	ldr	r0, [pc, #32]	; (800a73c <prvPortStartFirstTask+0x24>)
 800a71a:	6800      	ldr	r0, [r0, #0]
 800a71c:	6800      	ldr	r0, [r0, #0]
 800a71e:	f380 8808 	msr	MSP, r0
 800a722:	f04f 0000 	mov.w	r0, #0
 800a726:	f380 8814 	msr	CONTROL, r0
 800a72a:	b662      	cpsie	i
 800a72c:	b661      	cpsie	f
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	df00      	svc	0
 800a738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a73a:	bf00      	nop
 800a73c:	e000ed08 	.word	0xe000ed08

0800a740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a746:	4b44      	ldr	r3, [pc, #272]	; (800a858 <xPortStartScheduler+0x118>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a44      	ldr	r2, [pc, #272]	; (800a85c <xPortStartScheduler+0x11c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d109      	bne.n	800a764 <xPortStartScheduler+0x24>
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	613b      	str	r3, [r7, #16]
 800a762:	e7fe      	b.n	800a762 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a764:	4b3c      	ldr	r3, [pc, #240]	; (800a858 <xPortStartScheduler+0x118>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a3d      	ldr	r2, [pc, #244]	; (800a860 <xPortStartScheduler+0x120>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d109      	bne.n	800a782 <xPortStartScheduler+0x42>
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	e7fe      	b.n	800a780 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a782:	4b38      	ldr	r3, [pc, #224]	; (800a864 <xPortStartScheduler+0x124>)
 800a784:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	22ff      	movs	r2, #255	; 0xff
 800a792:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a79c:	78fb      	ldrb	r3, [r7, #3]
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	4b30      	ldr	r3, [pc, #192]	; (800a868 <xPortStartScheduler+0x128>)
 800a7a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7aa:	4b30      	ldr	r3, [pc, #192]	; (800a86c <xPortStartScheduler+0x12c>)
 800a7ac:	2207      	movs	r2, #7
 800a7ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7b0:	e009      	b.n	800a7c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a7b2:	4b2e      	ldr	r3, [pc, #184]	; (800a86c <xPortStartScheduler+0x12c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	4a2c      	ldr	r2, [pc, #176]	; (800a86c <xPortStartScheduler+0x12c>)
 800a7ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a7bc:	78fb      	ldrb	r3, [r7, #3]
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7c6:	78fb      	ldrb	r3, [r7, #3]
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ce:	2b80      	cmp	r3, #128	; 0x80
 800a7d0:	d0ef      	beq.n	800a7b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7d2:	4b26      	ldr	r3, [pc, #152]	; (800a86c <xPortStartScheduler+0x12c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f1c3 0307 	rsb	r3, r3, #7
 800a7da:	2b04      	cmp	r3, #4
 800a7dc:	d009      	beq.n	800a7f2 <xPortStartScheduler+0xb2>
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	60bb      	str	r3, [r7, #8]
 800a7f0:	e7fe      	b.n	800a7f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7f2:	4b1e      	ldr	r3, [pc, #120]	; (800a86c <xPortStartScheduler+0x12c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	021b      	lsls	r3, r3, #8
 800a7f8:	4a1c      	ldr	r2, [pc, #112]	; (800a86c <xPortStartScheduler+0x12c>)
 800a7fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7fc:	4b1b      	ldr	r3, [pc, #108]	; (800a86c <xPortStartScheduler+0x12c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a804:	4a19      	ldr	r2, [pc, #100]	; (800a86c <xPortStartScheduler+0x12c>)
 800a806:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a810:	4b17      	ldr	r3, [pc, #92]	; (800a870 <xPortStartScheduler+0x130>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a16      	ldr	r2, [pc, #88]	; (800a870 <xPortStartScheduler+0x130>)
 800a816:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a81a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a81c:	4b14      	ldr	r3, [pc, #80]	; (800a870 <xPortStartScheduler+0x130>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a13      	ldr	r2, [pc, #76]	; (800a870 <xPortStartScheduler+0x130>)
 800a822:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a826:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a828:	f000 f8d6 	bl	800a9d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a82c:	4b11      	ldr	r3, [pc, #68]	; (800a874 <xPortStartScheduler+0x134>)
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a832:	f000 f8f5 	bl	800aa20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a836:	4b10      	ldr	r3, [pc, #64]	; (800a878 <xPortStartScheduler+0x138>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a0f      	ldr	r2, [pc, #60]	; (800a878 <xPortStartScheduler+0x138>)
 800a83c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a840:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a842:	f7ff ff69 	bl	800a718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a846:	f7fe ff9d 	bl	8009784 <vTaskSwitchContext>
	prvTaskExitError();
 800a84a:	f7ff ff23 	bl	800a694 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	e000ed00 	.word	0xe000ed00
 800a85c:	410fc271 	.word	0x410fc271
 800a860:	410fc270 	.word	0x410fc270
 800a864:	e000e400 	.word	0xe000e400
 800a868:	20000f6c 	.word	0x20000f6c
 800a86c:	20000f70 	.word	0x20000f70
 800a870:	e000ed20 	.word	0xe000ed20
 800a874:	20000054 	.word	0x20000054
 800a878:	e000ef34 	.word	0xe000ef34

0800a87c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a894:	4b0e      	ldr	r3, [pc, #56]	; (800a8d0 <vPortEnterCritical+0x54>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3301      	adds	r3, #1
 800a89a:	4a0d      	ldr	r2, [pc, #52]	; (800a8d0 <vPortEnterCritical+0x54>)
 800a89c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a89e:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <vPortEnterCritical+0x54>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d10e      	bne.n	800a8c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8a6:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <vPortEnterCritical+0x58>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d009      	beq.n	800a8c4 <vPortEnterCritical+0x48>
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	603b      	str	r3, [r7, #0]
 800a8c2:	e7fe      	b.n	800a8c2 <vPortEnterCritical+0x46>
	}
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	20000054 	.word	0x20000054
 800a8d4:	e000ed04 	.word	0xe000ed04

0800a8d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8de:	4b11      	ldr	r3, [pc, #68]	; (800a924 <vPortExitCritical+0x4c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d109      	bne.n	800a8fa <vPortExitCritical+0x22>
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	607b      	str	r3, [r7, #4]
 800a8f8:	e7fe      	b.n	800a8f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a8fa:	4b0a      	ldr	r3, [pc, #40]	; (800a924 <vPortExitCritical+0x4c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	4a08      	ldr	r2, [pc, #32]	; (800a924 <vPortExitCritical+0x4c>)
 800a902:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a904:	4b07      	ldr	r3, [pc, #28]	; (800a924 <vPortExitCritical+0x4c>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d104      	bne.n	800a916 <vPortExitCritical+0x3e>
 800a90c:	2300      	movs	r3, #0
 800a90e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a916:	bf00      	nop
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	20000054 	.word	0x20000054
	...

0800a930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a930:	f3ef 8009 	mrs	r0, PSP
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	4b15      	ldr	r3, [pc, #84]	; (800a990 <pxCurrentTCBConst>)
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	f01e 0f10 	tst.w	lr, #16
 800a940:	bf08      	it	eq
 800a942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94a:	6010      	str	r0, [r2, #0]
 800a94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a950:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a954:	f380 8811 	msr	BASEPRI, r0
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f7fe ff10 	bl	8009784 <vTaskSwitchContext>
 800a964:	f04f 0000 	mov.w	r0, #0
 800a968:	f380 8811 	msr	BASEPRI, r0
 800a96c:	bc09      	pop	{r0, r3}
 800a96e:	6819      	ldr	r1, [r3, #0]
 800a970:	6808      	ldr	r0, [r1, #0]
 800a972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a976:	f01e 0f10 	tst.w	lr, #16
 800a97a:	bf08      	it	eq
 800a97c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a980:	f380 8809 	msr	PSP, r0
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	f3af 8000 	nop.w

0800a990 <pxCurrentTCBConst>:
 800a990:	20000940 	.word	0x20000940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a994:	bf00      	nop
 800a996:	bf00      	nop

0800a998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a9b0:	f7fe fe2a 	bl	8009608 <xTaskIncrementTick>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9ba:	4b06      	ldr	r3, [pc, #24]	; (800a9d4 <SysTick_Handler+0x3c>)
 800a9bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9cc:	bf00      	nop
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	e000ed04 	.word	0xe000ed04

0800a9d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9dc:	4b0b      	ldr	r3, [pc, #44]	; (800aa0c <vPortSetupTimerInterrupt+0x34>)
 800a9de:	2200      	movs	r2, #0
 800a9e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9e2:	4b0b      	ldr	r3, [pc, #44]	; (800aa10 <vPortSetupTimerInterrupt+0x38>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9e8:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <vPortSetupTimerInterrupt+0x3c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a0a      	ldr	r2, [pc, #40]	; (800aa18 <vPortSetupTimerInterrupt+0x40>)
 800a9ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f2:	099b      	lsrs	r3, r3, #6
 800a9f4:	4a09      	ldr	r2, [pc, #36]	; (800aa1c <vPortSetupTimerInterrupt+0x44>)
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9fa:	4b04      	ldr	r3, [pc, #16]	; (800aa0c <vPortSetupTimerInterrupt+0x34>)
 800a9fc:	2207      	movs	r2, #7
 800a9fe:	601a      	str	r2, [r3, #0]
}
 800aa00:	bf00      	nop
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	e000e010 	.word	0xe000e010
 800aa10:	e000e018 	.word	0xe000e018
 800aa14:	20000040 	.word	0x20000040
 800aa18:	10624dd3 	.word	0x10624dd3
 800aa1c:	e000e014 	.word	0xe000e014

0800aa20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa30 <vPortEnableVFP+0x10>
 800aa24:	6801      	ldr	r1, [r0, #0]
 800aa26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa2a:	6001      	str	r1, [r0, #0]
 800aa2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa2e:	bf00      	nop
 800aa30:	e000ed88 	.word	0xe000ed88

0800aa34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa3a:	f3ef 8305 	mrs	r3, IPSR
 800aa3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2b0f      	cmp	r3, #15
 800aa44:	d913      	bls.n	800aa6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa46:	4a16      	ldr	r2, [pc, #88]	; (800aaa0 <vPortValidateInterruptPriority+0x6c>)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa50:	4b14      	ldr	r3, [pc, #80]	; (800aaa4 <vPortValidateInterruptPriority+0x70>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	7afa      	ldrb	r2, [r7, #11]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d209      	bcs.n	800aa6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800aa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5e:	f383 8811 	msr	BASEPRI, r3
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	607b      	str	r3, [r7, #4]
 800aa6c:	e7fe      	b.n	800aa6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa6e:	4b0e      	ldr	r3, [pc, #56]	; (800aaa8 <vPortValidateInterruptPriority+0x74>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa76:	4b0d      	ldr	r3, [pc, #52]	; (800aaac <vPortValidateInterruptPriority+0x78>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d909      	bls.n	800aa92 <vPortValidateInterruptPriority+0x5e>
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	603b      	str	r3, [r7, #0]
 800aa90:	e7fe      	b.n	800aa90 <vPortValidateInterruptPriority+0x5c>
	}
 800aa92:	bf00      	nop
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	e000e3f0 	.word	0xe000e3f0
 800aaa4:	20000f6c 	.word	0x20000f6c
 800aaa8:	e000ed0c 	.word	0xe000ed0c
 800aaac:	20000f70 	.word	0x20000f70

0800aab0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08a      	sub	sp, #40	; 0x28
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aab8:	2300      	movs	r3, #0
 800aaba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aabc:	f7fe fcea 	bl	8009494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aac0:	4b57      	ldr	r3, [pc, #348]	; (800ac20 <pvPortMalloc+0x170>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d101      	bne.n	800aacc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aac8:	f000 f90c 	bl	800ace4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aacc:	4b55      	ldr	r3, [pc, #340]	; (800ac24 <pvPortMalloc+0x174>)
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4013      	ands	r3, r2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f040 808c 	bne.w	800abf2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d01c      	beq.n	800ab1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800aae0:	2208      	movs	r2, #8
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4413      	add	r3, r2
 800aae6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f003 0307 	and.w	r3, r3, #7
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d013      	beq.n	800ab1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f023 0307 	bic.w	r3, r3, #7
 800aaf8:	3308      	adds	r3, #8
 800aafa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d009      	beq.n	800ab1a <pvPortMalloc+0x6a>
 800ab06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	617b      	str	r3, [r7, #20]
 800ab18:	e7fe      	b.n	800ab18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d068      	beq.n	800abf2 <pvPortMalloc+0x142>
 800ab20:	4b41      	ldr	r3, [pc, #260]	; (800ac28 <pvPortMalloc+0x178>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d863      	bhi.n	800abf2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab2a:	4b40      	ldr	r3, [pc, #256]	; (800ac2c <pvPortMalloc+0x17c>)
 800ab2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab2e:	4b3f      	ldr	r3, [pc, #252]	; (800ac2c <pvPortMalloc+0x17c>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab34:	e004      	b.n	800ab40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d903      	bls.n	800ab52 <pvPortMalloc+0xa2>
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1f1      	bne.n	800ab36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab52:	4b33      	ldr	r3, [pc, #204]	; (800ac20 <pvPortMalloc+0x170>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d04a      	beq.n	800abf2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2208      	movs	r2, #8
 800ab62:	4413      	add	r3, r2
 800ab64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	1ad2      	subs	r2, r2, r3
 800ab76:	2308      	movs	r3, #8
 800ab78:	005b      	lsls	r3, r3, #1
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d91e      	bls.n	800abbc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4413      	add	r3, r2
 800ab84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	f003 0307 	and.w	r3, r3, #7
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d009      	beq.n	800aba4 <pvPortMalloc+0xf4>
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	613b      	str	r3, [r7, #16]
 800aba2:	e7fe      	b.n	800aba2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	1ad2      	subs	r2, r2, r3
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abb6:	69b8      	ldr	r0, [r7, #24]
 800abb8:	f000 f8f6 	bl	800ada8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abbc:	4b1a      	ldr	r3, [pc, #104]	; (800ac28 <pvPortMalloc+0x178>)
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	4a18      	ldr	r2, [pc, #96]	; (800ac28 <pvPortMalloc+0x178>)
 800abc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abca:	4b17      	ldr	r3, [pc, #92]	; (800ac28 <pvPortMalloc+0x178>)
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	4b18      	ldr	r3, [pc, #96]	; (800ac30 <pvPortMalloc+0x180>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d203      	bcs.n	800abde <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abd6:	4b14      	ldr	r3, [pc, #80]	; (800ac28 <pvPortMalloc+0x178>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a15      	ldr	r2, [pc, #84]	; (800ac30 <pvPortMalloc+0x180>)
 800abdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	4b10      	ldr	r3, [pc, #64]	; (800ac24 <pvPortMalloc+0x174>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	431a      	orrs	r2, r3
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	2200      	movs	r2, #0
 800abf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800abf2:	f7fe fc5d 	bl	80094b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d009      	beq.n	800ac14 <pvPortMalloc+0x164>
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	60fb      	str	r3, [r7, #12]
 800ac12:	e7fe      	b.n	800ac12 <pvPortMalloc+0x162>
	return pvReturn;
 800ac14:	69fb      	ldr	r3, [r7, #28]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3728      	adds	r7, #40	; 0x28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20004b7c 	.word	0x20004b7c
 800ac24:	20004b88 	.word	0x20004b88
 800ac28:	20004b80 	.word	0x20004b80
 800ac2c:	20004b74 	.word	0x20004b74
 800ac30:	20004b84 	.word	0x20004b84

0800ac34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d046      	beq.n	800acd4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac46:	2308      	movs	r3, #8
 800ac48:	425b      	negs	r3, r3
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	4b20      	ldr	r3, [pc, #128]	; (800acdc <vPortFree+0xa8>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4013      	ands	r3, r2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d109      	bne.n	800ac76 <vPortFree+0x42>
 800ac62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	60fb      	str	r3, [r7, #12]
 800ac74:	e7fe      	b.n	800ac74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d009      	beq.n	800ac92 <vPortFree+0x5e>
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	60bb      	str	r3, [r7, #8]
 800ac90:	e7fe      	b.n	800ac90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	685a      	ldr	r2, [r3, #4]
 800ac96:	4b11      	ldr	r3, [pc, #68]	; (800acdc <vPortFree+0xa8>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d019      	beq.n	800acd4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d115      	bne.n	800acd4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <vPortFree+0xa8>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	43db      	mvns	r3, r3
 800acb2:	401a      	ands	r2, r3
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800acb8:	f7fe fbec 	bl	8009494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	4b07      	ldr	r3, [pc, #28]	; (800ace0 <vPortFree+0xac>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4413      	add	r3, r2
 800acc6:	4a06      	ldr	r2, [pc, #24]	; (800ace0 <vPortFree+0xac>)
 800acc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acca:	6938      	ldr	r0, [r7, #16]
 800accc:	f000 f86c 	bl	800ada8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800acd0:	f7fe fbee 	bl	80094b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800acd4:	bf00      	nop
 800acd6:	3718      	adds	r7, #24
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	20004b88 	.word	0x20004b88
 800ace0:	20004b80 	.word	0x20004b80

0800ace4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800acea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800acee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800acf0:	4b27      	ldr	r3, [pc, #156]	; (800ad90 <prvHeapInit+0xac>)
 800acf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f003 0307 	and.w	r3, r3, #7
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00c      	beq.n	800ad18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3307      	adds	r3, #7
 800ad02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f023 0307 	bic.w	r3, r3, #7
 800ad0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	4a1f      	ldr	r2, [pc, #124]	; (800ad90 <prvHeapInit+0xac>)
 800ad14:	4413      	add	r3, r2
 800ad16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad1c:	4a1d      	ldr	r2, [pc, #116]	; (800ad94 <prvHeapInit+0xb0>)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad22:	4b1c      	ldr	r3, [pc, #112]	; (800ad94 <prvHeapInit+0xb0>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad30:	2208      	movs	r2, #8
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	1a9b      	subs	r3, r3, r2
 800ad36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f023 0307 	bic.w	r3, r3, #7
 800ad3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4a15      	ldr	r2, [pc, #84]	; (800ad98 <prvHeapInit+0xb4>)
 800ad44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad46:	4b14      	ldr	r3, [pc, #80]	; (800ad98 <prvHeapInit+0xb4>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad4e:	4b12      	ldr	r3, [pc, #72]	; (800ad98 <prvHeapInit+0xb4>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	1ad2      	subs	r2, r2, r3
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad64:	4b0c      	ldr	r3, [pc, #48]	; (800ad98 <prvHeapInit+0xb4>)
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	4a0a      	ldr	r2, [pc, #40]	; (800ad9c <prvHeapInit+0xb8>)
 800ad72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	4a09      	ldr	r2, [pc, #36]	; (800ada0 <prvHeapInit+0xbc>)
 800ad7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad7c:	4b09      	ldr	r3, [pc, #36]	; (800ada4 <prvHeapInit+0xc0>)
 800ad7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad82:	601a      	str	r2, [r3, #0]
}
 800ad84:	bf00      	nop
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	20000f74 	.word	0x20000f74
 800ad94:	20004b74 	.word	0x20004b74
 800ad98:	20004b7c 	.word	0x20004b7c
 800ad9c:	20004b84 	.word	0x20004b84
 800ada0:	20004b80 	.word	0x20004b80
 800ada4:	20004b88 	.word	0x20004b88

0800ada8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800adb0:	4b28      	ldr	r3, [pc, #160]	; (800ae54 <prvInsertBlockIntoFreeList+0xac>)
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e002      	b.n	800adbc <prvInsertBlockIntoFreeList+0x14>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d8f7      	bhi.n	800adb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	4413      	add	r3, r2
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	429a      	cmp	r2, r3
 800add6:	d108      	bne.n	800adea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	441a      	add	r2, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	441a      	add	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d118      	bne.n	800ae30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	4b15      	ldr	r3, [pc, #84]	; (800ae58 <prvInsertBlockIntoFreeList+0xb0>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d00d      	beq.n	800ae26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685a      	ldr	r2, [r3, #4]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	441a      	add	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	e008      	b.n	800ae38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae26:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <prvInsertBlockIntoFreeList+0xb0>)
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	e003      	b.n	800ae38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d002      	beq.n	800ae46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae46:	bf00      	nop
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	20004b74 	.word	0x20004b74
 800ae58:	20004b7c 	.word	0x20004b7c

0800ae5c <__libc_init_array>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	4e0d      	ldr	r6, [pc, #52]	; (800ae94 <__libc_init_array+0x38>)
 800ae60:	4c0d      	ldr	r4, [pc, #52]	; (800ae98 <__libc_init_array+0x3c>)
 800ae62:	1ba4      	subs	r4, r4, r6
 800ae64:	10a4      	asrs	r4, r4, #2
 800ae66:	2500      	movs	r5, #0
 800ae68:	42a5      	cmp	r5, r4
 800ae6a:	d109      	bne.n	800ae80 <__libc_init_array+0x24>
 800ae6c:	4e0b      	ldr	r6, [pc, #44]	; (800ae9c <__libc_init_array+0x40>)
 800ae6e:	4c0c      	ldr	r4, [pc, #48]	; (800aea0 <__libc_init_array+0x44>)
 800ae70:	f000 f884 	bl	800af7c <_init>
 800ae74:	1ba4      	subs	r4, r4, r6
 800ae76:	10a4      	asrs	r4, r4, #2
 800ae78:	2500      	movs	r5, #0
 800ae7a:	42a5      	cmp	r5, r4
 800ae7c:	d105      	bne.n	800ae8a <__libc_init_array+0x2e>
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae84:	4798      	blx	r3
 800ae86:	3501      	adds	r5, #1
 800ae88:	e7ee      	b.n	800ae68 <__libc_init_array+0xc>
 800ae8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae8e:	4798      	blx	r3
 800ae90:	3501      	adds	r5, #1
 800ae92:	e7f2      	b.n	800ae7a <__libc_init_array+0x1e>
 800ae94:	0800b8c0 	.word	0x0800b8c0
 800ae98:	0800b8c0 	.word	0x0800b8c0
 800ae9c:	0800b8c0 	.word	0x0800b8c0
 800aea0:	0800b8c4 	.word	0x0800b8c4

0800aea4 <__itoa>:
 800aea4:	1e93      	subs	r3, r2, #2
 800aea6:	2b22      	cmp	r3, #34	; 0x22
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	460c      	mov	r4, r1
 800aeac:	d904      	bls.n	800aeb8 <__itoa+0x14>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	700b      	strb	r3, [r1, #0]
 800aeb2:	461c      	mov	r4, r3
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	bd10      	pop	{r4, pc}
 800aeb8:	2a0a      	cmp	r2, #10
 800aeba:	d109      	bne.n	800aed0 <__itoa+0x2c>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	da07      	bge.n	800aed0 <__itoa+0x2c>
 800aec0:	232d      	movs	r3, #45	; 0x2d
 800aec2:	700b      	strb	r3, [r1, #0]
 800aec4:	4240      	negs	r0, r0
 800aec6:	2101      	movs	r1, #1
 800aec8:	4421      	add	r1, r4
 800aeca:	f000 f819 	bl	800af00 <__utoa>
 800aece:	e7f1      	b.n	800aeb4 <__itoa+0x10>
 800aed0:	2100      	movs	r1, #0
 800aed2:	e7f9      	b.n	800aec8 <__itoa+0x24>

0800aed4 <itoa>:
 800aed4:	f7ff bfe6 	b.w	800aea4 <__itoa>

0800aed8 <memcpy>:
 800aed8:	b510      	push	{r4, lr}
 800aeda:	1e43      	subs	r3, r0, #1
 800aedc:	440a      	add	r2, r1
 800aede:	4291      	cmp	r1, r2
 800aee0:	d100      	bne.n	800aee4 <memcpy+0xc>
 800aee2:	bd10      	pop	{r4, pc}
 800aee4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aeec:	e7f7      	b.n	800aede <memcpy+0x6>

0800aeee <memset>:
 800aeee:	4402      	add	r2, r0
 800aef0:	4603      	mov	r3, r0
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d100      	bne.n	800aef8 <memset+0xa>
 800aef6:	4770      	bx	lr
 800aef8:	f803 1b01 	strb.w	r1, [r3], #1
 800aefc:	e7f9      	b.n	800aef2 <memset+0x4>
	...

0800af00 <__utoa>:
 800af00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af02:	4b1d      	ldr	r3, [pc, #116]	; (800af78 <__utoa+0x78>)
 800af04:	b08b      	sub	sp, #44	; 0x2c
 800af06:	4605      	mov	r5, r0
 800af08:	460c      	mov	r4, r1
 800af0a:	466e      	mov	r6, sp
 800af0c:	f103 0c20 	add.w	ip, r3, #32
 800af10:	6818      	ldr	r0, [r3, #0]
 800af12:	6859      	ldr	r1, [r3, #4]
 800af14:	4637      	mov	r7, r6
 800af16:	c703      	stmia	r7!, {r0, r1}
 800af18:	3308      	adds	r3, #8
 800af1a:	4563      	cmp	r3, ip
 800af1c:	463e      	mov	r6, r7
 800af1e:	d1f7      	bne.n	800af10 <__utoa+0x10>
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	791b      	ldrb	r3, [r3, #4]
 800af24:	713b      	strb	r3, [r7, #4]
 800af26:	1e93      	subs	r3, r2, #2
 800af28:	2b22      	cmp	r3, #34	; 0x22
 800af2a:	6038      	str	r0, [r7, #0]
 800af2c:	f04f 0300 	mov.w	r3, #0
 800af30:	d904      	bls.n	800af3c <__utoa+0x3c>
 800af32:	7023      	strb	r3, [r4, #0]
 800af34:	461c      	mov	r4, r3
 800af36:	4620      	mov	r0, r4
 800af38:	b00b      	add	sp, #44	; 0x2c
 800af3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af3c:	1e66      	subs	r6, r4, #1
 800af3e:	fbb5 f0f2 	udiv	r0, r5, r2
 800af42:	af0a      	add	r7, sp, #40	; 0x28
 800af44:	fb02 5510 	mls	r5, r2, r0, r5
 800af48:	443d      	add	r5, r7
 800af4a:	1c59      	adds	r1, r3, #1
 800af4c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800af50:	f806 5f01 	strb.w	r5, [r6, #1]!
 800af54:	4605      	mov	r5, r0
 800af56:	b968      	cbnz	r0, 800af74 <__utoa+0x74>
 800af58:	5460      	strb	r0, [r4, r1]
 800af5a:	4423      	add	r3, r4
 800af5c:	4622      	mov	r2, r4
 800af5e:	1b19      	subs	r1, r3, r4
 800af60:	1b10      	subs	r0, r2, r4
 800af62:	4281      	cmp	r1, r0
 800af64:	dde7      	ble.n	800af36 <__utoa+0x36>
 800af66:	7811      	ldrb	r1, [r2, #0]
 800af68:	7818      	ldrb	r0, [r3, #0]
 800af6a:	f802 0b01 	strb.w	r0, [r2], #1
 800af6e:	f803 1901 	strb.w	r1, [r3], #-1
 800af72:	e7f4      	b.n	800af5e <__utoa+0x5e>
 800af74:	460b      	mov	r3, r1
 800af76:	e7e2      	b.n	800af3e <__utoa+0x3e>
 800af78:	0800b890 	.word	0x0800b890

0800af7c <_init>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	bf00      	nop
 800af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af82:	bc08      	pop	{r3}
 800af84:	469e      	mov	lr, r3
 800af86:	4770      	bx	lr

0800af88 <_fini>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	bf00      	nop
 800af8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8e:	bc08      	pop	{r3}
 800af90:	469e      	mov	lr, r3
 800af92:	4770      	bx	lr

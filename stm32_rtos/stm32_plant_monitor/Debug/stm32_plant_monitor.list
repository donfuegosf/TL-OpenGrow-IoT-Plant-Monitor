
stm32_plant_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  0800af34  0800af34  0001af34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b858  0800b858  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b858  0800b858  0001b858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b860  0800b860  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b860  0800b860  0001b860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b864  0800b864  0001b864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800b868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de8  2000004c  0800b8b4  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e34  0800b8b4  00024e34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023a63  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004404  00000000  00000000  00043adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d10  00000000  00000000  00047ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b48  00000000  00000000  00049bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005662  00000000  00000000  0004b740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017982  00000000  00000000  00050da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e38ff  00000000  00000000  00068724  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c023  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b6c  00000000  00000000  0014c0a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000004c 	.word	0x2000004c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800af1c 	.word	0x0800af1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000050 	.word	0x20000050
 800020c:	0800af1c 	.word	0x0800af1c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08c      	sub	sp, #48	; 0x30
 8000514:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f001 fbd1 	bl	8001cbc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f909 	bl	8000730 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fa9f 	bl	8000a60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000522:	f000 fa67 	bl	80009f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000526:	f000 f975 	bl	8000814 <MX_ADC1_Init>
  MX_I2C1_Init();
 800052a:	f000 f9d3 	bl	80008d4 <MX_I2C1_Init>
  MX_SPI2_Init();
 800052e:	f000 f9ff 	bl	8000930 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000532:	f000 fa35 	bl	80009a0 <MX_USART2_UART_Init>

  /* Initialize OLED display */
  configASSERT(SSD1306_Init() == SSD1306_OK);
 8000536:	f001 f945 	bl	80017c4 <SSD1306_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b01      	cmp	r3, #1
 800053e:	d009      	beq.n	8000554 <main+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000544:	f383 8811 	msr	BASEPRI, r3
 8000548:	f3bf 8f6f 	isb	sy
 800054c:	f3bf 8f4f 	dsb	sy
 8000550:	623b      	str	r3, [r7, #32]
 8000552:	e7fe      	b.n	8000552 <main+0x42>

  /* Binary semaphores */
  Sensor_Sema_Handle = xSemaphoreCreateBinary();
 8000554:	2203      	movs	r2, #3
 8000556:	2100      	movs	r1, #0
 8000558:	2001      	movs	r0, #1
 800055a:	f007 fee1 	bl	8008320 <xQueueGenericCreate>
 800055e:	4602      	mov	r2, r0
 8000560:	4b5e      	ldr	r3, [pc, #376]	; (80006dc <main+0x1cc>)
 8000562:	601a      	str	r2, [r3, #0]
  Oled_Buffer_Sema_Handle = xSemaphoreCreateBinary();
 8000564:	2203      	movs	r2, #3
 8000566:	2100      	movs	r1, #0
 8000568:	2001      	movs	r0, #1
 800056a:	f007 fed9 	bl	8008320 <xQueueGenericCreate>
 800056e:	4602      	mov	r2, r0
 8000570:	4b5b      	ldr	r3, [pc, #364]	; (80006e0 <main+0x1d0>)
 8000572:	601a      	str	r2, [r3, #0]
  Setpoint_Sema_Handle = xSemaphoreCreateBinary();
 8000574:	2203      	movs	r2, #3
 8000576:	2100      	movs	r1, #0
 8000578:	2001      	movs	r0, #1
 800057a:	f007 fed1 	bl	8008320 <xQueueGenericCreate>
 800057e:	4602      	mov	r2, r0
 8000580:	4b58      	ldr	r3, [pc, #352]	; (80006e4 <main+0x1d4>)
 8000582:	601a      	str	r2, [r3, #0]
  Tolerance_Sema_Handle = xSemaphoreCreateBinary();
 8000584:	2203      	movs	r2, #3
 8000586:	2100      	movs	r1, #0
 8000588:	2001      	movs	r0, #1
 800058a:	f007 fec9 	bl	8008320 <xQueueGenericCreate>
 800058e:	4602      	mov	r2, r0
 8000590:	4b55      	ldr	r3, [pc, #340]	; (80006e8 <main+0x1d8>)
 8000592:	601a      	str	r2, [r3, #0]

  /* Assert correct initialization of semaphores */
  configASSERT(Sensor_Sema_Handle && Oled_Buffer_Sema_Handle && Setpoint_Sema_Handle && Tolerance_Sema_Handle);
 8000594:	4b51      	ldr	r3, [pc, #324]	; (80006dc <main+0x1cc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00d      	beq.n	80005b8 <main+0xa8>
 800059c:	4b50      	ldr	r3, [pc, #320]	; (80006e0 <main+0x1d0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d009      	beq.n	80005b8 <main+0xa8>
 80005a4:	4b4f      	ldr	r3, [pc, #316]	; (80006e4 <main+0x1d4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d005      	beq.n	80005b8 <main+0xa8>
 80005ac:	4b4e      	ldr	r3, [pc, #312]	; (80006e8 <main+0x1d8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <main+0xa8>
 80005b4:	2301      	movs	r3, #1
 80005b6:	e000      	b.n	80005ba <main+0xaa>
 80005b8:	2300      	movs	r3, #0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d109      	bne.n	80005d2 <main+0xc2>
 80005be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c2:	f383 8811 	msr	BASEPRI, r3
 80005c6:	f3bf 8f6f 	isb	sy
 80005ca:	f3bf 8f4f 	dsb	sy
 80005ce:	61fb      	str	r3, [r7, #28]
 80005d0:	e7fe      	b.n	80005d0 <main+0xc0>

  /* Initialize semaphore by giving */
  xSemaphoreGive(Sensor_Sema_Handle);
 80005d2:	4b42      	ldr	r3, [pc, #264]	; (80006dc <main+0x1cc>)
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	f007 ff00 	bl	80083e0 <xQueueGenericSend>
  xSemaphoreGive(Oled_Buffer_Sema_Handle);
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <main+0x1d0>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	f007 fef9 	bl	80083e0 <xQueueGenericSend>
  xSemaphoreGive(Setpoint_Sema_Handle);
 80005ee:	4b3d      	ldr	r3, [pc, #244]	; (80006e4 <main+0x1d4>)
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	f007 fef2 	bl	80083e0 <xQueueGenericSend>
  xSemaphoreGive(Tolerance_Sema_Handle);
 80005fc:	4b3a      	ldr	r3, [pc, #232]	; (80006e8 <main+0x1d8>)
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	f007 feeb 	bl	80083e0 <xQueueGenericSend>
  TaskHandle_t OLED_Bitmap_Flip_TaskHandle;
  TaskHandle_t Water_Plant_TaskHandle;
  TaskHandle_t Flash_Update_TaskHandle;

  /* Register tasks (each with 128 byte stack size) */
  xTaskCreate(Sensor_Read, "Sensor_Read", 32, NULL, 8, &Sensor_Read_TaskHandle);
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	2308      	movs	r3, #8
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	2220      	movs	r2, #32
 8000618:	4934      	ldr	r1, [pc, #208]	; (80006ec <main+0x1dc>)
 800061a:	4835      	ldr	r0, [pc, #212]	; (80006f0 <main+0x1e0>)
 800061c:	f008 fd37 	bl	800908e <xTaskCreate>
  xTaskCreate(OLED_Update, "OLED_Update", 32, NULL, 5, &OLED_Update_TaskHandle);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2305      	movs	r3, #5
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	2220      	movs	r2, #32
 800062e:	4931      	ldr	r1, [pc, #196]	; (80006f4 <main+0x1e4>)
 8000630:	4831      	ldr	r0, [pc, #196]	; (80006f8 <main+0x1e8>)
 8000632:	f008 fd2c 	bl	800908e <xTaskCreate>
  xTaskCreate(OLED_Data_Write, "OLED_Data_Write", 64, NULL, 7, &OLED_Data_Write_TaskHandle);
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2307      	movs	r3, #7
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2300      	movs	r3, #0
 8000642:	2240      	movs	r2, #64	; 0x40
 8000644:	492d      	ldr	r1, [pc, #180]	; (80006fc <main+0x1ec>)
 8000646:	482e      	ldr	r0, [pc, #184]	; (8000700 <main+0x1f0>)
 8000648:	f008 fd21 	bl	800908e <xTaskCreate>
  xTaskCreate(OLED_Bitmap_Flip, "OLED_Bitmap_Flip", 32, NULL, 6, &OLED_Bitmap_Flip_TaskHandle);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2306      	movs	r3, #6
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2300      	movs	r3, #0
 8000658:	2220      	movs	r2, #32
 800065a:	492a      	ldr	r1, [pc, #168]	; (8000704 <main+0x1f4>)
 800065c:	482a      	ldr	r0, [pc, #168]	; (8000708 <main+0x1f8>)
 800065e:	f008 fd16 	bl	800908e <xTaskCreate>
  xTaskCreate(Water_Plant, "Water_Plant", 32, NULL, 10, &Water_Plant_TaskHandle);
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	230a      	movs	r3, #10
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	2220      	movs	r2, #32
 8000670:	4926      	ldr	r1, [pc, #152]	; (800070c <main+0x1fc>)
 8000672:	4827      	ldr	r0, [pc, #156]	; (8000710 <main+0x200>)
 8000674:	f008 fd0b 	bl	800908e <xTaskCreate>
  xTaskCreate(Flash_Update, "Flash_Update", 32, NULL, 9, &Flash_Update_TaskHandle);
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2309      	movs	r3, #9
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	2220      	movs	r2, #32
 8000684:	4923      	ldr	r1, [pc, #140]	; (8000714 <main+0x204>)
 8000686:	4824      	ldr	r0, [pc, #144]	; (8000718 <main+0x208>)
 8000688:	f008 fd01 	bl	800908e <xTaskCreate>

  /* Read the control data values from flash memory (or load default if blank) */
  HAL_FLASH_Unlock();
 800068c:	f002 fd9c 	bl	80031c8 <HAL_FLASH_Unlock>
  uint16_t* flashCtrlData = (uint16_t*)FLASH_CONTROL_DATA_ADDR;
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <main+0x20c>)
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  moistureSetpoint = flashCtrlData[0] == 0xFFFF ? PLANT_SETPOINT_DEFAULT : flashCtrlData[0];
 8000694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069c:	4293      	cmp	r3, r2
 800069e:	d002      	beq.n	80006a6 <main+0x196>
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	e001      	b.n	80006aa <main+0x19a>
 80006a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006aa:	4a1d      	ldr	r2, [pc, #116]	; (8000720 <main+0x210>)
 80006ac:	8013      	strh	r3, [r2, #0]
  moistureTolerance = flashCtrlData[1] == 0xFFFF ? PLANT_TOLERANCE_DEFAULT : flashCtrlData[1];
 80006ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b0:	3302      	adds	r3, #2
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d002      	beq.n	80006c2 <main+0x1b2>
 80006bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006be:	885b      	ldrh	r3, [r3, #2]
 80006c0:	e000      	b.n	80006c4 <main+0x1b4>
 80006c2:	2396      	movs	r3, #150	; 0x96
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <main+0x214>)
 80006c6:	8013      	strh	r3, [r2, #0]
  HAL_FLASH_Lock();
 80006c8:	f002 fda0 	bl	800320c <HAL_FLASH_Lock>

  /* Listen for commands from ESP I2C master (Need to always be listening for this) */
  HAL_I2C_Slave_Receive_IT(&hi2c1, &espCmdCode, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	4916      	ldr	r1, [pc, #88]	; (8000728 <main+0x218>)
 80006d0:	4816      	ldr	r0, [pc, #88]	; (800072c <main+0x21c>)
 80006d2:	f003 fc59 	bl	8003f88 <HAL_I2C_Slave_Receive_IT>

  /* Start scheduler */
  vTaskStartScheduler();
 80006d6:	f008 fe49 	bl	800936c <vTaskStartScheduler>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006da:	e7fe      	b.n	80006da <main+0x1ca>
 80006dc:	20004c30 	.word	0x20004c30
 80006e0:	20004bcc 	.word	0x20004bcc
 80006e4:	20004c7c 	.word	0x20004c7c
 80006e8:	20004c2c 	.word	0x20004c2c
 80006ec:	0800af34 	.word	0x0800af34
 80006f0:	08000da1 	.word	0x08000da1
 80006f4:	0800af40 	.word	0x0800af40
 80006f8:	08000b5d 	.word	0x08000b5d
 80006fc:	0800af4c 	.word	0x0800af4c
 8000700:	08000c09 	.word	0x08000c09
 8000704:	0800af5c 	.word	0x0800af5c
 8000708:	08000b89 	.word	0x08000b89
 800070c:	0800af70 	.word	0x0800af70
 8000710:	08000ddd 	.word	0x08000ddd
 8000714:	0800af7c 	.word	0x0800af7c
 8000718:	08000ef1 	.word	0x08000ef1
 800071c:	08060000 	.word	0x08060000
 8000720:	20004d20 	.word	0x20004d20
 8000724:	20004d8c 	.word	0x20004d8c
 8000728:	20004bc8 	.word	0x20004bc8
 800072c:	20004b74 	.word	0x20004b74

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00a fba5 	bl	800ae8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b2c      	ldr	r3, [pc, #176]	; (800080c <SystemClock_Config+0xdc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a2b      	ldr	r2, [pc, #172]	; (800080c <SystemClock_Config+0xdc>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <SystemClock_Config+0xdc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <SystemClock_Config+0xe0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a25      	ldr	r2, [pc, #148]	; (8000810 <SystemClock_Config+0xe0>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <SystemClock_Config+0xe0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	2302      	movs	r3, #2
 800078e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	2310      	movs	r3, #16
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007a4:	23b4      	movs	r3, #180	; 0xb4
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4618      	mov	r0, r3
 80007ba:	f005 fca3 	bl	8006104 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c4:	f000 fc8a 	bl	80010dc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c8:	f005 f9ae 	bl	8005b28 <HAL_PWREx_EnableOverDrive>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007d2:	f000 fc83 	bl	80010dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2105      	movs	r1, #5
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 f9e7 	bl	8005bc8 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000800:	f000 fc6c 	bl	80010dc <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	; 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000826:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <MX_ADC1_Init+0xb4>)
 8000828:	4a28      	ldr	r2, [pc, #160]	; (80008cc <MX_ADC1_Init+0xb8>)
 800082a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800082c:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_ADC1_Init+0xb4>)
 800082e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000832:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_ADC1_Init+0xb4>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_ADC1_Init+0xb4>)
 800083c:	2201      	movs	r2, #1
 800083e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_ADC1_Init+0xb4>)
 8000842:	2200      	movs	r2, #0
 8000844:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_ADC1_Init+0xb4>)
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_ADC1_Init+0xb4>)
 8000850:	2200      	movs	r2, #0
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_ADC1_Init+0xb4>)
 8000856:	4a1e      	ldr	r2, [pc, #120]	; (80008d0 <MX_ADC1_Init+0xbc>)
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_ADC1_Init+0xb4>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_ADC1_Init+0xb4>)
 8000862:	2202      	movs	r2, #2
 8000864:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_ADC1_Init+0xb4>)
 8000868:	2201      	movs	r2, #1
 800086a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_ADC1_Init+0xb4>)
 8000870:	2201      	movs	r2, #1
 8000872:	615a      	str	r2, [r3, #20]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000874:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MX_ADC1_Init+0xb4>)
 8000876:	f001 fa85 	bl	8001d84 <HAL_ADC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 fc2c 	bl	80010dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. */
  sConfig.Channel = ADC_CHANNEL_0;
 8000884:	2300      	movs	r3, #0
 8000886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_ADC1_Init+0xb4>)
 8000896:	f001 fd09 	bl	80022ac <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008a0:	f000 fc1c 	bl	80010dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. */
  sConfig.Channel = ADC_CHANNEL_1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_ADC1_Init+0xb4>)
 80008b2:	f001 fcfb 	bl	80022ac <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008bc:	f000 fc0e 	bl	80010dc <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20004c34 	.word	0x20004c34
 80008cc:	40012000 	.word	0x40012000
 80008d0:	0f000001 	.word	0x0f000001

080008d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2C1_Init+0x50>)
 80008da:	4a13      	ldr	r2, [pc, #76]	; (8000928 <MX_I2C1_Init+0x54>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_I2C1_Init+0x50>)
 80008e0:	4a12      	ldr	r2, [pc, #72]	; (800092c <MX_I2C1_Init+0x58>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_I2C1_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = STM32_I2C_ADDR;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_I2C1_Init+0x50>)
 80008ec:	22d0      	movs	r2, #208	; 0xd0
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_I2C1_Init+0x50>)
 80008f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_I2C1_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_I2C1_Init+0x50>)
 8000912:	f002 ffe1 	bl	80038d8 <HAL_I2C_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800091c:	f000 fbde 	bl	80010dc <Error_Handler>
  }
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20004b74 	.word	0x20004b74
 8000928:	40005400 	.word	0x40005400
 800092c:	000186a0 	.word	0x000186a0

08000930 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  Spi_ssd1306Write.Instance = SPI2;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_SPI2_Init+0x68>)
 8000936:	4a19      	ldr	r2, [pc, #100]	; (800099c <MX_SPI2_Init+0x6c>)
 8000938:	601a      	str	r2, [r3, #0]
  Spi_ssd1306Write.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_SPI2_Init+0x68>)
 800093c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000940:	605a      	str	r2, [r3, #4]
  Spi_ssd1306Write.Init.Direction = SPI_DIRECTION_1LINE;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_SPI2_Init+0x68>)
 8000944:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000948:	609a      	str	r2, [r3, #8]
  Spi_ssd1306Write.Init.DataSize = SPI_DATASIZE_8BIT;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_SPI2_Init+0x68>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  Spi_ssd1306Write.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_SPI2_Init+0x68>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  Spi_ssd1306Write.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_SPI2_Init+0x68>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  Spi_ssd1306Write.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_SPI2_Init+0x68>)
 800095e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000962:	619a      	str	r2, [r3, #24]
  Spi_ssd1306Write.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_SPI2_Init+0x68>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  Spi_ssd1306Write.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_SPI2_Init+0x68>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  Spi_ssd1306Write.Init.TIMode = SPI_TIMODE_DISABLE;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_SPI2_Init+0x68>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  Spi_ssd1306Write.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_SPI2_Init+0x68>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  Spi_ssd1306Write.Init.CRCPolynomial = 10;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_SPI2_Init+0x68>)
 800097e:	220a      	movs	r2, #10
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_SPI_Init(&Spi_ssd1306Write) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_SPI2_Init+0x68>)
 8000984:	f005 fe18 	bl	80065b8 <HAL_SPI_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800098e:	f000 fba5 	bl	80010dc <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20004bd0 	.word	0x20004bd0
 800099c:	40003800 	.word	0x40003800

080009a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_USART2_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 14400;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ac:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d8:	f006 fcd6 	bl	8007388 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f000 fb7b 	bl	80010dc <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20004ce0 	.word	0x20004ce0
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_DMA_Init+0x68>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <MX_DMA_Init+0x68>)
 8000a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_DMA_Init+0x68>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_DMA_Init+0x68>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <MX_DMA_Init+0x68>)
 8000a20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_DMA_Init+0x68>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2105      	movs	r1, #5
 8000a36:	200f      	movs	r0, #15
 8000a38:	f001 ffaa 	bl	8002990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a3c:	200f      	movs	r0, #15
 8000a3e:	f001 ffc3 	bl	80029c8 <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2105      	movs	r1, #5
 8000a46:	2038      	movs	r0, #56	; 0x38
 8000a48:	f001 ffa2 	bl	8002990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a4c:	2038      	movs	r0, #56	; 0x38
 8000a4e:	f001 ffbb 	bl	80029c8 <HAL_NVIC_EnableIRQ>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <MX_GPIO_Init+0xec>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a33      	ldr	r2, [pc, #204]	; (8000b4c <MX_GPIO_Init+0xec>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <MX_GPIO_Init+0xec>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <MX_GPIO_Init+0xec>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a2c      	ldr	r2, [pc, #176]	; (8000b4c <MX_GPIO_Init+0xec>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <MX_GPIO_Init+0xec>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <MX_GPIO_Init+0xec>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a25      	ldr	r2, [pc, #148]	; (8000b4c <MX_GPIO_Init+0xec>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <MX_GPIO_Init+0xec>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2120      	movs	r1, #32
 8000ace:	4820      	ldr	r0, [pc, #128]	; (8000b50 <MX_GPIO_Init+0xf0>)
 8000ad0:	f002 fec4 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000ada:	481e      	ldr	r0, [pc, #120]	; (8000b54 <MX_GPIO_Init+0xf4>)
 8000adc:	f002 febe 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_GPIO_Init+0xf8>)
 8000ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4817      	ldr	r0, [pc, #92]	; (8000b54 <MX_GPIO_Init+0xf4>)
 8000af6:	f002 fd1f 	bl	8003538 <HAL_GPIO_Init>

  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2105      	movs	r1, #5
 8000afe:	2028      	movs	r0, #40	; 0x28
 8000b00:	f001 ff46 	bl	8002990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b04:	2028      	movs	r0, #40	; 0x28
 8000b06:	f001 ff5f 	bl	80029c8 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <MX_GPIO_Init+0xf0>)
 8000b22:	f002 fd09 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000b26:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_GPIO_Init+0xf4>)
 8000b40:	f002 fcfa 	bl	8003538 <HAL_GPIO_Init>

}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000
 8000b54:	40020800 	.word	0x40020800
 8000b58:	10210000 	.word	0x10210000

08000b5c <OLED_Update>:
  * @brief  Update the OLED screen by writing contents of the buffer.
  * @param  argument: Not used
  * @retval None
  */
void OLED_Update(void *pvParameters)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if ( xSemaphoreTake( Oled_Buffer_Sema_Handle, (TickType_t) 0 ) == pdTRUE )
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <OLED_Update+0x28>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f007 ff2c 	bl	80089c8 <xQueueSemaphoreTake>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d101      	bne.n	8000b7a <OLED_Update+0x1e>
		{
			SSD1306_UpdateScreen();
 8000b76:	f000 feed 	bl	8001954 <SSD1306_UpdateScreen>
		}

		vTaskDelay(50);
 8000b7a:	2032      	movs	r0, #50	; 0x32
 8000b7c:	f008 fbc2 	bl	8009304 <vTaskDelay>
		if ( xSemaphoreTake( Oled_Buffer_Sema_Handle, (TickType_t) 0 ) == pdTRUE )
 8000b80:	e7f0      	b.n	8000b64 <OLED_Update+0x8>
 8000b82:	bf00      	nop
 8000b84:	20004bcc 	.word	0x20004bcc

08000b88 <OLED_Bitmap_Flip>:
  * @brief  Switch between the 2 bitmaps on OLED display.
  * @param  argument: Not used
  * @retval None
  */
void OLED_Bitmap_Flip(void *pvParameters)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		static bool sudoFlip = true;

		if (xSemaphoreTake( Oled_Buffer_Sema_Handle, (TickType_t) 10 ) == pdTRUE )
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <OLED_Bitmap_Flip+0x70>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	210a      	movs	r1, #10
 8000b96:	4618      	mov	r0, r3
 8000b98:	f007 ff16 	bl	80089c8 <xQueueSemaphoreTake>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d125      	bne.n	8000bee <OLED_Bitmap_Flip+0x66>
		{
			SSD1306_DrawBitmap(0, 0, sudoFlip ? sudowoodopose1 : sudowoodopose2, 32, 32, SSD1306_PX_CLR_WHITE);
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <OLED_Bitmap_Flip+0x74>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <OLED_Bitmap_Flip+0x26>
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <OLED_Bitmap_Flip+0x78>)
 8000bac:	e000      	b.n	8000bb0 <OLED_Bitmap_Flip+0x28>
 8000bae:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <OLED_Bitmap_Flip+0x7c>)
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2320      	movs	r3, #32
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 fd8a 	bl	80016d6 <SSD1306_DrawBitmap>

			sudoFlip = !sudoFlip;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <OLED_Bitmap_Flip+0x74>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	bf14      	ite	ne
 8000bca:	2301      	movne	r3, #1
 8000bcc:	2300      	moveq	r3, #0
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	f083 0301 	eor.w	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <OLED_Bitmap_Flip+0x74>)
 8000bde:	701a      	strb	r2, [r3, #0]

			xSemaphoreGive(Oled_Buffer_Sema_Handle);
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <OLED_Bitmap_Flip+0x70>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	2300      	movs	r3, #0
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	f007 fbf9 	bl	80083e0 <xQueueGenericSend>
		}

		vTaskDelay(1000);
 8000bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf2:	f008 fb87 	bl	8009304 <vTaskDelay>
	{
 8000bf6:	e7cb      	b.n	8000b90 <OLED_Bitmap_Flip+0x8>
 8000bf8:	20004bcc 	.word	0x20004bcc
 8000bfc:	20000032 	.word	0x20000032
 8000c00:	0800afa4 	.word	0x0800afa4
 8000c04:	0800b024 	.word	0x0800b024

08000c08 <OLED_Data_Write>:
  * @brief  Function implementing the Update_OLED thread.
  * @param  argument: Not used
  * @retval None
  */
void OLED_Data_Write(void *pvParameters)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
		static bool isCtrlDisplay = false;

		/* String buffers to display on OLED screen */
		char *topDisp, *btmDisp;

		if (isCtrlDisplay) {
 8000c10:	4b51      	ldr	r3, [pc, #324]	; (8000d58 <OLED_Data_Write+0x150>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d034      	beq.n	8000c82 <OLED_Data_Write+0x7a>
			/* Append sensor values to display string */
			if( xSemaphoreTake( Setpoint_Sema_Handle, (TickType_t) 10 ) == pdTRUE &&  xSemaphoreTake( Tolerance_Sema_Handle, (TickType_t) 10 ) == pdTRUE)
 8000c18:	4b50      	ldr	r3, [pc, #320]	; (8000d5c <OLED_Data_Write+0x154>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	210a      	movs	r1, #10
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f007 fed2 	bl	80089c8 <xQueueSemaphoreTake>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d126      	bne.n	8000c78 <OLED_Data_Write+0x70>
 8000c2a:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <OLED_Data_Write+0x158>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	210a      	movs	r1, #10
 8000c30:	4618      	mov	r0, r3
 8000c32:	f007 fec9 	bl	80089c8 <xQueueSemaphoreTake>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d11d      	bne.n	8000c78 <OLED_Data_Write+0x70>
			{
				itoa(moistureSetpoint, setpointDisp + 7, 10);
 8000c3c:	4b49      	ldr	r3, [pc, #292]	; (8000d64 <OLED_Data_Write+0x15c>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <OLED_Data_Write+0x160>)
 8000c44:	220a      	movs	r2, #10
 8000c46:	4619      	mov	r1, r3
 8000c48:	f00a f914 	bl	800ae74 <itoa>
				itoa(moistureTolerance, toleranceDisp + 7, 10);
 8000c4c:	4b47      	ldr	r3, [pc, #284]	; (8000d6c <OLED_Data_Write+0x164>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	4b47      	ldr	r3, [pc, #284]	; (8000d70 <OLED_Data_Write+0x168>)
 8000c54:	220a      	movs	r2, #10
 8000c56:	4619      	mov	r1, r3
 8000c58:	f00a f90c 	bl	800ae74 <itoa>

				xSemaphoreGive(Setpoint_Sema_Handle);
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <OLED_Data_Write+0x154>)
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	2300      	movs	r3, #0
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	f007 fbbb 	bl	80083e0 <xQueueGenericSend>
				xSemaphoreGive(Tolerance_Sema_Handle);
 8000c6a:	4b3d      	ldr	r3, [pc, #244]	; (8000d60 <OLED_Data_Write+0x158>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	f007 fbb4 	bl	80083e0 <xQueueGenericSend>
			}

			topDisp = setpointDisp;
 8000c78:	4b3e      	ldr	r3, [pc, #248]	; (8000d74 <OLED_Data_Write+0x16c>)
 8000c7a:	60fb      	str	r3, [r7, #12]
			btmDisp = toleranceDisp;
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <OLED_Data_Write+0x170>)
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	e023      	b.n	8000cca <OLED_Data_Write+0xc2>
		}
		else
		{
			/* Append sensor values to display string */
			if( xSemaphoreTake( Sensor_Sema_Handle, (TickType_t) 10 ) == pdTRUE  )
 8000c82:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <OLED_Data_Write+0x174>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	210a      	movs	r1, #10
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f007 fe9d 	bl	80089c8 <xQueueSemaphoreTake>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d116      	bne.n	8000cc2 <OLED_Data_Write+0xba>
			{
				itoa(plant_sensors[0], soilMoistureDisp + 6, 10);
 8000c94:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <OLED_Data_Write+0x178>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <OLED_Data_Write+0x17c>)
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f00a f8e8 	bl	800ae74 <itoa>
				itoa(plant_sensors[1], lightLevelDisp + 7, 10);
 8000ca4:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <OLED_Data_Write+0x178>)
 8000ca6:	885b      	ldrh	r3, [r3, #2]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <OLED_Data_Write+0x180>)
 8000cac:	220a      	movs	r2, #10
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f00a f8e0 	bl	800ae74 <itoa>

				xSemaphoreGive(Sensor_Sema_Handle);
 8000cb4:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <OLED_Data_Write+0x174>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	f007 fb8f 	bl	80083e0 <xQueueGenericSend>
			}

			topDisp = soilMoistureDisp;
 8000cc2:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <OLED_Data_Write+0x184>)
 8000cc4:	60fb      	str	r3, [r7, #12]
			btmDisp = lightLevelDisp;
 8000cc6:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <OLED_Data_Write+0x188>)
 8000cc8:	60bb      	str	r3, [r7, #8]
		}


		/* Write sensor values to OLED buffer */
		if (xSemaphoreTake( Oled_Buffer_Sema_Handle, (TickType_t) 10 ) == pdTRUE )
 8000cca:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <OLED_Data_Write+0x18c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	210a      	movs	r1, #10
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f007 fe79 	bl	80089c8 <xQueueSemaphoreTake>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d11c      	bne.n	8000d16 <OLED_Data_Write+0x10e>
		{
			SSD1306_Fill_ToRight(40, SSD1306_PX_CLR_BLACK);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2028      	movs	r0, #40	; 0x28
 8000ce0:	f000 fe5a 	bl	8001998 <SSD1306_Fill_ToRight>

			SSD1306_GotoXY(40, 5);
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	2028      	movs	r0, #40	; 0x28
 8000ce8:	f000 fee0 	bl	8001aac <SSD1306_GotoXY>
			SSD1306_Puts(topDisp, &Font_7x10, SSD1306_PX_CLR_WHITE);
 8000cec:	2201      	movs	r2, #1
 8000cee:	492a      	ldr	r1, [pc, #168]	; (8000d98 <OLED_Data_Write+0x190>)
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f000 ff71 	bl	8001bd8 <SSD1306_Puts>
			SSD1306_GotoXY(40, 21);
 8000cf6:	2115      	movs	r1, #21
 8000cf8:	2028      	movs	r0, #40	; 0x28
 8000cfa:	f000 fed7 	bl	8001aac <SSD1306_GotoXY>
			SSD1306_Puts(btmDisp, &Font_7x10, SSD1306_PX_CLR_WHITE);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4925      	ldr	r1, [pc, #148]	; (8000d98 <OLED_Data_Write+0x190>)
 8000d02:	68b8      	ldr	r0, [r7, #8]
 8000d04:	f000 ff68 	bl	8001bd8 <SSD1306_Puts>

			xSemaphoreGive(Oled_Buffer_Sema_Handle);
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <OLED_Data_Write+0x18c>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	f007 fb65 	bl	80083e0 <xQueueGenericSend>
		}

		if (++cntTimer >= 100) {
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <OLED_Data_Write+0x194>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <OLED_Data_Write+0x194>)
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <OLED_Data_Write+0x194>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b63      	cmp	r3, #99	; 0x63
 8000d28:	d911      	bls.n	8000d4e <OLED_Data_Write+0x146>
			isCtrlDisplay = !isCtrlDisplay;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <OLED_Data_Write+0x150>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	bf14      	ite	ne
 8000d32:	2301      	movne	r3, #1
 8000d34:	2300      	moveq	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	f083 0301 	eor.w	r3, r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <OLED_Data_Write+0x150>)
 8000d46:	701a      	strb	r2, [r3, #0]
			cntTimer = 0;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <OLED_Data_Write+0x194>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
		}

		vTaskDelay(700);
 8000d4e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000d52:	f008 fad7 	bl	8009304 <vTaskDelay>
	{
 8000d56:	e75b      	b.n	8000c10 <OLED_Data_Write+0x8>
 8000d58:	2000006c 	.word	0x2000006c
 8000d5c:	20004c7c 	.word	0x20004c7c
 8000d60:	20004c2c 	.word	0x20004c2c
 8000d64:	20004d20 	.word	0x20004d20
 8000d68:	2000001f 	.word	0x2000001f
 8000d6c:	20004d8c 	.word	0x20004d8c
 8000d70:	2000002b 	.word	0x2000002b
 8000d74:	20000018 	.word	0x20000018
 8000d78:	20000024 	.word	0x20000024
 8000d7c:	20004c30 	.word	0x20004c30
 8000d80:	20004c28 	.word	0x20004c28
 8000d84:	20000006 	.word	0x20000006
 8000d88:	20000013 	.word	0x20000013
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	2000000c 	.word	0x2000000c
 8000d94:	20004bcc 	.word	0x20004bcc
 8000d98:	20000038 	.word	0x20000038
 8000d9c:	2000006d 	.word	0x2000006d

08000da0 <Sensor_Read>:
* @brief Take analog readings from capacitive soil moisture sensor and photoresistor circuit.
* @param argument: Not used
* @retval None
*/
void Sensor_Read(void *pvParameters)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		/* Read value from ADCs into sensor value variables */
		if( xSemaphoreTake( Sensor_Sema_Handle, (TickType_t) 10 ) == pdTRUE  )
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <Sensor_Read+0x30>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	210a      	movs	r1, #10
 8000dae:	4618      	mov	r0, r3
 8000db0:	f007 fe0a 	bl	80089c8 <xQueueSemaphoreTake>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d104      	bne.n	8000dc4 <Sensor_Read+0x24>
		{
			/* Read value from ADC1 at pin GPIO A0 */
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)plant_sensors, 2);
 8000dba:	2202      	movs	r2, #2
 8000dbc:	4905      	ldr	r1, [pc, #20]	; (8000dd4 <Sensor_Read+0x34>)
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <Sensor_Read+0x38>)
 8000dc0:	f001 f964 	bl	800208c <HAL_ADC_Start_DMA>
		}

		vTaskDelay(1000);
 8000dc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc8:	f008 fa9c 	bl	8009304 <vTaskDelay>
		if( xSemaphoreTake( Sensor_Sema_Handle, (TickType_t) 10 ) == pdTRUE  )
 8000dcc:	e7ec      	b.n	8000da8 <Sensor_Read+0x8>
 8000dce:	bf00      	nop
 8000dd0:	20004c30 	.word	0x20004c30
 8000dd4:	20004c28 	.word	0x20004c28
 8000dd8:	20004c34 	.word	0x20004c34

08000ddc <Water_Plant>:
* @brief Compare soil moisture readings to setpoints and water plant if necessary.
* @param argument: Not used
* @retval None
*/
void Water_Plant(void *pvParameters)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		/* Every 5 minutes beginning 5 min after initialization */
		vTaskDelay(300000);
 8000de4:	4837      	ldr	r0, [pc, #220]	; (8000ec4 <Water_Plant+0xe8>)
 8000de6:	f008 fa8d 	bl	8009304 <vTaskDelay>

		int16_t moistureError = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	83fb      	strh	r3, [r7, #30]
		int32_t PID_p, PID_i, PID_d;

		/* PID calculation for how long to turn on water pump */
		if ((xSemaphoreTake(Sensor_Sema_Handle, (TickType_t) 10) == pdTRUE) && (xSemaphoreTake(Setpoint_Sema_Handle, (TickType_t) 10) == pdTRUE))
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <Water_Plant+0xec>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	210a      	movs	r1, #10
 8000df4:	4618      	mov	r0, r3
 8000df6:	f007 fde7 	bl	80089c8 <xQueueSemaphoreTake>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d11f      	bne.n	8000e40 <Water_Plant+0x64>
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <Water_Plant+0xf0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	210a      	movs	r1, #10
 8000e06:	4618      	mov	r0, r3
 8000e08:	f007 fdde 	bl	80089c8 <xQueueSemaphoreTake>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d116      	bne.n	8000e40 <Water_Plant+0x64>
		{
			moistureError = ((plant_sensors[0] - moistureSetpoint) > 0) ? (plant_sensors[0] - moistureSetpoint) : 0;
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <Water_Plant+0xf4>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <Water_Plant+0xf8>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000e22:	83fb      	strh	r3, [r7, #30]

			xSemaphoreGive(Sensor_Sema_Handle);
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <Water_Plant+0xec>)
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f007 fad7 	bl	80083e0 <xQueueGenericSend>
			xSemaphoreGive(Setpoint_Sema_Handle);
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <Water_Plant+0xf0>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	2300      	movs	r3, #0
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f007 fad0 	bl	80083e0 <xQueueGenericSend>
		}

		PID_p = moistureError * proportionCoeff;
 8000e40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e44:	4a24      	ldr	r2, [pc, #144]	; (8000ed8 <Water_Plant+0xfc>)
 8000e46:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e4a:	fb02 f303 	mul.w	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
		PID_d = (moistureError / RTOS_PLANT_WATER) * derivativeCoeff;
 8000e50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e54:	4a21      	ldr	r2, [pc, #132]	; (8000edc <Water_Plant+0x100>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	0c9b      	lsrs	r3, r3, #18
 8000e5c:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <Water_Plant+0x104>)
 8000e5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e62:	fb02 f303 	mul.w	r3, r2, r3
 8000e66:	613b      	str	r3, [r7, #16]
		PID_i = (moistureError > 50) ? (PID_i + moistureError * integralCoeff) : 0;
 8000e68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e6c:	2b32      	cmp	r3, #50	; 0x32
 8000e6e:	dd09      	ble.n	8000e84 <Water_Plant+0xa8>
 8000e70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <Water_Plant+0x108>)
 8000e76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e7a:	fb02 f203 	mul.w	r2, r2, r3
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4413      	add	r3, r2
 8000e82:	e000      	b.n	8000e86 <Water_Plant+0xaa>
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]

		if (xSemaphoreTake(Tolerance_Sema_Handle, (TickType_t) 10) == pdTRUE)
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <Water_Plant+0x10c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	210a      	movs	r1, #10
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f007 fd9a 	bl	80089c8 <xQueueSemaphoreTake>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d1a4      	bne.n	8000de4 <Water_Plant+0x8>
		{
			if (moistureError > moistureTolerance)
 8000e9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <Water_Plant+0x110>)
 8000ea0:	8812      	ldrh	r2, [r2, #0]
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	dd05      	ble.n	8000eb2 <Water_Plant+0xd6>
			{
				int32_t plantPumpOnTime = PID_p + PID_d + PID_i;
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4413      	add	r3, r2
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
				(void)plantPumpOnTime;
			}

			xSemaphoreGive(Tolerance_Sema_Handle);
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <Water_Plant+0x10c>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	f007 fa90 	bl	80083e0 <xQueueGenericSend>
	{
 8000ec0:	e790      	b.n	8000de4 <Water_Plant+0x8>
 8000ec2:	bf00      	nop
 8000ec4:	000493e0 	.word	0x000493e0
 8000ec8:	20004c30 	.word	0x20004c30
 8000ecc:	20004c7c 	.word	0x20004c7c
 8000ed0:	20004c28 	.word	0x20004c28
 8000ed4:	20004d20 	.word	0x20004d20
 8000ed8:	2000002e 	.word	0x2000002e
 8000edc:	6fd91d85 	.word	0x6fd91d85
 8000ee0:	20000030 	.word	0x20000030
 8000ee4:	2000006a 	.word	0x2000006a
 8000ee8:	20004c2c 	.word	0x20004c2c
 8000eec:	20004d8c 	.word	0x20004d8c

08000ef0 <Flash_Update>:
* @brief If control data has been updated, update values in non-volatile memory.
* @param argument: Not used
* @retval None
*/
void Flash_Update(void *pvParameters)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if (controlUpdateFlag == SET)
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <Flash_Update+0x5c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d120      	bne.n	8000f42 <Flash_Update+0x52>
		{
			HAL_FLASH_Unlock();
 8000f00:	f002 f962 	bl	80031c8 <HAL_FLASH_Unlock>

			FLASH_Erase_Sector(FLASH_SECTOR_NUM, FLASH_VOLTAGE_RANGE_3);
 8000f04:	2102      	movs	r1, #2
 8000f06:	2007      	movs	r0, #7
 8000f08:	f002 face 	bl	80034a8 <FLASH_Erase_Sector>

			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_CONTROL_DATA_ADDR, (uint64_t)moistureSetpoint);
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <Flash_Update+0x60>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	f04f 0400 	mov.w	r4, #0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4623      	mov	r3, r4
 8000f1a:	490e      	ldr	r1, [pc, #56]	; (8000f54 <Flash_Update+0x64>)
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f002 f8ff 	bl	8003120 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_CONTROL_DATA_ADDR + 2, (uint64_t)moistureTolerance);
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <Flash_Update+0x68>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	f04f 0400 	mov.w	r4, #0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4623      	mov	r3, r4
 8000f30:	490a      	ldr	r1, [pc, #40]	; (8000f5c <Flash_Update+0x6c>)
 8000f32:	2001      	movs	r0, #1
 8000f34:	f002 f8f4 	bl	8003120 <HAL_FLASH_Program>

			controlUpdateFlag = RESET;
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <Flash_Update+0x5c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]

			HAL_FLASH_Lock();
 8000f3e:	f002 f965 	bl	800320c <HAL_FLASH_Lock>
		}

		vTaskDelay(10000);
 8000f42:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f46:	f008 f9dd 	bl	8009304 <vTaskDelay>
		if (controlUpdateFlag == SET)
 8000f4a:	e7d5      	b.n	8000ef8 <Flash_Update+0x8>
 8000f4c:	20000068 	.word	0x20000068
 8000f50:	20004d20 	.word	0x20004d20
 8000f54:	08060000 	.word	0x08060000
 8000f58:	20004d8c 	.word	0x20004d8c
 8000f5c:	08060002 	.word	0x08060002

08000f60 <HAL_ADC_ConvCpltCallback>:
/******************************************************************
**************** Interrupt routine callbacks **********************
*******************************************************************/

/* Called on completion of ADC readings from analog sensors */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* pAdc1_sensorsRead) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	xSemaphoreGiveFromISR(Sensor_Sema_Handle, NULL);
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f007 fbc4 	bl	80086fc <xQueueGiveFromISR>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20004c30 	.word	0x20004c30

08000f80 <HAL_SPI_TxCpltCallback>:

/* SPI transmission callback - called when UpdateScreen() completes to update OLED display from buffer */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* pSpi2_oledWrite) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	SSD1306_Disp.state = SSD1306_STATE_READY;
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_SPI_TxCpltCallback+0x2c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	719a      	strb	r2, [r3, #6]

	/*
	 * This callback is run during SSD1306_Init() before scheduler gets control
	 * thus, we must check that scheduler has control before any RTOS operations
	 */
	if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING)
 8000f8e:	f008 fe2f 	bl	8009bf0 <xTaskGetSchedulerState>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d105      	bne.n	8000fa4 <HAL_SPI_TxCpltCallback+0x24>
	{
		/* Give semaphore held on OLED buffer */
		xSemaphoreGiveFromISR(Oled_Buffer_Sema_Handle, NULL);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_SPI_TxCpltCallback+0x30>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f007 fbac 	bl	80086fc <xQueueGiveFromISR>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20004d24 	.word	0x20004d24
 8000fb0:	20004bcc 	.word	0x20004bcc

08000fb4 <HAL_I2C_SlaveRxCpltCallback>:

/* Received data from ESP8266 Master -> Read command and take appropriate action */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef* I2c1_espComm) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	/* Turn on on-board LED for visual indication */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	4834      	ldr	r0, [pc, #208]	; (8001094 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000fc2:	f002 fc4b 	bl	800385c <HAL_GPIO_WritePin>

	/* Check command code sent */
	if (espCmdCode == ESP_REQ_SENSOR_DATA) {
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b51      	cmp	r3, #81	; 0x51
 8000fcc:	d117      	bne.n	8000ffe <HAL_I2C_SlaveRxCpltCallback+0x4a>
		/* Send soil moisture and light sensor data to ESP8266 (4 bytes) */
		if(xSemaphoreTakeFromISR(Sensor_Sema_Handle, NULL) == pdTRUE)
 8000fce:	4b33      	ldr	r3, [pc, #204]	; (800109c <HAL_I2C_SlaveRxCpltCallback+0xe8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f007 fdfe 	bl	8008bd8 <xQueueReceiveFromISR>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d14a      	bne.n	8001078 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		{
			/* Transmit data to ESP8266 */
			HAL_I2C_Slave_Transmit(I2c1_espComm, (uint8_t*)plant_sensors, sizeof(plant_sensors)/sizeof(uint8_t), 2000);
 8000fe2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	492d      	ldr	r1, [pc, #180]	; (80010a0 <HAL_I2C_SlaveRxCpltCallback+0xec>)
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f002 fdac 	bl	8003b48 <HAL_I2C_Slave_Transmit>

			xSemaphoreGiveFromISR(Sensor_Sema_Handle, NULL);
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_I2C_SlaveRxCpltCallback+0xe8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f007 fb80 	bl	80086fc <xQueueGiveFromISR>
 8000ffc:	e03c      	b.n	8001078 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		}
	}
	else if (espCmdCode == ESP_SEND_MOIS_SETPOINT) {
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b44      	cmp	r3, #68	; 0x44
 8001004:	d11a      	bne.n	800103c <HAL_I2C_SlaveRxCpltCallback+0x88>
		/* Read updated setpoint value */
		if(xSemaphoreTakeFromISR(Setpoint_Sema_Handle, NULL) == pdTRUE)
 8001006:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f007 fde2 	bl	8008bd8 <xQueueReceiveFromISR>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d12e      	bne.n	8001078 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		{
			/* Transmit data to ESP8266 */
			HAL_I2C_Slave_Receive(I2c1_espComm, (uint8_t*)&moistureSetpoint, 2, 2000);
 800101a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800101e:	2202      	movs	r2, #2
 8001020:	4921      	ldr	r1, [pc, #132]	; (80010a8 <HAL_I2C_SlaveRxCpltCallback+0xf4>)
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f002 fea6 	bl	8003d74 <HAL_I2C_Slave_Receive>

			/* Set flag so setpoint will be updated in flash memory */
			controlUpdateFlag = SET;
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]

			xSemaphoreGiveFromISR(Setpoint_Sema_Handle, NULL);
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f007 fb61 	bl	80086fc <xQueueGiveFromISR>
 800103a:	e01d      	b.n	8001078 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		}
	}
	else if (espCmdCode == ESP_SEND_MOIS_TOLERANCE) {
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b46      	cmp	r3, #70	; 0x46
 8001042:	d119      	bne.n	8001078 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		/* Read updated tolerance value */
		if(xSemaphoreTakeFromISR(Tolerance_Sema_Handle, NULL) == pdTRUE)
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f007 fdc3 	bl	8008bd8 <xQueueReceiveFromISR>
 8001052:	4603      	mov	r3, r0
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10f      	bne.n	8001078 <HAL_I2C_SlaveRxCpltCallback+0xc4>
		{
			/* Transmit data to ESP8266 */
			HAL_I2C_Slave_Receive(I2c1_espComm, (uint8_t*)&moistureTolerance, 2, 2000);
 8001058:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800105c:	2202      	movs	r2, #2
 800105e:	4915      	ldr	r1, [pc, #84]	; (80010b4 <HAL_I2C_SlaveRxCpltCallback+0x100>)
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f002 fe87 	bl	8003d74 <HAL_I2C_Slave_Receive>

			/* Set flag so tolerance will be updated in flash memory */
			controlUpdateFlag = SET;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_I2C_SlaveRxCpltCallback+0xf8>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]

			xSemaphoreGiveFromISR(Tolerance_Sema_Handle, NULL);
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_I2C_SlaveRxCpltCallback+0xfc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f007 fb42 	bl	80086fc <xQueueGiveFromISR>
		}
	}

	/* Turn off on-board LED */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2120      	movs	r1, #32
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 800107e:	f002 fbed 	bl	800385c <HAL_GPIO_WritePin>

	/* Keep in slave receive mode - should always be listening for commands from ESP8266 */
	HAL_I2C_Slave_Receive_IT(I2c1_espComm, &espCmdCode, 1);
 8001082:	2201      	movs	r2, #1
 8001084:	4904      	ldr	r1, [pc, #16]	; (8001098 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f002 ff7e 	bl	8003f88 <HAL_I2C_Slave_Receive_IT>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020000 	.word	0x40020000
 8001098:	20004bc8 	.word	0x20004bc8
 800109c:	20004c30 	.word	0x20004c30
 80010a0:	20004c28 	.word	0x20004c28
 80010a4:	20004c7c 	.word	0x20004c7c
 80010a8:	20004d20 	.word	0x20004d20
 80010ac:	20000068 	.word	0x20000068
 80010b0:	20004c2c 	.word	0x20004c2c
 80010b4:	20004d8c 	.word	0x20004d8c

080010b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ca:	f000 fe19 	bl	8001d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40001000 	.word	0x40001000

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_MspInit+0x54>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a11      	ldr	r2, [pc, #68]	; (8001140 <HAL_MspInit+0x54>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x54>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_MspInit+0x54>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_MspInit+0x54>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_MspInit+0x54>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	210f      	movs	r1, #15
 800112e:	f06f 0001 	mvn.w	r0, #1
 8001132:	f001 fc2d 	bl	8002990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a33      	ldr	r2, [pc, #204]	; (8001230 <HAL_ADC_MspInit+0xec>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d15f      	bne.n	8001226 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <HAL_ADC_MspInit+0xf0>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a31      	ldr	r2, [pc, #196]	; (8001234 <HAL_ADC_MspInit+0xf0>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <HAL_ADC_MspInit+0xf0>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <HAL_ADC_MspInit+0xf0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <HAL_ADC_MspInit+0xf0>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <HAL_ADC_MspInit+0xf0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800119e:	2303      	movs	r3, #3
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a2:	2303      	movs	r3, #3
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4821      	ldr	r0, [pc, #132]	; (8001238 <HAL_ADC_MspInit+0xf4>)
 80011b2:	f002 f9c1 	bl	8003538 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_ADC_MspInit+0xf8>)
 80011b8:	4a21      	ldr	r2, [pc, #132]	; (8001240 <HAL_ADC_MspInit+0xfc>)
 80011ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_ADC_MspInit+0xf8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_ADC_MspInit+0xf8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_ADC_MspInit+0xf8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <HAL_ADC_MspInit+0xf8>)
 80011d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_ADC_MspInit+0xf8>)
 80011d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_ADC_MspInit+0xf8>)
 80011e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_ADC_MspInit+0xf8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_ADC_MspInit+0xf8>)
 80011ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_ADC_MspInit+0xf8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011fa:	4810      	ldr	r0, [pc, #64]	; (800123c <HAL_ADC_MspInit+0xf8>)
 80011fc:	f001 fbf2 	bl	80029e4 <HAL_DMA_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001206:	f7ff ff69 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a0b      	ldr	r2, [pc, #44]	; (800123c <HAL_ADC_MspInit+0xf8>)
 800120e:	639a      	str	r2, [r3, #56]	; 0x38
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_ADC_MspInit+0xf8>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2105      	movs	r1, #5
 800121a:	2012      	movs	r0, #18
 800121c:	f001 fbb8 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001220:	2012      	movs	r0, #18
 8001222:	f001 fbd1 	bl	80029c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	; 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40012000 	.word	0x40012000
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000
 800123c:	20004c80 	.word	0x20004c80
 8001240:	40026410 	.word	0x40026410

08001244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <HAL_I2C_MspInit+0xa4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d13c      	bne.n	80012e0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_I2C_MspInit+0xa8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a1f      	ldr	r2, [pc, #124]	; (80012ec <HAL_I2C_MspInit+0xa8>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_I2C_MspInit+0xa8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001282:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001288:	2312      	movs	r3, #18
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001294:	2304      	movs	r3, #4
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <HAL_I2C_MspInit+0xac>)
 80012a0:	f002 f94a 	bl	8003538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_I2C_MspInit+0xa8>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_I2C_MspInit+0xa8>)
 80012ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_I2C_MspInit+0xa8>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2105      	movs	r1, #5
 80012c4:	201f      	movs	r0, #31
 80012c6:	f001 fb63 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012ca:	201f      	movs	r0, #31
 80012cc:	f001 fb7c 	bl	80029c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2105      	movs	r1, #5
 80012d4:	2020      	movs	r0, #32
 80012d6:	f001 fb5b 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80012da:	2020      	movs	r0, #32
 80012dc:	f001 fb74 	bl	80029c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020400 	.word	0x40020400

080012f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a34      	ldr	r2, [pc, #208]	; (80013e4 <HAL_SPI_MspInit+0xf0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d162      	bne.n	80013dc <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <HAL_SPI_MspInit+0xf4>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <HAL_SPI_MspInit+0xf4>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_SPI_MspInit+0xf4>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <HAL_SPI_MspInit+0xf4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a2b      	ldr	r2, [pc, #172]	; (80013e8 <HAL_SPI_MspInit+0xf4>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <HAL_SPI_MspInit+0xf4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800134e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001360:	2305      	movs	r3, #5
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4820      	ldr	r0, [pc, #128]	; (80013ec <HAL_SPI_MspInit+0xf8>)
 800136c:	f002 f8e4 	bl	8003538 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 8001372:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <HAL_SPI_MspInit+0x100>)
 8001374:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 800137e:	2240      	movs	r2, #64	; 0x40
 8001380:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 800138a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 80013a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013a8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80013b0:	480f      	ldr	r0, [pc, #60]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 80013b2:	f001 fb17 	bl	80029e4 <HAL_DMA_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80013bc:	f7ff fe8e 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 80013c4:	649a      	str	r2, [r3, #72]	; 0x48
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_SPI_MspInit+0xfc>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2105      	movs	r1, #5
 80013d0:	2024      	movs	r0, #36	; 0x24
 80013d2:	f001 fadd 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80013d6:	2024      	movs	r0, #36	; 0x24
 80013d8:	f001 faf6 	bl	80029c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40003800 	.word	0x40003800
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020400 	.word	0x40020400
 80013f0:	20004d2c 	.word	0x20004d2c
 80013f4:	40026070 	.word	0x40026070

080013f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1d      	ldr	r2, [pc, #116]	; (800148c <HAL_UART_MspInit+0x94>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d133      	bne.n	8001482 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_UART_MspInit+0x98>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_UART_MspInit+0x98>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_UART_MspInit+0x98>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_UART_MspInit+0x98>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_UART_MspInit+0x98>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_UART_MspInit+0x98>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001452:	230c      	movs	r3, #12
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001462:	2307      	movs	r3, #7
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <HAL_UART_MspInit+0x9c>)
 800146e:	f002 f863 	bl	8003538 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2105      	movs	r1, #5
 8001476:	2026      	movs	r0, #38	; 0x26
 8001478:	f001 fa8a 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800147c:	2026      	movs	r0, #38	; 0x26
 800147e:	f001 faa3 	bl	80029c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40004400 	.word	0x40004400
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	2036      	movs	r0, #54	; 0x36
 80014ae:	f001 fa6f 	bl	8002990 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80014b2:	2036      	movs	r0, #54	; 0x36
 80014b4:	f001 fa88 	bl	80029c8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <HAL_InitTick+0xa4>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a1e      	ldr	r2, [pc, #120]	; (800153c <HAL_InitTick+0xa4>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <HAL_InitTick+0xa4>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d4:	f107 0210 	add.w	r2, r7, #16
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 fc8c 	bl	8005dfc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014e4:	f004 fc62 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 80014e8:	4603      	mov	r3, r0
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80014ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f0:	4a13      	ldr	r2, [pc, #76]	; (8001540 <HAL_InitTick+0xa8>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0c9b      	lsrs	r3, r3, #18
 80014f8:	3b01      	subs	r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_InitTick+0xac>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <HAL_InitTick+0xb0>)
 8001500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_InitTick+0xac>)
 8001504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001508:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_InitTick+0xac>)
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_InitTick+0xac>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_InitTick+0xac>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <HAL_InitTick+0xac>)
 800151e:	f005 fcf5 	bl	8006f0c <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d104      	bne.n	8001532 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <HAL_InitTick+0xac>)
 800152a:	f005 fd24 	bl	8006f76 <HAL_TIM_Base_Start_IT>
 800152e:	4603      	mov	r3, r0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3730      	adds	r7, #48	; 0x30
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	431bde83 	.word	0x431bde83
 8001544:	20004d90 	.word	0x20004d90
 8001548:	40001000 	.word	0x40001000

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <EXTI15_10_IRQHandler>:

/**
  * @brief Interrupt handler used for PC13 falling edge -> on-board button press
  */
void EXTI15_10_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	/* Prevent button debouncing */
	HAL_Delay(200);
 8001584:	20c8      	movs	r0, #200	; 0xc8
 8001586:	f000 fbdb 	bl	8001d40 <HAL_Delay>

	/* If PC13 then toggle OLED power */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <EXTI15_10_IRQHandler+0x28>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <EXTI15_10_IRQHandler+0x1a>
		SSD1306_Switch();
 8001596:	f000 f9cd 	bl	8001934 <SSD1306_Switch>
	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800159a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800159e:	f002 f977 	bl	8003890 <HAL_GPIO_EXTI_IRQHandler>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40013c00 	.word	0x40013c00

080015ac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <DMA1_Stream4_IRQHandler+0x10>)
 80015b2:	f001 fb3f 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20004d2c 	.word	0x20004d2c

080015c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <ADC_IRQHandler+0x10>)
 80015c6:	f000 fc20 	bl	8001e0a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20004c34 	.word	0x20004c34

080015d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <I2C1_EV_IRQHandler+0x10>)
 80015da:	f002 fd45 	bl	8004068 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20004b74 	.word	0x20004b74

080015e8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015ec:	4804      	ldr	r0, [pc, #16]	; (8001600 <I2C1_ER_IRQHandler+0x18>)
 80015ee:	f002 fea1 	bl	8004334 <HAL_I2C_ER_IRQHandler>

  /* Listen for next commands in case error occurs */
  HAL_I2C_Slave_Receive_IT(&hi2c1, &espCmdCode, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	4903      	ldr	r1, [pc, #12]	; (8001604 <I2C1_ER_IRQHandler+0x1c>)
 80015f6:	4802      	ldr	r0, [pc, #8]	; (8001600 <I2C1_ER_IRQHandler+0x18>)
 80015f8:	f002 fcc6 	bl	8003f88 <HAL_I2C_Slave_Receive_IT>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20004b74 	.word	0x20004b74
 8001604:	20004bc8 	.word	0x20004bc8

08001608 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&Spi_ssd1306Write);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <SPI2_IRQHandler+0x10>)
 800160e:	f005 fa19 	bl	8006a44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20004bd0 	.word	0x20004bd0

0800161c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <USART2_IRQHandler+0x10>)
 8001622:	f005 feff 	bl	8007424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20004ce0 	.word	0x20004ce0

08001630 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <TIM6_DAC_IRQHandler+0x10>)
 8001636:	f005 fcc2 	bl	8006fbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20004d90 	.word	0x20004d90

08001644 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <DMA2_Stream0_IRQHandler+0x10>)
 800164a:	f001 faf3 	bl	8002c34 <HAL_DMA_IRQHandler>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20004c80 	.word	0x20004c80

08001658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <SystemInit+0x28>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <SystemInit+0x28>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SystemInit+0x28>)
 800166e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001672:	609a      	str	r2, [r3, #8]
#endif
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001688:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800168a:	e003      	b.n	8001694 <LoopCopyDataInit>

0800168c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800168e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001690:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001692:	3104      	adds	r1, #4

08001694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001698:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800169a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800169c:	d3f6      	bcc.n	800168c <CopyDataInit>
  ldr  r2, =_sbss
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016a0:	e002      	b.n	80016a8 <LoopFillZerobss>

080016a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016a4:	f842 3b04 	str.w	r3, [r2], #4

080016a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016ac:	d3f9      	bcc.n	80016a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ae:	f7ff ffd3 	bl	8001658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f009 fba3 	bl	800adfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7fe ff2b 	bl	8000510 <main>
  bx  lr    
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016c0:	0800b868 	.word	0x0800b868
  ldr  r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016c8:	2000004c 	.word	0x2000004c
  ldr  r2, =_sbss
 80016cc:	2000004c 	.word	0x2000004c
  ldr  r3, = _ebss
 80016d0:	20004e34 	.word	0x20004e34

080016d4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <CAN1_RX0_IRQHandler>

080016d6 <SSD1306_DrawBitmap>:
/*********************************************************
********** SSD1306 Driver Functions API - Display Ctrl
*********************************************************/

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char *bitmap, int16_t w, int16_t h, uint8_t colour)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	461a      	mov	r2, r3
 80016e0:	4603      	mov	r3, r0
 80016e2:	81fb      	strh	r3, [r7, #14]
 80016e4:	460b      	mov	r3, r1
 80016e6:	81bb      	strh	r3, [r7, #12]
 80016e8:	4613      	mov	r3, r2
 80016ea:	80fb      	strh	r3, [r7, #6]
	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80016ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f0:	3307      	adds	r3, #7
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da00      	bge.n	80016f8 <SSD1306_DrawBitmap+0x22>
 80016f6:	3307      	adds	r3, #7
 80016f8:	10db      	asrs	r3, r3, #3
 80016fa:	823b      	strh	r3, [r7, #16]
	uint8_t byte = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	75fb      	strb	r3, [r7, #23]

	for (int16_t j = 0; j < h; j++, y++)
 8001700:	2300      	movs	r3, #0
 8001702:	82bb      	strh	r3, [r7, #20]
 8001704:	e054      	b.n	80017b0 <SSD1306_DrawBitmap+0xda>
	{
		for (int16_t i = 0; i < w; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	827b      	strh	r3, [r7, #18]
 800170a:	e03f      	b.n	800178c <SSD1306_DrawBitmap+0xb6>
		{
			if (i & 7)
 800170c:	8a7b      	ldrh	r3, [r7, #18]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <SSD1306_DrawBitmap+0x48>
			{
				byte <<= 1;
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	75fb      	strb	r3, [r7, #23]
 800171c:	e012      	b.n	8001744 <SSD1306_DrawBitmap+0x6e>
			}
			else
			{
				byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800171e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001722:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001726:	fb02 f203 	mul.w	r2, r2, r3
 800172a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800172e:	2b00      	cmp	r3, #0
 8001730:	da00      	bge.n	8001734 <SSD1306_DrawBitmap+0x5e>
 8001732:	3307      	adds	r3, #7
 8001734:	10db      	asrs	r3, r3, #3
 8001736:	b21b      	sxth	r3, r3
 8001738:	4413      	add	r3, r2
 800173a:	461a      	mov	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	75fb      	strb	r3, [r7, #23]
			}

			if (byte & 0x80)
 8001744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001748:	2b00      	cmp	r3, #0
 800174a:	da0a      	bge.n	8001762 <SSD1306_DrawBitmap+0x8c>
			{
				SSD1306_DrawPixel(x + i, y, colour);
 800174c:	89fa      	ldrh	r2, [r7, #14]
 800174e:	8a7b      	ldrh	r3, [r7, #18]
 8001750:	4413      	add	r3, r2
 8001752:	b29b      	uxth	r3, r3
 8001754:	89b9      	ldrh	r1, [r7, #12]
 8001756:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f946 	bl	80019ec <SSD1306_DrawPixel>
 8001760:	e00e      	b.n	8001780 <SSD1306_DrawBitmap+0xaa>
			}
			else
			{
				SSD1306_DrawPixel(x + i, y, !colour);
 8001762:	89fa      	ldrh	r2, [r7, #14]
 8001764:	8a7b      	ldrh	r3, [r7, #18]
 8001766:	4413      	add	r3, r2
 8001768:	b298      	uxth	r0, r3
 800176a:	89b9      	ldrh	r1, [r7, #12]
 800176c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	f000 f936 	bl	80019ec <SSD1306_DrawPixel>
		for (int16_t i = 0; i < w; i++)
 8001780:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001784:	b29b      	uxth	r3, r3
 8001786:	3301      	adds	r3, #1
 8001788:	b29b      	uxth	r3, r3
 800178a:	827b      	strh	r3, [r7, #18]
 800178c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbb9      	blt.n	800170c <SSD1306_DrawBitmap+0x36>
	for (int16_t j = 0; j < h; j++, y++)
 8001798:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800179c:	b29b      	uxth	r3, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	82bb      	strh	r3, [r7, #20]
 80017a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	81bb      	strh	r3, [r7, #12]
 80017b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dba4      	blt.n	8001706 <SSD1306_DrawBitmap+0x30>
			}
		}
	}
}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <SSD1306_Init>:
 * @retval Initialization status:
 *           - 0: SPI peripheral not initialized
 *           - 1: OLED initialized OK and ready to use
 */
uint8_t SSD1306_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	/* Check that SPI peripheral is ready */
	if (HAL_SPI_GetState(&Spi_ssd1306Write) != HAL_SPI_STATE_READY)
 80017c8:	4839      	ldr	r0, [pc, #228]	; (80018b0 <SSD1306_Init+0xec>)
 80017ca:	f005 fa4f 	bl	8006c6c <HAL_SPI_GetState>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d001      	beq.n	80017d8 <SSD1306_Init+0x14>
	{
		return SSD1306_FAILED;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e068      	b.n	80018aa <SSD1306_Init+0xe6>
	}

	/* Prepare to send command bits */
	SSD1306_CMD_ACCESS();
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017de:	4835      	ldr	r0, [pc, #212]	; (80018b4 <SSD1306_Init+0xf0>)
 80017e0:	f002 f83c 	bl	800385c <HAL_GPIO_WritePin>

	/* Turn VDD (logic power) on and wait to come on */
	SSD1306_LOGIC_POWER_EN();
 80017e4:	2200      	movs	r2, #0
 80017e6:	2120      	movs	r1, #32
 80017e8:	4832      	ldr	r0, [pc, #200]	; (80018b4 <SSD1306_Init+0xf0>)
 80017ea:	f002 f837 	bl	800385c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017ee:	200a      	movs	r0, #10
 80017f0:	f000 faa6 	bl	8001d40 <HAL_Delay>

	/* Display off command */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_DISP_OFF);
 80017f4:	20ae      	movs	r0, #174	; 0xae
 80017f6:	f000 fa1d 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* Reset the screen */
	SSD1306_Reset();
 80017fa:	f000 f887 	bl	800190c <SSD1306_Reset>

	/* Set up charge pump */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_CHRG_PUMP_SET);
 80017fe:	208d      	movs	r0, #141	; 0x8d
 8001800:	f000 fa18 	bl	8001c34 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_CHRG_PUMP_EN);
 8001804:	2014      	movs	r0, #20
 8001806:	f000 fa15 	bl	8001c34 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_CHRG_PRD_SET);
 800180a:	20d9      	movs	r0, #217	; 0xd9
 800180c:	f000 fa12 	bl	8001c34 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_CHRG_PRD_VALUE);
 8001810:	20f1      	movs	r0, #241	; 0xf1
 8001812:	f000 fa0f 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* Clear screen and update */
	SSD1306_Clear();
 8001816:	f000 fa04 	bl	8001c22 <SSD1306_Clear>

	/* Give power to display and wait to come on */
	SSD1306_DISP_POWER_EN();
 800181a:	2200      	movs	r2, #0
 800181c:	2140      	movs	r1, #64	; 0x40
 800181e:	4825      	ldr	r0, [pc, #148]	; (80018b4 <SSD1306_Init+0xf0>)
 8001820:	f002 f81c 	bl	800385c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001824:	2064      	movs	r0, #100	; 0x64
 8001826:	f000 fa8b 	bl	8001d40 <HAL_Delay>

	/* Set oscillator frequency */
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_SET);
 800182a:	20d5      	movs	r0, #213	; 0xd5
 800182c:	f000 fa02 	bl	8001c34 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_MAX);
 8001830:	20f0      	movs	r0, #240	; 0xf0
 8001832:	f000 f9ff 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* Set display contrast */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_CONTRAST_CTRL);
 8001836:	2081      	movs	r0, #129	; 0x81
 8001838:	f000 f9fc 	bl	8001c34 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CONTRAST_VALUE);
 800183c:	200f      	movs	r0, #15
 800183e:	f000 f9f9 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* Multiplex ratio */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_MUX_RATIO_SET);
 8001842:	20a8      	movs	r0, #168	; 0xa8
 8001844:	f000 f9f6 	bl	8001c34 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_MUX_RATIO_VALUE);
 8001848:	203f      	movs	r0, #63	; 0x3f
 800184a:	f000 f9f3 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* Set addressing mode (horizontal address mode) */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_ADDR_MODE_SET);
 800184e:	2020      	movs	r0, #32
 8001850:	f000 f9f0 	bl	8001c34 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_ADDR_MODE_HORZ);
 8001854:	2000      	movs	r0, #0
 8001856:	f000 f9ed 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* Invert rows and columns */
	SSD1306_SPI_WRITE_CMD(SSD1306_REMAP_COL127_SEG0);
 800185a:	20a1      	movs	r0, #161	; 0xa1
 800185c:	f000 f9ea 	bl	8001c34 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_REMAP_ROW_DEC);
 8001860:	20c8      	movs	r0, #200	; 0xc8
 8001862:	f000 f9e7 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* COM pins hardware configuration */
	SSD1306_SPI_WRITE_CMD(SSD1306_COM_HW_CONFIG_SET);
 8001866:	20da      	movs	r0, #218	; 0xda
 8001868:	f000 f9e4 	bl	8001c34 <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_COM_HW_CONFIG_VALUE);
 800186c:	2020      	movs	r0, #32
 800186e:	f000 f9e1 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* Display colours in normal mode */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_NORM_DISP);
 8001872:	20a6      	movs	r0, #166	; 0xa6
 8001874:	f000 f9de 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* Deactivate scrolling */
	SSD1306_SPI_WRITE_CMD(SSD1306_DEACTIVATE_SCROLL);
 8001878:	202e      	movs	r0, #46	; 0x2e
 800187a:	f000 f9db 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* Display on */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_DISP_ON);
 800187e:	20af      	movs	r0, #175	; 0xaf
 8001880:	f000 f9d8 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* Initialize structure values */
	SSD1306_Disp.CurrentX = 0;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <SSD1306_Init+0xf4>)
 8001886:	2200      	movs	r2, #0
 8001888:	801a      	strh	r2, [r3, #0]
	SSD1306_Disp.CurrentY = 0;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <SSD1306_Init+0xf4>)
 800188c:	2200      	movs	r2, #0
 800188e:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306_Disp.Initialized = 1;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <SSD1306_Init+0xf4>)
 8001892:	2201      	movs	r2, #1
 8001894:	715a      	strb	r2, [r3, #5]
	SSD1306_Disp.state = SSD1306_STATE_READY;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <SSD1306_Init+0xf4>)
 8001898:	2200      	movs	r2, #0
 800189a:	719a      	strb	r2, [r3, #6]

	/* Hang until screen has been updated */
	while (SSD1306_Disp.state != SSD1306_STATE_READY);
 800189c:	bf00      	nop
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <SSD1306_Init+0xf4>)
 80018a0:	799b      	ldrb	r3, [r3, #6]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1fa      	bne.n	800189e <SSD1306_Init+0xda>

	/* Return OK */
	return SSD1306_OK;
 80018a8:	2301      	movs	r3, #1
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20004bd0 	.word	0x20004bd0
 80018b4:	40020800 	.word	0x40020800
 80018b8:	20004d24 	.word	0x20004d24

080018bc <SSD1306_DeInit>:

/**
 * @brief  DeInitialize and power down SSD1306 OLED
 */
uint8_t SSD1306_DeInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	/* Check that display is in initialized state */
	if (!SSD1306_Disp.Initialized)
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <SSD1306_DeInit+0x48>)
 80018c2:	795b      	ldrb	r3, [r3, #5]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <SSD1306_DeInit+0x10>
	{
		return SSD1306_FAILED;
 80018c8:	2300      	movs	r3, #0
 80018ca:	e019      	b.n	8001900 <SSD1306_DeInit+0x44>
	}

	/* Prepare to send command bits */
	SSD1306_CMD_ACCESS();
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d2:	480d      	ldr	r0, [pc, #52]	; (8001908 <SSD1306_DeInit+0x4c>)
 80018d4:	f001 ffc2 	bl	800385c <HAL_GPIO_WritePin>

	/* Display off command */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_DISP_OFF);
 80018d8:	20ae      	movs	r0, #174	; 0xae
 80018da:	f000 f9ab 	bl	8001c34 <ssd1306_SPI_WriteCmd>

	/* VBAT off - cut power to display */
	SSD1306_DISP_POWER_DI();
 80018de:	2201      	movs	r2, #1
 80018e0:	2140      	movs	r1, #64	; 0x40
 80018e2:	4809      	ldr	r0, [pc, #36]	; (8001908 <SSD1306_DeInit+0x4c>)
 80018e4:	f001 ffba 	bl	800385c <HAL_GPIO_WritePin>

	/* 100 ms delay */
	HAL_Delay(100);
 80018e8:	2064      	movs	r0, #100	; 0x64
 80018ea:	f000 fa29 	bl	8001d40 <HAL_Delay>

	/* VDD off - cut power to logic */
	SSD1306_LOGIC_POWER_DI();
 80018ee:	2201      	movs	r2, #1
 80018f0:	2120      	movs	r1, #32
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <SSD1306_DeInit+0x4c>)
 80018f4:	f001 ffb2 	bl	800385c <HAL_GPIO_WritePin>

	/* Set structure values */
	SSD1306_Disp.Initialized = 0;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <SSD1306_DeInit+0x48>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	715a      	strb	r2, [r3, #5]

	return SSD1306_OK;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20004d24 	.word	0x20004d24
 8001908:	40020800 	.word	0x40020800

0800190c <SSD1306_Reset>:

/**
 * @brief  Reset the OLED display
 */
void SSD1306_Reset(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	SSD1306_RESET_LOW();
 8001910:	2200      	movs	r2, #0
 8001912:	2140      	movs	r1, #64	; 0x40
 8001914:	4806      	ldr	r0, [pc, #24]	; (8001930 <SSD1306_Reset+0x24>)
 8001916:	f001 ffa1 	bl	800385c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800191a:	2001      	movs	r0, #1
 800191c:	f000 fa10 	bl	8001d40 <HAL_Delay>
	SSD1306_RESET_HIGH();
 8001920:	2201      	movs	r2, #1
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <SSD1306_Reset+0x24>)
 8001926:	f001 ff99 	bl	800385c <HAL_GPIO_WritePin>
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40020800 	.word	0x40020800

08001934 <SSD1306_Switch>:

/**
 * @brief  Toggle the display on and off
 */
void SSD1306_Switch(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	if (SSD1306_Disp.Initialized)
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SSD1306_Switch+0x1c>)
 800193a:	795b      	ldrb	r3, [r3, #5]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <SSD1306_Switch+0x12>
	{
		SSD1306_DeInit();
 8001940:	f7ff ffbc 	bl	80018bc <SSD1306_DeInit>
	}
	else
	{
		SSD1306_Init();
	}
}
 8001944:	e001      	b.n	800194a <SSD1306_Switch+0x16>
		SSD1306_Init();
 8001946:	f7ff ff3d 	bl	80017c4 <SSD1306_Init>
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20004d24 	.word	0x20004d24

08001954 <SSD1306_UpdateScreen>:
/**
 * @brief  Updates buffer from internal RAM to OLED with SSD1306 in horizontal addressing mode (blocks until interrupt function initialized)
 * @note   This function must be called each time you do some changes to OLED, to update buffer from RAM to OLED
 */
uint8_t SSD1306_UpdateScreen(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	/* Writing data to display buffer - non-blocking function with SPI and DMA */
	return ssd1306_SPI_WriteDisp(SSD1306_Buffer);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <SSD1306_UpdateScreen+0x10>)
 800195a:	f000 f985 	bl	8001c68 <ssd1306_SPI_WriteDisp>
 800195e:	4603      	mov	r3, r0
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000070 	.word	0x20000070

08001968 <SSD1306_Fill>:
 * @brief  Fills entire OLED buffer with desired color
 * @note   @ref SSD1306_UpdateScreen() must be called after that in order to see updated LCD screen
 * @param  Color: Color to be used for screen fill. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 */
void SSD1306_Fill(uint8_t colour)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (colour == SSD1306_PX_CLR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <SSD1306_Fill+0x14>
 8001978:	2300      	movs	r3, #0
 800197a:	e000      	b.n	800197e <SSD1306_Fill+0x16>
 800197c:	23ff      	movs	r3, #255	; 0xff
 800197e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001982:	4619      	mov	r1, r3
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <SSD1306_Fill+0x2c>)
 8001986:	f009 fa82 	bl	800ae8e <memset>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000070 	.word	0x20000070

08001998 <SSD1306_Fill_ToRight>:
 * @brief  Fills OLED with desired colour to right of indicated column (for horizontal and page addressing modes)
 * @note   @ref SSD1306_UpdateScreen() must be called after that in order to see updated LCD screen
 * @param  Color: Color to be used for screen fill. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 */
void SSD1306_Fill_ToRight(uint8_t startCol, uint8_t colour)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	460a      	mov	r2, r1
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	4613      	mov	r3, r2
 80019a6:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < SSD1306_PAGES; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e014      	b.n	80019d8 <SSD1306_Fill_ToRight+0x40>
	{
		memset(SSD1306_Buffer + startCol + (i * SSD1306_WIDTH), (colour == SSD1306_PX_CLR_BLACK) ? 0x00 : 0xFF, SSD1306_WIDTH - startCol);
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	01d2      	lsls	r2, r2, #7
 80019b4:	4413      	add	r3, r2
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <SSD1306_Fill_ToRight+0x50>)
 80019b8:	1898      	adds	r0, r3, r2
 80019ba:	79bb      	ldrb	r3, [r7, #6]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <SSD1306_Fill_ToRight+0x2c>
 80019c0:	2100      	movs	r1, #0
 80019c2:	e000      	b.n	80019c6 <SSD1306_Fill_ToRight+0x2e>
 80019c4:	21ff      	movs	r1, #255	; 0xff
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80019cc:	461a      	mov	r2, r3
 80019ce:	f009 fa5e 	bl	800ae8e <memset>
	for (uint8_t i = 0; i < SSD1306_PAGES; i++)
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	3301      	adds	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d9e7      	bls.n	80019ae <SSD1306_Fill_ToRight+0x16>
	}
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000070 	.word	0x20000070

080019ec <SSD1306_DrawPixel>:
 * @param  x: X location. This parameter can be a value between 0 and SSD1306_WIDTH - 1
 * @param  y: Y location. This parameter can be a value between 0 and SSD1306_HEIGHT - 1
 * @param  color: Color to be used for screen fill. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 */
void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t colour)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
 80019f6:	460b      	mov	r3, r1
 80019f8:	80bb      	strh	r3, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	70fb      	strb	r3, [r7, #3]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	2b7f      	cmp	r3, #127	; 0x7f
 8001a02:	d848      	bhi.n	8001a96 <SSD1306_DrawPixel+0xaa>
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	2b1f      	cmp	r3, #31
 8001a08:	d845      	bhi.n	8001a96 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306_Disp.Inverted)
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <SSD1306_DrawPixel+0xb8>)
 8001a0c:	791b      	ldrb	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <SSD1306_DrawPixel+0x34>
	{
		colour = !colour;
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (colour == SSD1306_PX_CLR_WHITE)
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d11a      	bne.n	8001a5c <SSD1306_DrawPixel+0x70>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a26:	88fa      	ldrh	r2, [r7, #6]
 8001a28:	88bb      	ldrh	r3, [r7, #4]
 8001a2a:	08db      	lsrs	r3, r3, #3
 8001a2c:	b298      	uxth	r0, r3
 8001a2e:	4603      	mov	r3, r0
 8001a30:	01db      	lsls	r3, r3, #7
 8001a32:	4413      	add	r3, r2
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <SSD1306_DrawPixel+0xbc>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	b25a      	sxtb	r2, r3
 8001a3a:	88bb      	ldrh	r3, [r7, #4]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	2101      	movs	r1, #1
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b259      	sxtb	r1, r3
 8001a4c:	88fa      	ldrh	r2, [r7, #6]
 8001a4e:	4603      	mov	r3, r0
 8001a50:	01db      	lsls	r3, r3, #7
 8001a52:	4413      	add	r3, r2
 8001a54:	b2c9      	uxtb	r1, r1
 8001a56:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <SSD1306_DrawPixel+0xbc>)
 8001a58:	54d1      	strb	r1, [r2, r3]
 8001a5a:	e01d      	b.n	8001a98 <SSD1306_DrawPixel+0xac>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	88bb      	ldrh	r3, [r7, #4]
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	b298      	uxth	r0, r3
 8001a64:	4603      	mov	r3, r0
 8001a66:	01db      	lsls	r3, r3, #7
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <SSD1306_DrawPixel+0xbc>)
 8001a6c:	5cd3      	ldrb	r3, [r2, r3]
 8001a6e:	b25a      	sxtb	r2, r3
 8001a70:	88bb      	ldrh	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	4013      	ands	r3, r2
 8001a84:	b259      	sxtb	r1, r3
 8001a86:	88fa      	ldrh	r2, [r7, #6]
 8001a88:	4603      	mov	r3, r0
 8001a8a:	01db      	lsls	r3, r3, #7
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b2c9      	uxtb	r1, r1
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <SSD1306_DrawPixel+0xbc>)
 8001a92:	54d1      	strb	r1, [r2, r3]
 8001a94:	e000      	b.n	8001a98 <SSD1306_DrawPixel+0xac>
		return;
 8001a96:	bf00      	nop
	}
}
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20004d24 	.word	0x20004d24
 8001aa8:	20000070 	.word	0x20000070

08001aac <SSD1306_GotoXY>:
 * @brief  Sets cursor pointer to desired location for strings
 * @param  x: X location. This parameter can be a value between 0 and SSD1306_WIDTH - 1
 * @param  y: Y location. This parameter can be a value between 0 and SSD1306_HEIGHT - 1
 */
void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	80fb      	strh	r3, [r7, #6]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306_Disp.CurrentX = x;
 8001abc:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <SSD1306_GotoXY+0x28>)
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	8013      	strh	r3, [r2, #0]
	SSD1306_Disp.CurrentY = y;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <SSD1306_GotoXY+0x28>)
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	8053      	strh	r3, [r2, #2]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	20004d24 	.word	0x20004d24

08001ad8 <SSD1306_Putc>:
 * @param  *Font: Pointer to @ref FontDef_t structure with used font
 * @param  color: Color used for drawing. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 * @retval Character written
 */
char SSD1306_Putc(char ch, FontDef_t *Font, uint8_t colour)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306_Disp.CurrentX + Font->FontWidth) ||
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <SSD1306_Putc+0xfc>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
	if (
 8001af4:	2b7f      	cmp	r3, #127	; 0x7f
 8001af6:	dc07      	bgt.n	8001b08 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306_Disp.CurrentY + Font->FontHeight))
 8001af8:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <SSD1306_Putc+0xfc>)
 8001afa:	885b      	ldrh	r3, [r3, #2]
 8001afc:	461a      	mov	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	785b      	ldrb	r3, [r3, #1]
 8001b02:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306_Disp.CurrentX + Font->FontWidth) ||
 8001b04:	2b1f      	cmp	r3, #31
 8001b06:	dd01      	ble.n	8001b0c <SSD1306_Putc+0x34>
	{
		/* Error */
		return 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e05e      	b.n	8001bca <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e04b      	b.n	8001baa <SSD1306_Putc+0xd2>
	{
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	3b20      	subs	r3, #32
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	7849      	ldrb	r1, [r1, #1]
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4619      	mov	r1, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	440b      	add	r3, r1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	e030      	b.n	8001b98 <SSD1306_Putc+0xc0>
		{
			if ((b << j) & 0x8000)
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d010      	beq.n	8001b68 <SSD1306_Putc+0x90>
			{
				SSD1306_DrawPixel(SSD1306_Disp.CurrentX + j, (SSD1306_Disp.CurrentY + i), colour);
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <SSD1306_Putc+0xfc>)
 8001b48:	881a      	ldrh	r2, [r3, #0]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	b298      	uxth	r0, r3
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <SSD1306_Putc+0xfc>)
 8001b54:	885a      	ldrh	r2, [r3, #2]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	79ba      	ldrb	r2, [r7, #6]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f7ff ff43 	bl	80019ec <SSD1306_DrawPixel>
 8001b66:	e014      	b.n	8001b92 <SSD1306_Putc+0xba>
			}
			else
			{
				SSD1306_DrawPixel(SSD1306_Disp.CurrentX + j, (SSD1306_Disp.CurrentY + i), !colour);
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <SSD1306_Putc+0xfc>)
 8001b6a:	881a      	ldrh	r2, [r3, #0]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	b298      	uxth	r0, r3
 8001b74:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <SSD1306_Putc+0xfc>)
 8001b76:	885a      	ldrh	r2, [r3, #2]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b299      	uxth	r1, r3
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f7ff ff2d 	bl	80019ec <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	3301      	adds	r3, #1
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d3c8      	bcc.n	8001b36 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d3ad      	bcc.n	8001b12 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306_Disp.CurrentX += Font->FontWidth;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <SSD1306_Putc+0xfc>)
 8001bb8:	881a      	ldrh	r2, [r3, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <SSD1306_Putc+0xfc>)
 8001bc6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20004d24 	.word	0x20004d24

08001bd8 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, uint8_t colour)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str)
 8001be6:	e012      	b.n	8001c0e <SSD1306_Puts+0x36>
	{
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, colour) != *str)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	79fa      	ldrb	r2, [r7, #7]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff71 	bl	8001ad8 <SSD1306_Putc>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d002      	beq.n	8001c08 <SSD1306_Puts+0x30>
		{
			/* Return error */
			return *str;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	e008      	b.n	8001c1a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1e8      	bne.n	8001be8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	781b      	ldrb	r3, [r3, #0]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <SSD1306_Clear>:

/**
 * @brief  Clears the screen
 */
void SSD1306_Clear(void)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	af00      	add	r7, sp, #0
	SSD1306_Fill(SSD1306_PX_CLR_BLACK);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fe9e 	bl	8001968 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001c2c:	f7ff fe92 	bl	8001954 <SSD1306_UpdateScreen>
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <ssd1306_SPI_WriteCmd>:
 * @brief  Writes a 8-bit command to the ssd1306 - this function blocks while sending data
 * @param  uint8_t* pTxBuffer - pointer to the data buffer
 * @param  uint8_t len - length of data to be sent
 */
void ssd1306_SPI_WriteCmd(uint8_t command)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
	SSD1306_CMD_ACCESS();
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c44:	4806      	ldr	r0, [pc, #24]	; (8001c60 <ssd1306_SPI_WriteCmd+0x2c>)
 8001c46:	f001 fe09 	bl	800385c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Spi_ssd1306Write, &command, 1, SSD1306_SPI_TIMEOUT);
 8001c4a:	1df9      	adds	r1, r7, #7
 8001c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c50:	2201      	movs	r2, #1
 8001c52:	4804      	ldr	r0, [pc, #16]	; (8001c64 <ssd1306_SPI_WriteCmd+0x30>)
 8001c54:	f004 fd14 	bl	8006680 <HAL_SPI_Transmit>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40020800 	.word	0x40020800
 8001c64:	20004bd0 	.word	0x20004bd0

08001c68 <ssd1306_SPI_WriteDisp>:
/**
 * @brief  Fills the display data buffer with new screen using DMA to transfer (length is size of SSD1306 buffer defined in ssd1306.c)
 * @param  uint8_t* pTxBuffer - pointer to the data buffer
 */
uint8_t ssd1306_SPI_WriteDisp(uint8_t *pTxBuffer)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	uint8_t state = SSD1306_Disp.state;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <ssd1306_SPI_WriteDisp+0x48>)
 8001c72:	799b      	ldrb	r3, [r3, #6]
 8001c74:	73fb      	strb	r3, [r7, #15]

	if (state == SSD1306_STATE_READY)
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d114      	bne.n	8001ca6 <ssd1306_SPI_WriteDisp+0x3e>
	{
		/* Set state to busy */
		SSD1306_Disp.state = SSD1306_STATE_BUSY;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <ssd1306_SPI_WriteDisp+0x48>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	719a      	strb	r2, [r3, #6]

		/* Set D/C high for data buffer access */
		SSD1306_DISP_ACCESS();
 8001c82:	2201      	movs	r2, #1
 8001c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c88:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <ssd1306_SPI_WriteDisp+0x4c>)
 8001c8a:	f001 fde7 	bl	800385c <HAL_GPIO_WritePin>

		/* DMA enabled send with SPI - callback function run when complete */
		if (HAL_SPI_Transmit_DMA(&Spi_ssd1306Write, pTxBuffer, (uint16_t)sizeof(SSD1306_Buffer)) != HAL_OK)
 8001c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <ssd1306_SPI_WriteDisp+0x50>)
 8001c96:	f004 fe27 	bl	80068e8 <HAL_SPI_Transmit_DMA>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <ssd1306_SPI_WriteDisp+0x3e>
		{
			SSD1306_Disp.state = SSD1306_SPI_ERROR;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <ssd1306_SPI_WriteDisp+0x48>)
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	719a      	strb	r2, [r3, #6]
		}
	}

	return state;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20004d24 	.word	0x20004d24
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	20004bd0 	.word	0x20004bd0

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <HAL_Init+0x40>)
 8001cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_Init+0x40>)
 8001cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <HAL_Init+0x40>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f000 fe48 	bl	800297a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff fbd4 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf0:	f7ff f9fc 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023c00 	.word	0x40023c00

08001d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x20>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x24>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_IncTick+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000044 	.word	0x20000044
 8001d24:	20004dd0 	.word	0x20004dd0

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20004dd0 	.word	0x20004dd0

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_Delay+0x40>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000044 	.word	0x20000044

08001d84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e033      	b.n	8001e02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff f9ce 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d118      	bne.n	8001df4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dca:	f023 0302 	bic.w	r3, r3, #2
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fb9a 	bl	8002510 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
 8001df2:	e001      	b.n	8001df8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d049      	beq.n	8001ee0 <HAL_ADC_IRQHandler+0xd6>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d046      	beq.n	8001ee0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d105      	bne.n	8001e6a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d12b      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d127      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d006      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d119      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0220 	bic.w	r2, r2, #32
 8001eaa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d105      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff f845 	bl	8000f60 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f06f 0212 	mvn.w	r2, #18
 8001ede:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf0c      	ite	eq
 8001eee:	2301      	moveq	r3, #1
 8001ef0:	2300      	movne	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f00:	2b80      	cmp	r3, #128	; 0x80
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d057      	beq.n	8001fc2 <HAL_ADC_IRQHandler+0x1b8>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d054      	beq.n	8001fc2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d105      	bne.n	8001f30 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d139      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d12b      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d124      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d11d      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d119      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f8c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d105      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f043 0201 	orr.w	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fc2a 	bl	800280c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 020c 	mvn.w	r2, #12
 8001fc0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	2b40      	cmp	r3, #64	; 0x40
 8001fe4:	bf0c      	ite	eq
 8001fe6:	2301      	moveq	r3, #1
 8001fe8:	2300      	movne	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d017      	beq.n	8002024 <HAL_ADC_IRQHandler+0x21a>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d014      	beq.n	8002024 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d10d      	bne.n	8002024 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f935 	bl	8002284 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f06f 0201 	mvn.w	r2, #1
 8002022:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b20      	cmp	r3, #32
 8002030:	bf0c      	ite	eq
 8002032:	2301      	moveq	r3, #1
 8002034:	2300      	movne	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002048:	bf0c      	ite	eq
 800204a:	2301      	moveq	r3, #1
 800204c:	2300      	movne	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <HAL_ADC_IRQHandler+0x27a>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f06f 0220 	mvn.w	r2, #32
 8002072:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f90f 	bl	8002298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f06f 0220 	mvn.w	r2, #32
 8002082:	601a      	str	r2, [r3, #0]
  }
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_Start_DMA+0x1e>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e0cc      	b.n	8002244 <HAL_ADC_Start_DMA+0x1b8>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d018      	beq.n	80020f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020d0:	4b5e      	ldr	r3, [pc, #376]	; (800224c <HAL_ADC_Start_DMA+0x1c0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a5e      	ldr	r2, [pc, #376]	; (8002250 <HAL_ADC_Start_DMA+0x1c4>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0c9a      	lsrs	r2, r3, #18
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020e4:	e002      	b.n	80020ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f9      	bne.n	80020e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	f040 80a0 	bne.w	8002242 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800212c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002140:	d106      	bne.n	8002150 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f023 0206 	bic.w	r2, r3, #6
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
 800214e:	e002      	b.n	8002156 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_ADC_Start_DMA+0x1c8>)
 8002160:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	4a3c      	ldr	r2, [pc, #240]	; (8002258 <HAL_ADC_Start_DMA+0x1cc>)
 8002168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	4a3b      	ldr	r2, [pc, #236]	; (800225c <HAL_ADC_Start_DMA+0x1d0>)
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	4a3a      	ldr	r2, [pc, #232]	; (8002260 <HAL_ADC_Start_DMA+0x1d4>)
 8002178:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002182:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002192:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	334c      	adds	r3, #76	; 0x4c
 80021ae:	4619      	mov	r1, r3
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f000 fcc4 	bl	8002b40 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d12a      	bne.n	800221a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a26      	ldr	r2, [pc, #152]	; (8002264 <HAL_ADC_Start_DMA+0x1d8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d015      	beq.n	80021fa <HAL_ADC_Start_DMA+0x16e>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a25      	ldr	r2, [pc, #148]	; (8002268 <HAL_ADC_Start_DMA+0x1dc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d105      	bne.n	80021e4 <HAL_ADC_Start_DMA+0x158>
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_ADC_Start_DMA+0x1c8>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a20      	ldr	r2, [pc, #128]	; (800226c <HAL_ADC_Start_DMA+0x1e0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d129      	bne.n	8002242 <HAL_ADC_Start_DMA+0x1b6>
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_ADC_Start_DMA+0x1c8>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2b0f      	cmp	r3, #15
 80021f8:	d823      	bhi.n	8002242 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d11c      	bne.n	8002242 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	e013      	b.n	8002242 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_ADC_Start_DMA+0x1d8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10e      	bne.n	8002242 <HAL_ADC_Start_DMA+0x1b6>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002240:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000034 	.word	0x20000034
 8002250:	431bde83 	.word	0x431bde83
 8002254:	40012300 	.word	0x40012300
 8002258:	08002709 	.word	0x08002709
 800225c:	080027c3 	.word	0x080027c3
 8002260:	080027df 	.word	0x080027df
 8002264:	40012000 	.word	0x40012000
 8002268:	40012100 	.word	0x40012100
 800226c:	40012200 	.word	0x40012200

08002270 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1c>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e113      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x244>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	d925      	bls.n	8002324 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68d9      	ldr	r1, [r3, #12]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	2207      	movs	r2, #7
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43da      	mvns	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	400a      	ands	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68d9      	ldr	r1, [r3, #12]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	4603      	mov	r3, r0
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4403      	add	r3, r0
 8002316:	3b1e      	subs	r3, #30
 8002318:	409a      	lsls	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	e022      	b.n	800236a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	2207      	movs	r2, #7
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	400a      	ands	r2, r1
 8002346:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6919      	ldr	r1, [r3, #16]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	4603      	mov	r3, r0
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4403      	add	r3, r0
 8002360:	409a      	lsls	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b06      	cmp	r3, #6
 8002370:	d824      	bhi.n	80023bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	3b05      	subs	r3, #5
 8002384:	221f      	movs	r2, #31
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	400a      	ands	r2, r1
 8002392:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	3b05      	subs	r3, #5
 80023ae:	fa00 f203 	lsl.w	r2, r0, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ba:	e04c      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	d824      	bhi.n	800240e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	3b23      	subs	r3, #35	; 0x23
 80023d6:	221f      	movs	r2, #31
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43da      	mvns	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	400a      	ands	r2, r1
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	3b23      	subs	r3, #35	; 0x23
 8002400:	fa00 f203 	lsl.w	r2, r0, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
 800240c:	e023      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	3b41      	subs	r3, #65	; 0x41
 8002420:	221f      	movs	r2, #31
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	400a      	ands	r2, r1
 800242e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	4618      	mov	r0, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3b41      	subs	r3, #65	; 0x41
 800244a:	fa00 f203 	lsl.w	r2, r0, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_ADC_ConfigChannel+0x250>)
 8002458:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a28      	ldr	r2, [pc, #160]	; (8002500 <HAL_ADC_ConfigChannel+0x254>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d10f      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1d8>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b12      	cmp	r3, #18
 800246a:	d10b      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <HAL_ADC_ConfigChannel+0x254>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d12b      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x23a>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <HAL_ADC_ConfigChannel+0x258>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d003      	beq.n	80024a0 <HAL_ADC_ConfigChannel+0x1f4>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b11      	cmp	r3, #17
 800249e:	d122      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_ADC_ConfigChannel+0x258>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d111      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_ADC_ConfigChannel+0x25c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a11      	ldr	r2, [pc, #68]	; (800250c <HAL_ADC_ConfigChannel+0x260>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	0c9a      	lsrs	r2, r3, #18
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024d8:	e002      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	3b01      	subs	r3, #1
 80024de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f9      	bne.n	80024da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40012300 	.word	0x40012300
 8002500:	40012000 	.word	0x40012000
 8002504:	10000012 	.word	0x10000012
 8002508:	20000034 	.word	0x20000034
 800250c:	431bde83 	.word	0x431bde83

08002510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002518:	4b79      	ldr	r3, [pc, #484]	; (8002700 <ADC_Init+0x1f0>)
 800251a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	431a      	orrs	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	021a      	lsls	r2, r3, #8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	4a58      	ldr	r2, [pc, #352]	; (8002704 <ADC_Init+0x1f4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6899      	ldr	r1, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6899      	ldr	r1, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	e00f      	b.n	800260e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800260c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0202 	bic.w	r2, r2, #2
 800261c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6899      	ldr	r1, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7e1b      	ldrb	r3, [r3, #24]
 8002628:	005a      	lsls	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01b      	beq.n	8002674 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800264a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800265a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	3b01      	subs	r3, #1
 8002668:	035a      	lsls	r2, r3, #13
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	e007      	b.n	8002684 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002682:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	3b01      	subs	r3, #1
 80026a0:	051a      	lsls	r2, r3, #20
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c6:	025a      	lsls	r2, r3, #9
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6899      	ldr	r1, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	029a      	lsls	r2, r3, #10
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	609a      	str	r2, [r3, #8]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40012300 	.word	0x40012300
 8002704:	0f000001 	.word	0x0f000001

08002708 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800271e:	2b00      	cmp	r3, #0
 8002720:	d13c      	bne.n	800279c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d12b      	bne.n	8002794 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002740:	2b00      	cmp	r3, #0
 8002742:	d127      	bne.n	8002794 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800274e:	2b00      	cmp	r3, #0
 8002750:	d006      	beq.n	8002760 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800275c:	2b00      	cmp	r3, #0
 800275e:	d119      	bne.n	8002794 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0220 	bic.w	r2, r2, #32
 800276e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7fe fbe3 	bl	8000f60 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800279a:	e00e      	b.n	80027ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff fd75 	bl	8002298 <HAL_ADC_ErrorCallback>
}
 80027ae:	e004      	b.n	80027ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff fd4d 	bl	8002270 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2240      	movs	r2, #64	; 0x40
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f043 0204 	orr.w	r2, r3, #4
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff fd4a 	bl	8002298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4907      	ldr	r1, [pc, #28]	; (80028bc <__NVIC_EnableIRQ+0x38>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db0a      	blt.n	80028ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	490c      	ldr	r1, [pc, #48]	; (800290c <__NVIC_SetPriority+0x4c>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e8:	e00a      	b.n	8002900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4908      	ldr	r1, [pc, #32]	; (8002910 <__NVIC_SetPriority+0x50>)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3b04      	subs	r3, #4
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	440b      	add	r3, r1
 80028fe:	761a      	strb	r2, [r3, #24]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f1c3 0307 	rsb	r3, r3, #7
 800292e:	2b04      	cmp	r3, #4
 8002930:	bf28      	it	cs
 8002932:	2304      	movcs	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3304      	adds	r3, #4
 800293a:	2b06      	cmp	r3, #6
 800293c:	d902      	bls.n	8002944 <NVIC_EncodePriority+0x30>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3b03      	subs	r3, #3
 8002942:	e000      	b.n	8002946 <NVIC_EncodePriority+0x32>
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	401a      	ands	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800295c:	f04f 31ff 	mov.w	r1, #4294967295
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43d9      	mvns	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	4313      	orrs	r3, r2
         );
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ff4c 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a2:	f7ff ff61 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	6978      	ldr	r0, [r7, #20]
 80029ae:	f7ff ffb1 	bl	8002914 <NVIC_EncodePriority>
 80029b2:	4602      	mov	r2, r0
 80029b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff80 	bl	80028c0 <__NVIC_SetPriority>
}
 80029c0:	bf00      	nop
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ff54 	bl	8002884 <__NVIC_EnableIRQ>
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff f99a 	bl	8001d28 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e099      	b.n	8002b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a20:	e00f      	b.n	8002a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a22:	f7ff f981 	bl	8001d28 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d908      	bls.n	8002a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e078      	b.n	8002b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e8      	bne.n	8002a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <HAL_DMA_Init+0x158>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d107      	bne.n	8002aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0307 	bic.w	r3, r3, #7
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d117      	bne.n	8002b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00e      	beq.n	8002b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fa9f 	bl	800302c <DMA_CheckFifoParam>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2240      	movs	r2, #64	; 0x40
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b02:	2301      	movs	r3, #1
 8002b04:	e016      	b.n	8002b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fa56 	bl	8002fc0 <DMA_CalcBaseAndBitshift>
 8002b14:	4603      	mov	r3, r0
 8002b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	223f      	movs	r2, #63	; 0x3f
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	f010803f 	.word	0xf010803f

08002b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_DMA_Start_IT+0x26>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e040      	b.n	8002be8 <HAL_DMA_Start_IT+0xa8>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d12f      	bne.n	8002bda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f9e8 	bl	8002f64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	223f      	movs	r2, #63	; 0x3f
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0216 	orr.w	r2, r2, #22
 8002bae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0208 	orr.w	r2, r2, #8
 8002bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e005      	b.n	8002be6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
 8002be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d004      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00c      	b.n	8002c28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2205      	movs	r2, #5
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0201 	bic.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c40:	4b92      	ldr	r3, [pc, #584]	; (8002e8c <HAL_DMA_IRQHandler+0x258>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a92      	ldr	r2, [pc, #584]	; (8002e90 <HAL_DMA_IRQHandler+0x25c>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0a9b      	lsrs	r3, r3, #10
 8002c4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	2208      	movs	r2, #8
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01a      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d012      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	f043 0202 	orr.w	r2, r3, #2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2204      	movs	r2, #4
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f043 0204 	orr.w	r2, r3, #4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	2210      	movs	r2, #16
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d043      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d03c      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	2210      	movs	r2, #16
 8002d30:	409a      	lsls	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d018      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d024      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
 8002d62:	e01f      	b.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01b      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
 8002d74:	e016      	b.n	8002da4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0208 	bic.w	r2, r2, #8
 8002d92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	2220      	movs	r2, #32
 8002daa:	409a      	lsls	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 808e 	beq.w	8002ed2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8086 	beq.w	8002ed2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	2220      	movs	r2, #32
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d136      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0216 	bic.w	r2, r2, #22
 8002dec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x1da>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0208 	bic.w	r2, r2, #8
 8002e1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	223f      	movs	r2, #63	; 0x3f
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d07d      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
        }
        return;
 8002e4a:	e078      	b.n	8002f3e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01c      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d108      	bne.n	8002e7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d030      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
 8002e78:	e02b      	b.n	8002ed2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d027      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
 8002e8a:	e022      	b.n	8002ed2 <HAL_DMA_IRQHandler+0x29e>
 8002e8c:	20000034 	.word	0x20000034
 8002e90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0210 	bic.w	r2, r2, #16
 8002eb0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d032      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d022      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2205      	movs	r2, #5
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3301      	adds	r3, #1
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d307      	bcc.n	8002f1a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f2      	bne.n	8002efe <HAL_DMA_IRQHandler+0x2ca>
 8002f18:	e000      	b.n	8002f1c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f1a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
 8002f3c:	e000      	b.n	8002f40 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f3e:	bf00      	nop
    }
  }
}
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop

08002f48 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f56:	b2db      	uxtb	r3, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d108      	bne.n	8002fa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fa2:	e007      	b.n	8002fb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	60da      	str	r2, [r3, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	3b10      	subs	r3, #16
 8002fd0:	4a14      	ldr	r2, [pc, #80]	; (8003024 <DMA_CalcBaseAndBitshift+0x64>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fda:	4a13      	ldr	r2, [pc, #76]	; (8003028 <DMA_CalcBaseAndBitshift+0x68>)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d909      	bls.n	8003002 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ff6:	f023 0303 	bic.w	r3, r3, #3
 8002ffa:	1d1a      	adds	r2, r3, #4
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	659a      	str	r2, [r3, #88]	; 0x58
 8003000:	e007      	b.n	8003012 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	aaaaaaab 	.word	0xaaaaaaab
 8003028:	0800b828 	.word	0x0800b828

0800302c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d11f      	bne.n	8003086 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d855      	bhi.n	80030f8 <DMA_CheckFifoParam+0xcc>
 800304c:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <DMA_CheckFifoParam+0x28>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003065 	.word	0x08003065
 8003058:	08003077 	.word	0x08003077
 800305c:	08003065 	.word	0x08003065
 8003060:	080030f9 	.word	0x080030f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d045      	beq.n	80030fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003074:	e042      	b.n	80030fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800307e:	d13f      	bne.n	8003100 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003084:	e03c      	b.n	8003100 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308e:	d121      	bne.n	80030d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d836      	bhi.n	8003104 <DMA_CheckFifoParam+0xd8>
 8003096:	a201      	add	r2, pc, #4	; (adr r2, 800309c <DMA_CheckFifoParam+0x70>)
 8003098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030b3 	.word	0x080030b3
 80030a4:	080030ad 	.word	0x080030ad
 80030a8:	080030c5 	.word	0x080030c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      break;
 80030b0:	e02f      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d024      	beq.n	8003108 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c2:	e021      	b.n	8003108 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030cc:	d11e      	bne.n	800310c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030d2:	e01b      	b.n	800310c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d902      	bls.n	80030e0 <DMA_CheckFifoParam+0xb4>
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d003      	beq.n	80030e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030de:	e018      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
      break;
 80030e4:	e015      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00e      	beq.n	8003110 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      break;
 80030f6:	e00b      	b.n	8003110 <DMA_CheckFifoParam+0xe4>
      break;
 80030f8:	bf00      	nop
 80030fa:	e00a      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
      break;
 80030fc:	bf00      	nop
 80030fe:	e008      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
      break;
 8003100:	bf00      	nop
 8003102:	e006      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
      break;
 8003104:	bf00      	nop
 8003106:	e004      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
      break;
 8003108:	bf00      	nop
 800310a:	e002      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
      break;   
 800310c:	bf00      	nop
 800310e:	e000      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
      break;
 8003110:	bf00      	nop
    }
  } 
  
  return status; 
 8003112:	7bfb      	ldrb	r3, [r7, #15]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003132:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <HAL_FLASH_Program+0xa0>)
 8003134:	7e1b      	ldrb	r3, [r3, #24]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_FLASH_Program+0x1e>
 800313a:	2302      	movs	r3, #2
 800313c:	e03b      	b.n	80031b6 <HAL_FLASH_Program+0x96>
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_FLASH_Program+0xa0>)
 8003140:	2201      	movs	r2, #1
 8003142:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003144:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003148:	f000 f870 	bl	800322c <FLASH_WaitForLastOperation>
 800314c:	4603      	mov	r3, r0
 800314e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d12b      	bne.n	80031ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d105      	bne.n	8003168 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800315c:	783b      	ldrb	r3, [r7, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	68b8      	ldr	r0, [r7, #8]
 8003162:	f000 f919 	bl	8003398 <FLASH_Program_Byte>
 8003166:	e016      	b.n	8003196 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d105      	bne.n	800317a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800316e:	883b      	ldrh	r3, [r7, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	f000 f8ec 	bl	8003350 <FLASH_Program_HalfWord>
 8003178:	e00d      	b.n	8003196 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d105      	bne.n	800318c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4619      	mov	r1, r3
 8003184:	68b8      	ldr	r0, [r7, #8]
 8003186:	f000 f8c1 	bl	800330c <FLASH_Program_Word>
 800318a:	e004      	b.n	8003196 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800318c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003190:	68b8      	ldr	r0, [r7, #8]
 8003192:	f000 f88b 	bl	80032ac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003196:	f24c 3050 	movw	r0, #50000	; 0xc350
 800319a:	f000 f847 	bl	800322c <FLASH_WaitForLastOperation>
 800319e:	4603      	mov	r3, r0
 80031a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <HAL_FLASH_Program+0xa4>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <HAL_FLASH_Program+0xa4>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HAL_FLASH_Program+0xa0>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20004dd4 	.word	0x20004dd4
 80031c4:	40023c00 	.word	0x40023c00

080031c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_FLASH_Unlock+0x38>)
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	da0b      	bge.n	80031f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_FLASH_Unlock+0x38>)
 80031dc:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_FLASH_Unlock+0x3c>)
 80031de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <HAL_FLASH_Unlock+0x38>)
 80031e2:	4a09      	ldr	r2, [pc, #36]	; (8003208 <HAL_FLASH_Unlock+0x40>)
 80031e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_FLASH_Unlock+0x38>)
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da01      	bge.n	80031f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80031f2:	79fb      	ldrb	r3, [r7, #7]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40023c00 	.word	0x40023c00
 8003204:	45670123 	.word	0x45670123
 8003208:	cdef89ab 	.word	0xcdef89ab

0800320c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_FLASH_Lock+0x1c>)
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <HAL_FLASH_Lock+0x1c>)
 8003216:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800321a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40023c00 	.word	0x40023c00

0800322c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003238:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <FLASH_WaitForLastOperation+0x78>)
 800323a:	2200      	movs	r2, #0
 800323c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800323e:	f7fe fd73 	bl	8001d28 <HAL_GetTick>
 8003242:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003244:	e010      	b.n	8003268 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d00c      	beq.n	8003268 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <FLASH_WaitForLastOperation+0x38>
 8003254:	f7fe fd68 	bl	8001d28 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	429a      	cmp	r2, r3
 8003262:	d201      	bcs.n	8003268 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e019      	b.n	800329c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <FLASH_WaitForLastOperation+0x7c>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e8      	bne.n	8003246 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <FLASH_WaitForLastOperation+0x7c>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <FLASH_WaitForLastOperation+0x7c>)
 8003282:	2201      	movs	r2, #1
 8003284:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <FLASH_WaitForLastOperation+0x7c>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003292:	f000 f8a3 	bl	80033dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
  
}  
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20004dd4 	.word	0x20004dd4
 80032a8:	40023c00 	.word	0x40023c00

080032ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80032ac:	b490      	push	{r4, r7}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <FLASH_Program_DoubleWord+0x5c>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	4a12      	ldr	r2, [pc, #72]	; (8003308 <FLASH_Program_DoubleWord+0x5c>)
 80032be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80032c4:	4b10      	ldr	r3, [pc, #64]	; (8003308 <FLASH_Program_DoubleWord+0x5c>)
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	4a0f      	ldr	r2, [pc, #60]	; (8003308 <FLASH_Program_DoubleWord+0x5c>)
 80032ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80032ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80032d0:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <FLASH_Program_DoubleWord+0x5c>)
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <FLASH_Program_DoubleWord+0x5c>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80032e2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80032e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	f04f 0400 	mov.w	r4, #0
 80032f2:	0013      	movs	r3, r2
 80032f4:	2400      	movs	r4, #0
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	3204      	adds	r2, #4
 80032fa:	6013      	str	r3, [r2, #0]
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bc90      	pop	{r4, r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40023c00 	.word	0x40023c00

0800330c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003316:	4b0d      	ldr	r3, [pc, #52]	; (800334c <FLASH_Program_Word+0x40>)
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	4a0c      	ldr	r2, [pc, #48]	; (800334c <FLASH_Program_Word+0x40>)
 800331c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003320:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <FLASH_Program_Word+0x40>)
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <FLASH_Program_Word+0x40>)
 8003328:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <FLASH_Program_Word+0x40>)
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	4a06      	ldr	r2, [pc, #24]	; (800334c <FLASH_Program_Word+0x40>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	601a      	str	r2, [r3, #0]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40023c00 	.word	0x40023c00

08003350 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <FLASH_Program_HalfWord+0x44>)
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <FLASH_Program_HalfWord+0x44>)
 8003362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003366:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <FLASH_Program_HalfWord+0x44>)
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	4a09      	ldr	r2, [pc, #36]	; (8003394 <FLASH_Program_HalfWord+0x44>)
 800336e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003372:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <FLASH_Program_HalfWord+0x44>)
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <FLASH_Program_HalfWord+0x44>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	887a      	ldrh	r2, [r7, #2]
 8003384:	801a      	strh	r2, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00

08003398 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <FLASH_Program_Byte+0x40>)
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <FLASH_Program_Byte+0x40>)
 80033aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <FLASH_Program_Byte+0x40>)
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <FLASH_Program_Byte+0x40>)
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <FLASH_Program_Byte+0x40>)
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	4a06      	ldr	r2, [pc, #24]	; (80033d8 <FLASH_Program_Byte+0x40>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	701a      	strb	r2, [r3, #0]
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40023c00 	.word	0x40023c00

080033dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80033e0:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80033ec:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f043 0310 	orr.w	r3, r3, #16
 80033f4:	4a2b      	ldr	r2, [pc, #172]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 80033f6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80033f8:	4b29      	ldr	r3, [pc, #164]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 80033fa:	2210      	movs	r2, #16
 80033fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80033fe:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800340a:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f043 0308 	orr.w	r3, r3, #8
 8003412:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 8003414:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 8003418:	2220      	movs	r2, #32
 800341a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800341c:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003428:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	4a1c      	ldr	r2, [pc, #112]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 8003432:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003434:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 8003436:	2240      	movs	r2, #64	; 0x40
 8003438:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800343a:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003446:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f043 0302 	orr.w	r3, r3, #2
 800344e:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 8003450:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003452:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 8003454:	2280      	movs	r2, #128	; 0x80
 8003456:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d009      	beq.n	8003478 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 800346e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 8003472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003476:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f043 0320 	orr.w	r3, r3, #32
 800348c:	4a05      	ldr	r2, [pc, #20]	; (80034a4 <FLASH_SetErrorCode+0xc8>)
 800348e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <FLASH_SetErrorCode+0xc4>)
 8003492:	2202      	movs	r2, #2
 8003494:	60da      	str	r2, [r3, #12]
  }
}
 8003496:	bf00      	nop
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40023c00 	.word	0x40023c00
 80034a4:	20004dd4 	.word	0x20004dd4

080034a8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e010      	b.n	80034e6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d103      	bne.n	80034d2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80034ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e009      	b.n	80034e6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d103      	bne.n	80034e0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80034d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e002      	b.n	80034e6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80034e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <FLASH_Erase_Sector+0x8c>)
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <FLASH_Erase_Sector+0x8c>)
 80034ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <FLASH_Erase_Sector+0x8c>)
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	490f      	ldr	r1, [pc, #60]	; (8003534 <FLASH_Erase_Sector+0x8c>)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <FLASH_Erase_Sector+0x8c>)
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	4a0c      	ldr	r2, [pc, #48]	; (8003534 <FLASH_Erase_Sector+0x8c>)
 8003504:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003508:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <FLASH_Erase_Sector+0x8c>)
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4313      	orrs	r3, r2
 8003514:	4a07      	ldr	r2, [pc, #28]	; (8003534 <FLASH_Erase_Sector+0x8c>)
 8003516:	f043 0302 	orr.w	r3, r3, #2
 800351a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <FLASH_Erase_Sector+0x8c>)
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <FLASH_Erase_Sector+0x8c>)
 8003522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003526:	6113      	str	r3, [r2, #16]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40023c00 	.word	0x40023c00

08003538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	e165      	b.n	8003820 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003554:	2201      	movs	r2, #1
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	f040 8154 	bne.w	800381a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d00b      	beq.n	8003592 <HAL_GPIO_Init+0x5a>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d007      	beq.n	8003592 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003586:	2b11      	cmp	r3, #17
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b12      	cmp	r3, #18
 8003590:	d130      	bne.n	80035f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	2203      	movs	r2, #3
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035c8:	2201      	movs	r2, #1
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	f003 0201 	and.w	r2, r3, #1
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0xfc>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b12      	cmp	r3, #18
 8003632:	d123      	bne.n	800367c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	08da      	lsrs	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3208      	adds	r2, #8
 800363c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	220f      	movs	r2, #15
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	08da      	lsrs	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3208      	adds	r2, #8
 8003676:	69b9      	ldr	r1, [r7, #24]
 8003678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0203 	and.w	r2, r3, #3
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80ae 	beq.w	800381a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	4b5c      	ldr	r3, [pc, #368]	; (8003834 <HAL_GPIO_Init+0x2fc>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	4a5b      	ldr	r2, [pc, #364]	; (8003834 <HAL_GPIO_Init+0x2fc>)
 80036c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036cc:	6453      	str	r3, [r2, #68]	; 0x44
 80036ce:	4b59      	ldr	r3, [pc, #356]	; (8003834 <HAL_GPIO_Init+0x2fc>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036da:	4a57      	ldr	r2, [pc, #348]	; (8003838 <HAL_GPIO_Init+0x300>)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	3302      	adds	r3, #2
 80036e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	220f      	movs	r2, #15
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4e      	ldr	r2, [pc, #312]	; (800383c <HAL_GPIO_Init+0x304>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d025      	beq.n	8003752 <HAL_GPIO_Init+0x21a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4d      	ldr	r2, [pc, #308]	; (8003840 <HAL_GPIO_Init+0x308>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01f      	beq.n	800374e <HAL_GPIO_Init+0x216>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4c      	ldr	r2, [pc, #304]	; (8003844 <HAL_GPIO_Init+0x30c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d019      	beq.n	800374a <HAL_GPIO_Init+0x212>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4b      	ldr	r2, [pc, #300]	; (8003848 <HAL_GPIO_Init+0x310>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_GPIO_Init+0x20e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4a      	ldr	r2, [pc, #296]	; (800384c <HAL_GPIO_Init+0x314>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00d      	beq.n	8003742 <HAL_GPIO_Init+0x20a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a49      	ldr	r2, [pc, #292]	; (8003850 <HAL_GPIO_Init+0x318>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <HAL_GPIO_Init+0x206>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a48      	ldr	r2, [pc, #288]	; (8003854 <HAL_GPIO_Init+0x31c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <HAL_GPIO_Init+0x202>
 8003736:	2306      	movs	r3, #6
 8003738:	e00c      	b.n	8003754 <HAL_GPIO_Init+0x21c>
 800373a:	2307      	movs	r3, #7
 800373c:	e00a      	b.n	8003754 <HAL_GPIO_Init+0x21c>
 800373e:	2305      	movs	r3, #5
 8003740:	e008      	b.n	8003754 <HAL_GPIO_Init+0x21c>
 8003742:	2304      	movs	r3, #4
 8003744:	e006      	b.n	8003754 <HAL_GPIO_Init+0x21c>
 8003746:	2303      	movs	r3, #3
 8003748:	e004      	b.n	8003754 <HAL_GPIO_Init+0x21c>
 800374a:	2302      	movs	r3, #2
 800374c:	e002      	b.n	8003754 <HAL_GPIO_Init+0x21c>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_GPIO_Init+0x21c>
 8003752:	2300      	movs	r3, #0
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	f002 0203 	and.w	r2, r2, #3
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	4093      	lsls	r3, r2
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003764:	4934      	ldr	r1, [pc, #208]	; (8003838 <HAL_GPIO_Init+0x300>)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	3302      	adds	r3, #2
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <HAL_GPIO_Init+0x320>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003796:	4a30      	ldr	r2, [pc, #192]	; (8003858 <HAL_GPIO_Init+0x320>)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800379c:	4b2e      	ldr	r3, [pc, #184]	; (8003858 <HAL_GPIO_Init+0x320>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037c0:	4a25      	ldr	r2, [pc, #148]	; (8003858 <HAL_GPIO_Init+0x320>)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c6:	4b24      	ldr	r3, [pc, #144]	; (8003858 <HAL_GPIO_Init+0x320>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ea:	4a1b      	ldr	r2, [pc, #108]	; (8003858 <HAL_GPIO_Init+0x320>)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_GPIO_Init+0x320>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003814:	4a10      	ldr	r2, [pc, #64]	; (8003858 <HAL_GPIO_Init+0x320>)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3301      	adds	r3, #1
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	2b0f      	cmp	r3, #15
 8003824:	f67f ae96 	bls.w	8003554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003828:	bf00      	nop
 800382a:	3724      	adds	r7, #36	; 0x24
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40023800 	.word	0x40023800
 8003838:	40013800 	.word	0x40013800
 800383c:	40020000 	.word	0x40020000
 8003840:	40020400 	.word	0x40020400
 8003844:	40020800 	.word	0x40020800
 8003848:	40020c00 	.word	0x40020c00
 800384c:	40021000 	.word	0x40021000
 8003850:	40021400 	.word	0x40021400
 8003854:	40021800 	.word	0x40021800
 8003858:	40013c00 	.word	0x40013c00

0800385c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
 8003868:	4613      	mov	r3, r2
 800386a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800386c:	787b      	ldrb	r3, [r7, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003878:	e003      	b.n	8003882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	041a      	lsls	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	619a      	str	r2, [r3, #24]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d006      	beq.n	80038b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f806 	bl	80038c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40013c00 	.word	0x40013c00

080038c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e11f      	b.n	8003b2a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd fca0 	bl	8001244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	; 0x24
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800392a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800393a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800393c:	f002 fa36 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8003940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4a7b      	ldr	r2, [pc, #492]	; (8003b34 <HAL_I2C_Init+0x25c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d807      	bhi.n	800395c <HAL_I2C_Init+0x84>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a7a      	ldr	r2, [pc, #488]	; (8003b38 <HAL_I2C_Init+0x260>)
 8003950:	4293      	cmp	r3, r2
 8003952:	bf94      	ite	ls
 8003954:	2301      	movls	r3, #1
 8003956:	2300      	movhi	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e006      	b.n	800396a <HAL_I2C_Init+0x92>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a77      	ldr	r2, [pc, #476]	; (8003b3c <HAL_I2C_Init+0x264>)
 8003960:	4293      	cmp	r3, r2
 8003962:	bf94      	ite	ls
 8003964:	2301      	movls	r3, #1
 8003966:	2300      	movhi	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0db      	b.n	8003b2a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a72      	ldr	r2, [pc, #456]	; (8003b40 <HAL_I2C_Init+0x268>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	0c9b      	lsrs	r3, r3, #18
 800397c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a64      	ldr	r2, [pc, #400]	; (8003b34 <HAL_I2C_Init+0x25c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d802      	bhi.n	80039ac <HAL_I2C_Init+0xd4>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3301      	adds	r3, #1
 80039aa:	e009      	b.n	80039c0 <HAL_I2C_Init+0xe8>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	4a63      	ldr	r2, [pc, #396]	; (8003b44 <HAL_I2C_Init+0x26c>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	099b      	lsrs	r3, r3, #6
 80039be:	3301      	adds	r3, #1
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4956      	ldr	r1, [pc, #344]	; (8003b34 <HAL_I2C_Init+0x25c>)
 80039dc:	428b      	cmp	r3, r1
 80039de:	d80d      	bhi.n	80039fc <HAL_I2C_Init+0x124>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1e59      	subs	r1, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ee:	3301      	adds	r3, #1
 80039f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	bf38      	it	cc
 80039f8:	2304      	movcc	r3, #4
 80039fa:	e04f      	b.n	8003a9c <HAL_I2C_Init+0x1c4>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d111      	bne.n	8003a28 <HAL_I2C_Init+0x150>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e58      	subs	r0, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e012      	b.n	8003a4e <HAL_I2C_Init+0x176>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	0099      	lsls	r1, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Init+0x17e>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e022      	b.n	8003a9c <HAL_I2C_Init+0x1c4>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10e      	bne.n	8003a7c <HAL_I2C_Init+0x1a4>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1e58      	subs	r0, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	440b      	add	r3, r1
 8003a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7a:	e00f      	b.n	8003a9c <HAL_I2C_Init+0x1c4>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1e58      	subs	r0, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	0099      	lsls	r1, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	6809      	ldr	r1, [r1, #0]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6911      	ldr	r1, [r2, #16]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	000186a0 	.word	0x000186a0
 8003b38:	001e847f 	.word	0x001e847f
 8003b3c:	003d08ff 	.word	0x003d08ff
 8003b40:	431bde83 	.word	0x431bde83
 8003b44:	10624dd3 	.word	0x10624dd3

08003b48 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	; 0x28
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7fe f8e6 	bl	8001d28 <HAL_GetTick>
 8003b5c:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	f040 80fb 	bne.w	8003d62 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_I2C_Slave_Transmit+0x30>
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0f3      	b.n	8003d64 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Slave_Transmit+0x42>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e0ec      	b.n	8003d64 <HAL_I2C_Slave_Transmit+0x21c>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d007      	beq.n	8003bb0 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2221      	movs	r2, #33	; 0x21
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a5f      	ldr	r2, [pc, #380]	; (8003d6c <HAL_I2C_Slave_Transmit+0x224>)
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c00:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	4959      	ldr	r1, [pc, #356]	; (8003d70 <HAL_I2C_Slave_Transmit+0x228>)
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f001 fe16 	bl	800583e <I2C_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0a3      	b.n	8003d64 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c3a:	d165      	bne.n	8003d08 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2200      	movs	r2, #0
 8003c44:	494a      	ldr	r1, [pc, #296]	; (8003d70 <HAL_I2C_Slave_Transmit+0x228>)
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f001 fdf9 	bl	800583e <I2C_WaitOnFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e086      	b.n	8003d64 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c6c:	e04c      	b.n	8003d08 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	6839      	ldr	r1, [r7, #0]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f001 fe3a 	bl	80058ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8c:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e068      	b.n	8003d64 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d11b      	bne.n	8003d08 <HAL_I2C_Slave_Transmit+0x1c0>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d017      	beq.n	8003d08 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1ae      	bne.n	8003c6e <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f001 fd8e 	bl	800583e <I2C_WaitOnFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e01b      	b.n	8003d64 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d34:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e000      	b.n	8003d64 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
  }
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	ffff0000 	.word	0xffff0000
 8003d70:	00010002 	.word	0x00010002

08003d74 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d84:	f7fd ffd0 	bl	8001d28 <HAL_GetTick>
 8003d88:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	f040 80ee 	bne.w	8003f74 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_I2C_Slave_Receive+0x30>
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0e6      	b.n	8003f76 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_I2C_Slave_Receive+0x42>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e0df      	b.n	8003f76 <HAL_I2C_Slave_Receive+0x202>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d007      	beq.n	8003ddc <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dea:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2222      	movs	r2, #34	; 0x22
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a59      	ldr	r2, [pc, #356]	; (8003f80 <HAL_I2C_Slave_Receive+0x20c>)
 8003e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e2c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2200      	movs	r2, #0
 8003e36:	4953      	ldr	r1, [pc, #332]	; (8003f84 <HAL_I2C_Slave_Receive+0x210>)
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f001 fd00 	bl	800583e <I2C_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e096      	b.n	8003f76 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	61bb      	str	r3, [r7, #24]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8003e5e:	e04e      	b.n	8003efe <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	6839      	ldr	r1, [r7, #0]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f001 fdbf 	bl	80059e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7e:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e078      	b.n	8003f76 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d11c      	bne.n	8003efe <HAL_I2C_Slave_Receive+0x18a>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d018      	beq.n	8003efe <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ac      	bne.n	8003e60 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	6839      	ldr	r1, [r7, #0]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f001 fd2f 	bl	800596e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f24:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e025      	b.n	8003f76 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	ffff0000 	.word	0xffff0000
 8003f84:	00010002 	.word	0x00010002

08003f88 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d158      	bne.n	8004054 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_I2C_Slave_Receive_IT+0x26>
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e051      	b.n	8004056 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_I2C_Slave_Receive_IT+0x38>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e04a      	b.n	8004056 <HAL_I2C_Slave_Receive_IT+0xce>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d007      	beq.n	8003fe6 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2222      	movs	r2, #34	; 0x22
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	88fa      	ldrh	r2, [r7, #6]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a0f      	ldr	r2, [pc, #60]	; (8004064 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8004026:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004036:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800404e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e000      	b.n	8004056 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	ffff0000 	.word	0xffff0000

08004068 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004088:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004090:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	2b10      	cmp	r3, #16
 8004096:	d003      	beq.n	80040a0 <HAL_I2C_EV_IRQHandler+0x38>
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	f040 80b6 	bne.w	800420c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80040c0:	d003      	beq.n	80040ca <HAL_I2C_EV_IRQHandler+0x62>
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80040c8:	d101      	bne.n	80040ce <HAL_I2C_EV_IRQHandler+0x66>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <HAL_I2C_EV_IRQHandler+0x68>
 80040ce:	2300      	movs	r3, #0
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	f000 8127 	beq.w	8004324 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00c      	beq.n	80040fa <HAL_I2C_EV_IRQHandler+0x92>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	0a5b      	lsrs	r3, r3, #9
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d006      	beq.n	80040fa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f001 fd00 	bl	8005af2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fd12 	bl	8004b1c <I2C_Master_SB>
 80040f8:	e087      	b.n	800420a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	08db      	lsrs	r3, r3, #3
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_I2C_EV_IRQHandler+0xb2>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	0a5b      	lsrs	r3, r3, #9
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fd88 	bl	8004c28 <I2C_Master_ADD10>
 8004118:	e077      	b.n	800420a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_I2C_EV_IRQHandler+0xd2>
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	0a5b      	lsrs	r3, r3, #9
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fda2 	bl	8004c7c <I2C_Master_ADDR>
 8004138:	e067      	b.n	800420a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d030      	beq.n	80041a8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004154:	f000 80e8 	beq.w	8004328 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	09db      	lsrs	r3, r3, #7
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00f      	beq.n	8004184 <HAL_I2C_EV_IRQHandler+0x11c>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_I2C_EV_IRQHandler+0x11c>
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f9de 	bl	800453e <I2C_MasterTransmit_TXE>
 8004182:	e042      	b.n	800420a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 80cb 	beq.w	8004328 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	0a5b      	lsrs	r3, r3, #9
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80c4 	beq.w	8004328 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fa68 	bl	8004676 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041a6:	e0bf      	b.n	8004328 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b6:	f000 80b7 	beq.w	8004328 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	099b      	lsrs	r3, r3, #6
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00f      	beq.n	80041e6 <HAL_I2C_EV_IRQHandler+0x17e>
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	0a9b      	lsrs	r3, r3, #10
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <HAL_I2C_EV_IRQHandler+0x17e>
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d103      	bne.n	80041e6 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fb30 	bl	8004844 <I2C_MasterReceive_RXNE>
 80041e4:	e011      	b.n	800420a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	089b      	lsrs	r3, r3, #2
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 809a 	beq.w	8004328 <HAL_I2C_EV_IRQHandler+0x2c0>
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	0a5b      	lsrs	r3, r3, #9
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8093 	beq.w	8004328 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fba0 	bl	8004948 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004208:	e08e      	b.n	8004328 <HAL_I2C_EV_IRQHandler+0x2c0>
 800420a:	e08d      	b.n	8004328 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	e007      	b.n	800422e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d012      	beq.n	8004260 <HAL_I2C_EV_IRQHandler+0x1f8>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	0a5b      	lsrs	r3, r3, #9
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004256:	69b9      	ldr	r1, [r7, #24]
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 ff5e 	bl	800511a <I2C_Slave_ADDR>
 800425e:	e066      	b.n	800432e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <HAL_I2C_EV_IRQHandler+0x218>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	0a5b      	lsrs	r3, r3, #9
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 ff93 	bl	80051a4 <I2C_Slave_STOPF>
 800427e:	e056      	b.n	800432e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004280:	7bbb      	ldrb	r3, [r7, #14]
 8004282:	2b21      	cmp	r3, #33	; 0x21
 8004284:	d002      	beq.n	800428c <HAL_I2C_EV_IRQHandler+0x224>
 8004286:	7bbb      	ldrb	r3, [r7, #14]
 8004288:	2b29      	cmp	r3, #41	; 0x29
 800428a:	d125      	bne.n	80042d8 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	09db      	lsrs	r3, r3, #7
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00f      	beq.n	80042b8 <HAL_I2C_EV_IRQHandler+0x250>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	0a9b      	lsrs	r3, r3, #10
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d009      	beq.n	80042b8 <HAL_I2C_EV_IRQHandler+0x250>
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fe74 	bl	8004f9e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042b6:	e039      	b.n	800432c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	089b      	lsrs	r3, r3, #2
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d033      	beq.n	800432c <HAL_I2C_EV_IRQHandler+0x2c4>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	0a5b      	lsrs	r3, r3, #9
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d02d      	beq.n	800432c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fea1 	bl	8005018 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042d6:	e029      	b.n	800432c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00f      	beq.n	8004304 <HAL_I2C_EV_IRQHandler+0x29c>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	0a9b      	lsrs	r3, r3, #10
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <HAL_I2C_EV_IRQHandler+0x29c>
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 feac 	bl	800505a <I2C_SlaveReceive_RXNE>
 8004302:	e014      	b.n	800432e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00e      	beq.n	800432e <HAL_I2C_EV_IRQHandler+0x2c6>
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	0a5b      	lsrs	r3, r3, #9
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 feda 	bl	80050d6 <I2C_SlaveReceive_BTF>
 8004322:	e004      	b.n	800432e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004324:	bf00      	nop
 8004326:	e002      	b.n	800432e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800432c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800432e:	3720      	adds	r7, #32
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800434c:	2300      	movs	r3, #0
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004356:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00e      	beq.n	8004382 <HAL_I2C_ER_IRQHandler+0x4e>
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004380:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	0a5b      	lsrs	r3, r3, #9
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00e      	beq.n	80043ac <HAL_I2C_ER_IRQHandler+0x78>
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80043aa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	0a9b      	lsrs	r3, r3, #10
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d03f      	beq.n	8004438 <HAL_I2C_ER_IRQHandler+0x104>
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d039      	beq.n	8004438 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80043c4:	7efb      	ldrb	r3, [r7, #27]
 80043c6:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80043de:	7ebb      	ldrb	r3, [r7, #26]
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d112      	bne.n	800440a <HAL_I2C_ER_IRQHandler+0xd6>
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <HAL_I2C_ER_IRQHandler+0xd6>
 80043ea:	7cfb      	ldrb	r3, [r7, #19]
 80043ec:	2b21      	cmp	r3, #33	; 0x21
 80043ee:	d008      	beq.n	8004402 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	2b29      	cmp	r3, #41	; 0x29
 80043f4:	d005      	beq.n	8004402 <HAL_I2C_ER_IRQHandler+0xce>
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	2b28      	cmp	r3, #40	; 0x28
 80043fa:	d106      	bne.n	800440a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b21      	cmp	r3, #33	; 0x21
 8004400:	d103      	bne.n	800440a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fffe 	bl	8005404 <I2C_Slave_AF>
 8004408:	e016      	b.n	8004438 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004412:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	f043 0304 	orr.w	r3, r3, #4
 800441a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800441c:	7efb      	ldrb	r3, [r7, #27]
 800441e:	2b10      	cmp	r3, #16
 8004420:	d002      	beq.n	8004428 <HAL_I2C_ER_IRQHandler+0xf4>
 8004422:	7efb      	ldrb	r3, [r7, #27]
 8004424:	2b40      	cmp	r3, #64	; 0x40
 8004426:	d107      	bne.n	8004438 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	0adb      	lsrs	r3, r3, #11
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00e      	beq.n	8004462 <HAL_I2C_ER_IRQHandler+0x12e>
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	f043 0308 	orr.w	r3, r3, #8
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004460:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f001 f835 	bl	80054e4 <I2C_ITError>
  }
}
 800447a:	bf00      	nop
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	70fb      	strb	r3, [r7, #3]
 80044ca:	4613      	mov	r3, r2
 80044cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004554:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	d150      	bne.n	8004606 <I2C_MasterTransmit_TXE+0xc8>
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b21      	cmp	r3, #33	; 0x21
 8004568:	d14d      	bne.n	8004606 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d01d      	beq.n	80045ac <I2C_MasterTransmit_TXE+0x6e>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b20      	cmp	r3, #32
 8004574:	d01a      	beq.n	80045ac <I2C_MasterTransmit_TXE+0x6e>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800457c:	d016      	beq.n	80045ac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800458c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2211      	movs	r2, #17
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff ff6c 	bl	8004482 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045aa:	e060      	b.n	800466e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d107      	bne.n	80045f6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ff7d 	bl	80044ee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045f4:	e03b      	b.n	800466e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ff3f 	bl	8004482 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004604:	e033      	b.n	800466e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b21      	cmp	r3, #33	; 0x21
 800460a:	d005      	beq.n	8004618 <I2C_MasterTransmit_TXE+0xda>
 800460c:	7bbb      	ldrb	r3, [r7, #14]
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d12d      	bne.n	800466e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b22      	cmp	r3, #34	; 0x22
 8004616:	d12a      	bne.n	800466e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d108      	bne.n	8004634 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004630:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004632:	e01c      	b.n	800466e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	d103      	bne.n	8004648 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f898 	bl	8004776 <I2C_MemoryTransmit_TXE_BTF>
}
 8004646:	e012      	b.n	800466e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800466c:	e7ff      	b.n	800466e <I2C_MasterTransmit_TXE+0x130>
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b21      	cmp	r3, #33	; 0x21
 800468e:	d165      	bne.n	800475c <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d012      	beq.n	80046c0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	781a      	ldrb	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80046be:	e056      	b.n	800476e <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d01d      	beq.n	8004702 <I2C_MasterTransmit_BTF+0x8c>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d01a      	beq.n	8004702 <I2C_MasterTransmit_BTF+0x8c>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d2:	d016      	beq.n	8004702 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046e2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2211      	movs	r2, #17
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fec1 	bl	8004482 <HAL_I2C_MasterTxCpltCallback>
}
 8004700:	e035      	b.n	800476e <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004710:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004720:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d107      	bne.n	800474c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff fed2 	bl	80044ee <HAL_I2C_MemTxCpltCallback>
}
 800474a:	e010      	b.n	800476e <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fe94 	bl	8004482 <HAL_I2C_MasterTxCpltCallback>
}
 800475a:	e008      	b.n	800476e <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b40      	cmp	r3, #64	; 0x40
 8004766:	d102      	bne.n	800476e <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f804 	bl	8004776 <I2C_MemoryTransmit_TXE_BTF>
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004782:	2b00      	cmp	r3, #0
 8004784:	d11d      	bne.n	80047c2 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478a:	2b01      	cmp	r3, #1
 800478c:	d10b      	bne.n	80047a6 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004792:	b2da      	uxtb	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	1c9a      	adds	r2, r3, #2
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80047a4:	e048      	b.n	8004838 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	121b      	asrs	r3, r3, #8
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047c0:	e03a      	b.n	8004838 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10b      	bne.n	80047e2 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047e0:	e02a      	b.n	8004838 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d126      	bne.n	8004838 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b22      	cmp	r3, #34	; 0x22
 80047f4:	d108      	bne.n	8004808 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004804:	601a      	str	r2, [r3, #0]
}
 8004806:	e017      	b.n	8004838 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b21      	cmp	r3, #33	; 0x21
 8004812:	d111      	bne.n	8004838 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b22      	cmp	r3, #34	; 0x22
 8004856:	d173      	bne.n	8004940 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b03      	cmp	r3, #3
 8004864:	d920      	bls.n	80048a8 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d154      	bne.n	8004940 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80048a6:	e04b      	b.n	8004940 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d047      	beq.n	8004940 <I2C_MasterReceive_RXNE+0xfc>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d002      	beq.n	80048bc <I2C_MasterReceive_RXNE+0x78>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d141      	bne.n	8004940 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ca:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048da:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d10a      	bne.n	800492c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff fdec 	bl	8004502 <HAL_I2C_MemRxCpltCallback>
}
 800492a:	e009      	b.n	8004940 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2212      	movs	r2, #18
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fdab 	bl	8004496 <HAL_I2C_MasterRxCpltCallback>
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b04      	cmp	r3, #4
 800495e:	d11b      	bne.n	8004998 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004996:	e0bd      	b.n	8004b14 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d129      	bne.n	80049f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d00a      	beq.n	80049ce <I2C_MasterReceive_BTF+0x86>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d007      	beq.n	80049ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049f4:	e08e      	b.n	8004b14 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d176      	bne.n	8004aee <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d002      	beq.n	8004a0c <I2C_MasterReceive_BTF+0xc4>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d108      	bne.n	8004a1e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	e019      	b.n	8004a52 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d002      	beq.n	8004a2a <I2C_MasterReceive_BTF+0xe2>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d108      	bne.n	8004a3c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e00a      	b.n	8004a52 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d007      	beq.n	8004a52 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a50:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004aac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d10a      	bne.n	8004ad8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff fd16 	bl	8004502 <HAL_I2C_MemRxCpltCallback>
}
 8004ad6:	e01d      	b.n	8004b14 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2212      	movs	r2, #18
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff fcd5 	bl	8004496 <HAL_I2C_MasterRxCpltCallback>
}
 8004aec:	e012      	b.n	8004b14 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d117      	bne.n	8004b60 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b48:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b4a:	e067      	b.n	8004c1c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	611a      	str	r2, [r3, #16]
}
 8004b5e:	e05d      	b.n	8004c1c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b68:	d133      	bne.n	8004bd2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b21      	cmp	r3, #33	; 0x21
 8004b74:	d109      	bne.n	8004b8a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b86:	611a      	str	r2, [r3, #16]
 8004b88:	e008      	b.n	8004b9c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d004      	beq.n	8004bae <I2C_Master_SB+0x92>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d108      	bne.n	8004bc0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d032      	beq.n	8004c1c <I2C_Master_SB+0x100>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02d      	beq.n	8004c1c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bce:	605a      	str	r2, [r3, #4]
}
 8004bd0:	e024      	b.n	8004c1c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10e      	bne.n	8004bf8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	11db      	asrs	r3, r3, #7
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 0306 	and.w	r3, r3, #6
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f063 030f 	orn	r3, r3, #15
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	611a      	str	r2, [r3, #16]
}
 8004bf6:	e011      	b.n	8004c1c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10d      	bne.n	8004c1c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	11db      	asrs	r3, r3, #7
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	f003 0306 	and.w	r3, r3, #6
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f063 030e 	orn	r3, r3, #14
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	611a      	str	r2, [r3, #16]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d103      	bne.n	8004c4c <I2C_Master_ADD10+0x24>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d011      	beq.n	8004c70 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d104      	bne.n	8004c60 <I2C_Master_ADD10+0x38>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c6e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b091      	sub	sp, #68	; 0x44
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b22      	cmp	r3, #34	; 0x22
 8004ca4:	f040 8169 	bne.w	8004f7a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10f      	bne.n	8004cd0 <I2C_Master_ADDR+0x54>
 8004cb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d10b      	bne.n	8004cd0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	633b      	str	r3, [r7, #48]	; 0x30
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	633b      	str	r3, [r7, #48]	; 0x30
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	e160      	b.n	8004f92 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d11d      	bne.n	8004d14 <I2C_Master_ADDR+0x98>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ce0:	d118      	bne.n	8004d14 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d06:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	651a      	str	r2, [r3, #80]	; 0x50
 8004d12:	e13e      	b.n	8004f92 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d113      	bne.n	8004d46 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e115      	b.n	8004f72 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	f040 808a 	bne.w	8004e66 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d58:	d137      	bne.n	8004dca <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d68:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d78:	d113      	bne.n	8004da2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d88:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	e0e7      	b.n	8004f72 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da2:	2300      	movs	r3, #0
 8004da4:	623b      	str	r3, [r7, #32]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	623b      	str	r3, [r7, #32]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	623b      	str	r3, [r7, #32]
 8004db6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e0d3      	b.n	8004f72 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d02e      	beq.n	8004e2e <I2C_Master_ADDR+0x1b2>
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d02b      	beq.n	8004e2e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	2b12      	cmp	r3, #18
 8004dda:	d102      	bne.n	8004de2 <I2C_Master_ADDR+0x166>
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d125      	bne.n	8004e2e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d00e      	beq.n	8004e06 <I2C_Master_ADDR+0x18a>
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d00b      	beq.n	8004e06 <I2C_Master_ADDR+0x18a>
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	d008      	beq.n	8004e06 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	e007      	b.n	8004e16 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e14:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	61fb      	str	r3, [r7, #28]
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	e0a1      	b.n	8004f72 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e085      	b.n	8004f72 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d14d      	bne.n	8004f0c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d016      	beq.n	8004ea4 <I2C_Master_ADDR+0x228>
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d013      	beq.n	8004ea4 <I2C_Master_ADDR+0x228>
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	d010      	beq.n	8004ea4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e90:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e007      	b.n	8004eb4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eb2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec2:	d117      	bne.n	8004ef4 <I2C_Master_ADDR+0x278>
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eca:	d00b      	beq.n	8004ee4 <I2C_Master_ADDR+0x268>
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d008      	beq.n	8004ee4 <I2C_Master_ADDR+0x268>
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d005      	beq.n	8004ee4 <I2C_Master_ADDR+0x268>
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d002      	beq.n	8004ee4 <I2C_Master_ADDR+0x268>
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d107      	bne.n	8004ef4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ef2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	e032      	b.n	8004f72 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f1a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2a:	d117      	bne.n	8004f5c <I2C_Master_ADDR+0x2e0>
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f32:	d00b      	beq.n	8004f4c <I2C_Master_ADDR+0x2d0>
 8004f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d008      	beq.n	8004f4c <I2C_Master_ADDR+0x2d0>
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d005      	beq.n	8004f4c <I2C_Master_ADDR+0x2d0>
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d002      	beq.n	8004f4c <I2C_Master_ADDR+0x2d0>
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d107      	bne.n	8004f5c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f5a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f78:	e00b      	b.n	8004f92 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
}
 8004f90:	e7ff      	b.n	8004f92 <I2C_Master_ADDR+0x316>
 8004f92:	bf00      	nop
 8004f94:	3744      	adds	r7, #68	; 0x44
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d02b      	beq.n	8005010 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	781a      	ldrb	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d114      	bne.n	8005010 <I2C_SlaveTransmit_TXE+0x72>
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	2b29      	cmp	r3, #41	; 0x29
 8004fea:	d111      	bne.n	8005010 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2221      	movs	r2, #33	; 0x21
 8005000:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2228      	movs	r2, #40	; 0x28
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fa4d 	bl	80044aa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005010:	bf00      	nop
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d011      	beq.n	800504e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	781a      	ldrb	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005068:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d02c      	beq.n	80050ce <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d114      	bne.n	80050ce <I2C_SlaveReceive_RXNE+0x74>
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	2b2a      	cmp	r3, #42	; 0x2a
 80050a8:	d111      	bne.n	80050ce <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2222      	movs	r2, #34	; 0x22
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2228      	movs	r2, #40	; 0x28
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7fb ff73 	bl	8000fb4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d012      	beq.n	800510e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005124:	2300      	movs	r3, #0
 8005126:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005134:	2b28      	cmp	r3, #40	; 0x28
 8005136:	d127      	bne.n	8005188 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005146:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	089b      	lsrs	r3, r3, #2
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005154:	2301      	movs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	09db      	lsrs	r3, r3, #7
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	81bb      	strh	r3, [r7, #12]
 800516a:	e002      	b.n	8005172 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800517a:	89ba      	ldrh	r2, [r7, #12]
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff f99c 	bl	80044be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005186:	e008      	b.n	800519a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0202 	mvn.w	r2, #2
 8005190:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80051c4:	2300      	movs	r3, #0
 80051c6:	60bb      	str	r3, [r7, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0201 	orr.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005200:	d172      	bne.n	80052e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	2b22      	cmp	r3, #34	; 0x22
 8005206:	d002      	beq.n	800520e <I2C_Slave_STOPF+0x6a>
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	2b2a      	cmp	r3, #42	; 0x2a
 800520c:	d135      	bne.n	800527a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	b29a      	uxth	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f043 0204 	orr.w	r2, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005240:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	4618      	mov	r0, r3
 8005248:	f7fd fe7e 	bl	8002f48 <HAL_DMA_GetState>
 800524c:	4603      	mov	r3, r0
 800524e:	2b01      	cmp	r3, #1
 8005250:	d049      	beq.n	80052e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	4a69      	ldr	r2, [pc, #420]	; (80053fc <I2C_Slave_STOPF+0x258>)
 8005258:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	4618      	mov	r0, r3
 8005260:	f7fd fcc6 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d03d      	beq.n	80052e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005274:	4610      	mov	r0, r2
 8005276:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005278:	e035      	b.n	80052e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	b29a      	uxth	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f043 0204 	orr.w	r2, r3, #4
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fd fe48 	bl	8002f48 <HAL_DMA_GetState>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d014      	beq.n	80052e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c2:	4a4e      	ldr	r2, [pc, #312]	; (80053fc <I2C_Slave_STOPF+0x258>)
 80052c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fd fc90 	bl	8002bf0 <HAL_DMA_Abort_IT>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d008      	beq.n	80052e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052e0:	4610      	mov	r0, r2
 80052e2:	4798      	blx	r3
 80052e4:	e000      	b.n	80052e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d03e      	beq.n	8005370 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d112      	bne.n	8005326 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d112      	bne.n	800535a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	f043 0204 	orr.w	r2, r3, #4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f8b3 	bl	80054e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800537e:	e039      	b.n	80053f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b2a      	cmp	r3, #42	; 0x2a
 8005384:	d109      	bne.n	800539a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2228      	movs	r2, #40	; 0x28
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fb fe0d 	bl	8000fb4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b28      	cmp	r3, #40	; 0x28
 80053a4:	d111      	bne.n	80053ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a15      	ldr	r2, [pc, #84]	; (8005400 <I2C_Slave_STOPF+0x25c>)
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff f889 	bl	80044da <HAL_I2C_ListenCpltCallback>
}
 80053c8:	e014      	b.n	80053f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	2b22      	cmp	r3, #34	; 0x22
 80053d0:	d002      	beq.n	80053d8 <I2C_Slave_STOPF+0x234>
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b22      	cmp	r3, #34	; 0x22
 80053d6:	d10d      	bne.n	80053f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fb fde0 	bl	8000fb4 <HAL_I2C_SlaveRxCpltCallback>
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	08005741 	.word	0x08005741
 8005400:	ffff0000 	.word	0xffff0000

08005404 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005412:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b08      	cmp	r3, #8
 800541e:	d002      	beq.n	8005426 <I2C_Slave_AF+0x22>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b20      	cmp	r3, #32
 8005424:	d129      	bne.n	800547a <I2C_Slave_AF+0x76>
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	2b28      	cmp	r3, #40	; 0x28
 800542a:	d126      	bne.n	800547a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a2c      	ldr	r2, [pc, #176]	; (80054e0 <I2C_Slave_AF+0xdc>)
 8005430:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005440:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800544a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff f831 	bl	80044da <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005478:	e02e      	b.n	80054d8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b21      	cmp	r3, #33	; 0x21
 800547e:	d126      	bne.n	80054ce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <I2C_Slave_AF+0xdc>)
 8005484:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2221      	movs	r2, #33	; 0x21
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fe ffef 	bl	80044aa <HAL_I2C_SlaveTxCpltCallback>
}
 80054cc:	e004      	b.n	80054d8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054d6:	615a      	str	r2, [r3, #20]
}
 80054d8:	bf00      	nop
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	ffff0000 	.word	0xffff0000

080054e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d10a      	bne.n	8005516 <I2C_ITError+0x32>
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b22      	cmp	r3, #34	; 0x22
 8005504:	d107      	bne.n	8005516 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005514:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800551c:	2b28      	cmp	r3, #40	; 0x28
 800551e:	d107      	bne.n	8005530 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2228      	movs	r2, #40	; 0x28
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800552e:	e015      	b.n	800555c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800553a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553e:	d006      	beq.n	800554e <I2C_ITError+0x6a>
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	2b60      	cmp	r3, #96	; 0x60
 8005544:	d003      	beq.n	800554e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556a:	d162      	bne.n	8005632 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800557a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b01      	cmp	r3, #1
 8005588:	d020      	beq.n	80055cc <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558e:	4a6a      	ldr	r2, [pc, #424]	; (8005738 <I2C_ITError+0x254>)
 8005590:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	4618      	mov	r0, r3
 8005598:	f7fd fb2a 	bl	8002bf0 <HAL_DMA_Abort_IT>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8089 	beq.w	80056b6 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0201 	bic.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055c6:	4610      	mov	r0, r2
 80055c8:	4798      	blx	r3
 80055ca:	e074      	b.n	80056b6 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	4a59      	ldr	r2, [pc, #356]	; (8005738 <I2C_ITError+0x254>)
 80055d2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fd fb09 	bl	8002bf0 <HAL_DMA_Abort_IT>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d068      	beq.n	80056b6 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d10b      	bne.n	800560a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0201 	bic.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800562c:	4610      	mov	r0, r2
 800562e:	4798      	blx	r3
 8005630:	e041      	b.n	80056b6 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b60      	cmp	r3, #96	; 0x60
 800563c:	d125      	bne.n	800568a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d10b      	bne.n	8005672 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0201 	bic.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fe ff51 	bl	800452a <HAL_I2C_AbortCpltCallback>
 8005688:	e015      	b.n	80056b6 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005694:	2b40      	cmp	r3, #64	; 0x40
 8005696:	d10b      	bne.n	80056b0 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7fe ff30 	bl	8004516 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10e      	bne.n	80056e4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d109      	bne.n	80056e4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d007      	beq.n	80056f4 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b04      	cmp	r3, #4
 8005706:	d113      	bne.n	8005730 <I2C_ITError+0x24c>
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b28      	cmp	r3, #40	; 0x28
 800570c:	d110      	bne.n	8005730 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a0a      	ldr	r2, [pc, #40]	; (800573c <I2C_ITError+0x258>)
 8005712:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fe fed5 	bl	80044da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	08005741 	.word	0x08005741
 800573c:	ffff0000 	.word	0xffff0000

08005740 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005754:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	2200      	movs	r2, #0
 8005764:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	2200      	movs	r2, #0
 8005774:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005784:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	2200      	movs	r2, #0
 800579a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	2200      	movs	r2, #0
 80057aa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0201 	bic.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b60      	cmp	r3, #96	; 0x60
 80057c6:	d10e      	bne.n	80057e6 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7fe fea3 	bl	800452a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057e4:	e027      	b.n	8005836 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057e6:	7afb      	ldrb	r3, [r7, #11]
 80057e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057ec:	2b28      	cmp	r3, #40	; 0x28
 80057ee:	d117      	bne.n	8005820 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800580e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2228      	movs	r2, #40	; 0x28
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800581e:	e007      	b.n	8005830 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7fe fe70 	bl	8004516 <HAL_I2C_ErrorCallback>
}
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	603b      	str	r3, [r7, #0]
 800584a:	4613      	mov	r3, r2
 800584c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800584e:	e025      	b.n	800589c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d021      	beq.n	800589c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005858:	f7fc fa66 	bl	8001d28 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d116      	bne.n	800589c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	f043 0220 	orr.w	r2, r3, #32
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e023      	b.n	80058e4 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	0c1b      	lsrs	r3, r3, #16
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d10d      	bne.n	80058c2 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	43da      	mvns	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4013      	ands	r3, r2
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	461a      	mov	r2, r3
 80058c0:	e00c      	b.n	80058dc <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	43da      	mvns	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	4013      	ands	r3, r2
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	bf0c      	ite	eq
 80058d4:	2301      	moveq	r3, #1
 80058d6:	2300      	movne	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d0b6      	beq.n	8005850 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058f8:	e02d      	b.n	8005956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f8ca 	bl	8005a94 <I2C_IsAcknowledgeFailed>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e02d      	b.n	8005966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d021      	beq.n	8005956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005912:	f7fc fa09 	bl	8001d28 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d116      	bne.n	8005956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f043 0220 	orr.w	r2, r3, #32
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e007      	b.n	8005966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005960:	2b80      	cmp	r3, #128	; 0x80
 8005962:	d1ca      	bne.n	80058fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800597a:	e029      	b.n	80059d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f889 	bl	8005a94 <I2C_IsAcknowledgeFailed>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e029      	b.n	80059e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598c:	f7fc f9cc 	bl	8001d28 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	d302      	bcc.n	80059a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d116      	bne.n	80059d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	f043 0220 	orr.w	r2, r3, #32
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e007      	b.n	80059e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d1ce      	bne.n	800597c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059f4:	e042      	b.n	8005a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d119      	bne.n	8005a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0210 	mvn.w	r2, #16
 8005a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e029      	b.n	8005a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a38:	f7fc f976 	bl	8001d28 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d302      	bcc.n	8005a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d116      	bne.n	8005a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	f043 0220 	orr.w	r2, r3, #32
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e007      	b.n	8005a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d1b5      	bne.n	80059f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aaa:	d11b      	bne.n	8005ae4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ab4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	f043 0204 	orr.w	r2, r3, #4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b02:	d103      	bne.n	8005b0c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b0a:	e007      	b.n	8005b1c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b14:	d102      	bne.n	8005b1c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b32:	2300      	movs	r3, #0
 8005b34:	603b      	str	r3, [r7, #0]
 8005b36:	4b20      	ldr	r3, [pc, #128]	; (8005bb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	4a1f      	ldr	r2, [pc, #124]	; (8005bb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b40:	6413      	str	r3, [r2, #64]	; 0x40
 8005b42:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b4e:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <HAL_PWREx_EnableOverDrive+0x94>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b54:	f7fc f8e8 	bl	8001d28 <HAL_GetTick>
 8005b58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b5a:	e009      	b.n	8005b70 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b5c:	f7fc f8e4 	bl	8001d28 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b6a:	d901      	bls.n	8005b70 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e01f      	b.n	8005bb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b70:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7c:	d1ee      	bne.n	8005b5c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b80:	2201      	movs	r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b84:	f7fc f8d0 	bl	8001d28 <HAL_GetTick>
 8005b88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b8a:	e009      	b.n	8005ba0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b8c:	f7fc f8cc 	bl	8001d28 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b9a:	d901      	bls.n	8005ba0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e007      	b.n	8005bb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bac:	d1ee      	bne.n	8005b8c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	420e0040 	.word	0x420e0040
 8005bc0:	40007000 	.word	0x40007000
 8005bc4:	420e0044 	.word	0x420e0044

08005bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0cc      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bdc:	4b68      	ldr	r3, [pc, #416]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d90c      	bls.n	8005c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bea:	4b65      	ldr	r3, [pc, #404]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b63      	ldr	r3, [pc, #396]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0b8      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d020      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c1c:	4b59      	ldr	r3, [pc, #356]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4a58      	ldr	r2, [pc, #352]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c34:	4b53      	ldr	r3, [pc, #332]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	4a52      	ldr	r2, [pc, #328]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c40:	4b50      	ldr	r3, [pc, #320]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	494d      	ldr	r1, [pc, #308]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d044      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d107      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c66:	4b47      	ldr	r3, [pc, #284]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d119      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e07f      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d003      	beq.n	8005c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d107      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c86:	4b3f      	ldr	r3, [pc, #252]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e06f      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c96:	4b3b      	ldr	r3, [pc, #236]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e067      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ca6:	4b37      	ldr	r3, [pc, #220]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f023 0203 	bic.w	r2, r3, #3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4934      	ldr	r1, [pc, #208]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cb8:	f7fc f836 	bl	8001d28 <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc0:	f7fc f832 	bl	8001d28 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e04f      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd6:	4b2b      	ldr	r3, [pc, #172]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 020c 	and.w	r2, r3, #12
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d1eb      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d20c      	bcs.n	8005d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b20      	ldr	r3, [pc, #128]	; (8005d80 <HAL_RCC_ClockConfig+0x1b8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e032      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d1c:	4b19      	ldr	r3, [pc, #100]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	4916      	ldr	r1, [pc, #88]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d3a:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	490e      	ldr	r1, [pc, #56]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d4e:	f000 f887 	bl	8005e60 <HAL_RCC_GetSysClockFreq>
 8005d52:	4601      	mov	r1, r0
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	091b      	lsrs	r3, r3, #4
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <HAL_RCC_ClockConfig+0x1c0>)
 8005d60:	5cd3      	ldrb	r3, [r2, r3]
 8005d62:	fa21 f303 	lsr.w	r3, r1, r3
 8005d66:	4a09      	ldr	r2, [pc, #36]	; (8005d8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d6a:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <HAL_RCC_ClockConfig+0x1c8>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fb fb92 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023c00 	.word	0x40023c00
 8005d84:	40023800 	.word	0x40023800
 8005d88:	0800b0a4 	.word	0x0800b0a4
 8005d8c:	20000034 	.word	0x20000034
 8005d90:	20000040 	.word	0x20000040

08005d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d98:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20000034 	.word	0x20000034

08005dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005db0:	f7ff fff0 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005db4:	4601      	mov	r1, r0
 8005db6:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	0a9b      	lsrs	r3, r3, #10
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	4a03      	ldr	r2, [pc, #12]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dc2:	5cd3      	ldrb	r3, [r2, r3]
 8005dc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	0800b0b4 	.word	0x0800b0b4

08005dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dd8:	f7ff ffdc 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005ddc:	4601      	mov	r1, r0
 8005dde:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	0b5b      	lsrs	r3, r3, #13
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	4a03      	ldr	r2, [pc, #12]	; (8005df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dea:	5cd3      	ldrb	r3, [r2, r3]
 8005dec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40023800 	.word	0x40023800
 8005df8:	0800b0b4 	.word	0x0800b0b4

08005dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	220f      	movs	r2, #15
 8005e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e0c:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <HAL_RCC_GetClockConfig+0x5c>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0203 	and.w	r2, r3, #3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e18:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <HAL_RCC_GetClockConfig+0x5c>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e24:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <HAL_RCC_GetClockConfig+0x5c>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e30:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <HAL_RCC_GetClockConfig+0x5c>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	08db      	lsrs	r3, r3, #3
 8005e36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e3e:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <HAL_RCC_GetClockConfig+0x60>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 020f 	and.w	r2, r3, #15
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	601a      	str	r2, [r3, #0]
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	40023c00 	.word	0x40023c00

08005e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e7a:	4b9f      	ldr	r3, [pc, #636]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x298>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	2b0c      	cmp	r3, #12
 8005e84:	f200 8130 	bhi.w	80060e8 <HAL_RCC_GetSysClockFreq+0x288>
 8005e88:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <HAL_RCC_GetSysClockFreq+0x30>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005ec5 	.word	0x08005ec5
 8005e94:	080060e9 	.word	0x080060e9
 8005e98:	080060e9 	.word	0x080060e9
 8005e9c:	080060e9 	.word	0x080060e9
 8005ea0:	08005ecb 	.word	0x08005ecb
 8005ea4:	080060e9 	.word	0x080060e9
 8005ea8:	080060e9 	.word	0x080060e9
 8005eac:	080060e9 	.word	0x080060e9
 8005eb0:	08005ed1 	.word	0x08005ed1
 8005eb4:	080060e9 	.word	0x080060e9
 8005eb8:	080060e9 	.word	0x080060e9
 8005ebc:	080060e9 	.word	0x080060e9
 8005ec0:	08005fdf 	.word	0x08005fdf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ec4:	4b8d      	ldr	r3, [pc, #564]	; (80060fc <HAL_RCC_GetSysClockFreq+0x29c>)
 8005ec6:	613b      	str	r3, [r7, #16]
       break;
 8005ec8:	e111      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eca:	4b8d      	ldr	r3, [pc, #564]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005ecc:	613b      	str	r3, [r7, #16]
      break;
 8005ece:	e10e      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ed0:	4b89      	ldr	r3, [pc, #548]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x298>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ed8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eda:	4b87      	ldr	r3, [pc, #540]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x298>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d023      	beq.n	8005f2e <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ee6:	4b84      	ldr	r3, [pc, #528]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x298>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	099b      	lsrs	r3, r3, #6
 8005eec:	f04f 0400 	mov.w	r4, #0
 8005ef0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	ea03 0501 	and.w	r5, r3, r1
 8005efc:	ea04 0602 	and.w	r6, r4, r2
 8005f00:	4a7f      	ldr	r2, [pc, #508]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005f02:	fb02 f106 	mul.w	r1, r2, r6
 8005f06:	2200      	movs	r2, #0
 8005f08:	fb02 f205 	mul.w	r2, r2, r5
 8005f0c:	440a      	add	r2, r1
 8005f0e:	497c      	ldr	r1, [pc, #496]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005f10:	fba5 0101 	umull	r0, r1, r5, r1
 8005f14:	1853      	adds	r3, r2, r1
 8005f16:	4619      	mov	r1, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f04f 0400 	mov.w	r4, #0
 8005f1e:	461a      	mov	r2, r3
 8005f20:	4623      	mov	r3, r4
 8005f22:	f7fa f975 	bl	8000210 <__aeabi_uldivmod>
 8005f26:	4603      	mov	r3, r0
 8005f28:	460c      	mov	r4, r1
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e049      	b.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f2e:	4b72      	ldr	r3, [pc, #456]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x298>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	099b      	lsrs	r3, r3, #6
 8005f34:	f04f 0400 	mov.w	r4, #0
 8005f38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	ea03 0501 	and.w	r5, r3, r1
 8005f44:	ea04 0602 	and.w	r6, r4, r2
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4632      	mov	r2, r6
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	f04f 0400 	mov.w	r4, #0
 8005f54:	0154      	lsls	r4, r2, #5
 8005f56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f5a:	014b      	lsls	r3, r1, #5
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4622      	mov	r2, r4
 8005f60:	1b49      	subs	r1, r1, r5
 8005f62:	eb62 0206 	sbc.w	r2, r2, r6
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	f04f 0400 	mov.w	r4, #0
 8005f6e:	0194      	lsls	r4, r2, #6
 8005f70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f74:	018b      	lsls	r3, r1, #6
 8005f76:	1a5b      	subs	r3, r3, r1
 8005f78:	eb64 0402 	sbc.w	r4, r4, r2
 8005f7c:	f04f 0100 	mov.w	r1, #0
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	00e2      	lsls	r2, r4, #3
 8005f86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f8a:	00d9      	lsls	r1, r3, #3
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4614      	mov	r4, r2
 8005f90:	195b      	adds	r3, r3, r5
 8005f92:	eb44 0406 	adc.w	r4, r4, r6
 8005f96:	f04f 0100 	mov.w	r1, #0
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	02a2      	lsls	r2, r4, #10
 8005fa0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fa4:	0299      	lsls	r1, r3, #10
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4614      	mov	r4, r2
 8005faa:	4618      	mov	r0, r3
 8005fac:	4621      	mov	r1, r4
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f04f 0400 	mov.w	r4, #0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	f7fa f92a 	bl	8000210 <__aeabi_uldivmod>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fc2:	4b4d      	ldr	r3, [pc, #308]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x298>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	0c1b      	lsrs	r3, r3, #16
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	3301      	adds	r3, #1
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fda:	613b      	str	r3, [r7, #16]
      break;
 8005fdc:	e087      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fde:	4b46      	ldr	r3, [pc, #280]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x298>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fe6:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fe8:	4b43      	ldr	r3, [pc, #268]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x298>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d023      	beq.n	800603c <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ff4:	4b40      	ldr	r3, [pc, #256]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x298>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	099b      	lsrs	r3, r3, #6
 8005ffa:	f04f 0400 	mov.w	r4, #0
 8005ffe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	ea03 0501 	and.w	r5, r3, r1
 800600a:	ea04 0602 	and.w	r6, r4, r2
 800600e:	4a3c      	ldr	r2, [pc, #240]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8006010:	fb02 f106 	mul.w	r1, r2, r6
 8006014:	2200      	movs	r2, #0
 8006016:	fb02 f205 	mul.w	r2, r2, r5
 800601a:	440a      	add	r2, r1
 800601c:	4938      	ldr	r1, [pc, #224]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800601e:	fba5 0101 	umull	r0, r1, r5, r1
 8006022:	1853      	adds	r3, r2, r1
 8006024:	4619      	mov	r1, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f04f 0400 	mov.w	r4, #0
 800602c:	461a      	mov	r2, r3
 800602e:	4623      	mov	r3, r4
 8006030:	f7fa f8ee 	bl	8000210 <__aeabi_uldivmod>
 8006034:	4603      	mov	r3, r0
 8006036:	460c      	mov	r4, r1
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e049      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800603c:	4b2e      	ldr	r3, [pc, #184]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x298>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	099b      	lsrs	r3, r3, #6
 8006042:	f04f 0400 	mov.w	r4, #0
 8006046:	f240 11ff 	movw	r1, #511	; 0x1ff
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	ea03 0501 	and.w	r5, r3, r1
 8006052:	ea04 0602 	and.w	r6, r4, r2
 8006056:	4629      	mov	r1, r5
 8006058:	4632      	mov	r2, r6
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	f04f 0400 	mov.w	r4, #0
 8006062:	0154      	lsls	r4, r2, #5
 8006064:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006068:	014b      	lsls	r3, r1, #5
 800606a:	4619      	mov	r1, r3
 800606c:	4622      	mov	r2, r4
 800606e:	1b49      	subs	r1, r1, r5
 8006070:	eb62 0206 	sbc.w	r2, r2, r6
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	f04f 0400 	mov.w	r4, #0
 800607c:	0194      	lsls	r4, r2, #6
 800607e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006082:	018b      	lsls	r3, r1, #6
 8006084:	1a5b      	subs	r3, r3, r1
 8006086:	eb64 0402 	sbc.w	r4, r4, r2
 800608a:	f04f 0100 	mov.w	r1, #0
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	00e2      	lsls	r2, r4, #3
 8006094:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006098:	00d9      	lsls	r1, r3, #3
 800609a:	460b      	mov	r3, r1
 800609c:	4614      	mov	r4, r2
 800609e:	195b      	adds	r3, r3, r5
 80060a0:	eb44 0406 	adc.w	r4, r4, r6
 80060a4:	f04f 0100 	mov.w	r1, #0
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	02a2      	lsls	r2, r4, #10
 80060ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80060b2:	0299      	lsls	r1, r3, #10
 80060b4:	460b      	mov	r3, r1
 80060b6:	4614      	mov	r4, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	4621      	mov	r1, r4
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f04f 0400 	mov.w	r4, #0
 80060c2:	461a      	mov	r2, r3
 80060c4:	4623      	mov	r3, r4
 80060c6:	f7fa f8a3 	bl	8000210 <__aeabi_uldivmod>
 80060ca:	4603      	mov	r3, r0
 80060cc:	460c      	mov	r4, r1
 80060ce:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80060d0:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x298>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	0f1b      	lsrs	r3, r3, #28
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e4:	613b      	str	r3, [r7, #16]
      break;
 80060e6:	e002      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060e8:	4b04      	ldr	r3, [pc, #16]	; (80060fc <HAL_RCC_GetSysClockFreq+0x29c>)
 80060ea:	613b      	str	r3, [r7, #16]
      break;
 80060ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060ee:	693b      	ldr	r3, [r7, #16]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f8:	40023800 	.word	0x40023800
 80060fc:	00f42400 	.word	0x00f42400
 8006100:	017d7840 	.word	0x017d7840

08006104 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8083 	beq.w	8006224 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800611e:	4b95      	ldr	r3, [pc, #596]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 030c 	and.w	r3, r3, #12
 8006126:	2b04      	cmp	r3, #4
 8006128:	d019      	beq.n	800615e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800612a:	4b92      	ldr	r3, [pc, #584]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006132:	2b08      	cmp	r3, #8
 8006134:	d106      	bne.n	8006144 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006136:	4b8f      	ldr	r3, [pc, #572]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800613e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006142:	d00c      	beq.n	800615e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006144:	4b8b      	ldr	r3, [pc, #556]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800614c:	2b0c      	cmp	r3, #12
 800614e:	d112      	bne.n	8006176 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006150:	4b88      	ldr	r3, [pc, #544]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800615c:	d10b      	bne.n	8006176 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800615e:	4b85      	ldr	r3, [pc, #532]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d05b      	beq.n	8006222 <HAL_RCC_OscConfig+0x11e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d157      	bne.n	8006222 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e216      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617e:	d106      	bne.n	800618e <HAL_RCC_OscConfig+0x8a>
 8006180:	4b7c      	ldr	r3, [pc, #496]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a7b      	ldr	r2, [pc, #492]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e01d      	b.n	80061ca <HAL_RCC_OscConfig+0xc6>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006196:	d10c      	bne.n	80061b2 <HAL_RCC_OscConfig+0xae>
 8006198:	4b76      	ldr	r3, [pc, #472]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a75      	ldr	r2, [pc, #468]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 800619e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	4b73      	ldr	r3, [pc, #460]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a72      	ldr	r2, [pc, #456]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 80061aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	e00b      	b.n	80061ca <HAL_RCC_OscConfig+0xc6>
 80061b2:	4b70      	ldr	r3, [pc, #448]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a6f      	ldr	r2, [pc, #444]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 80061b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	4b6d      	ldr	r3, [pc, #436]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a6c      	ldr	r2, [pc, #432]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 80061c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d013      	beq.n	80061fa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d2:	f7fb fda9 	bl	8001d28 <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061da:	f7fb fda5 	bl	8001d28 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b64      	cmp	r3, #100	; 0x64
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e1db      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ec:	4b61      	ldr	r3, [pc, #388]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f0      	beq.n	80061da <HAL_RCC_OscConfig+0xd6>
 80061f8:	e014      	b.n	8006224 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fa:	f7fb fd95 	bl	8001d28 <HAL_GetTick>
 80061fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006202:	f7fb fd91 	bl	8001d28 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b64      	cmp	r3, #100	; 0x64
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e1c7      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006214:	4b57      	ldr	r3, [pc, #348]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f0      	bne.n	8006202 <HAL_RCC_OscConfig+0xfe>
 8006220:	e000      	b.n	8006224 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006222:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d06f      	beq.n	8006310 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006230:	4b50      	ldr	r3, [pc, #320]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 030c 	and.w	r3, r3, #12
 8006238:	2b00      	cmp	r3, #0
 800623a:	d017      	beq.n	800626c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800623c:	4b4d      	ldr	r3, [pc, #308]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006244:	2b08      	cmp	r3, #8
 8006246:	d105      	bne.n	8006254 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006248:	4b4a      	ldr	r3, [pc, #296]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006254:	4b47      	ldr	r3, [pc, #284]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800625c:	2b0c      	cmp	r3, #12
 800625e:	d11c      	bne.n	800629a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006260:	4b44      	ldr	r3, [pc, #272]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d116      	bne.n	800629a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626c:	4b41      	ldr	r3, [pc, #260]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_RCC_OscConfig+0x180>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d001      	beq.n	8006284 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e18f      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006284:	4b3b      	ldr	r3, [pc, #236]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	4938      	ldr	r1, [pc, #224]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006294:	4313      	orrs	r3, r2
 8006296:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006298:	e03a      	b.n	8006310 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d020      	beq.n	80062e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062a2:	4b35      	ldr	r3, [pc, #212]	; (8006378 <HAL_RCC_OscConfig+0x274>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a8:	f7fb fd3e 	bl	8001d28 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062b0:	f7fb fd3a 	bl	8001d28 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e170      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c2:	4b2c      	ldr	r3, [pc, #176]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ce:	4b29      	ldr	r3, [pc, #164]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	4925      	ldr	r1, [pc, #148]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	600b      	str	r3, [r1, #0]
 80062e2:	e015      	b.n	8006310 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062e4:	4b24      	ldr	r3, [pc, #144]	; (8006378 <HAL_RCC_OscConfig+0x274>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ea:	f7fb fd1d 	bl	8001d28 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062f2:	f7fb fd19 	bl	8001d28 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e14f      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006304:	4b1b      	ldr	r3, [pc, #108]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1f0      	bne.n	80062f2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d037      	beq.n	800638c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d016      	beq.n	8006352 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006324:	4b15      	ldr	r3, [pc, #84]	; (800637c <HAL_RCC_OscConfig+0x278>)
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632a:	f7fb fcfd 	bl	8001d28 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006332:	f7fb fcf9 	bl	8001d28 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e12f      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <HAL_RCC_OscConfig+0x270>)
 8006346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <HAL_RCC_OscConfig+0x22e>
 8006350:	e01c      	b.n	800638c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006352:	4b0a      	ldr	r3, [pc, #40]	; (800637c <HAL_RCC_OscConfig+0x278>)
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006358:	f7fb fce6 	bl	8001d28 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800635e:	e00f      	b.n	8006380 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006360:	f7fb fce2 	bl	8001d28 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d908      	bls.n	8006380 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e118      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
 8006372:	bf00      	nop
 8006374:	40023800 	.word	0x40023800
 8006378:	42470000 	.word	0x42470000
 800637c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006380:	4b8a      	ldr	r3, [pc, #552]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e9      	bne.n	8006360 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8097 	beq.w	80064c8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800639e:	4b83      	ldr	r3, [pc, #524]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10f      	bne.n	80063ca <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	4b7f      	ldr	r3, [pc, #508]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	4a7e      	ldr	r2, [pc, #504]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 80063b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ba:	4b7c      	ldr	r3, [pc, #496]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80063c6:	2301      	movs	r3, #1
 80063c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ca:	4b79      	ldr	r3, [pc, #484]	; (80065b0 <HAL_RCC_OscConfig+0x4ac>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d118      	bne.n	8006408 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063d6:	4b76      	ldr	r3, [pc, #472]	; (80065b0 <HAL_RCC_OscConfig+0x4ac>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a75      	ldr	r2, [pc, #468]	; (80065b0 <HAL_RCC_OscConfig+0x4ac>)
 80063dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063e2:	f7fb fca1 	bl	8001d28 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ea:	f7fb fc9d 	bl	8001d28 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e0d3      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063fc:	4b6c      	ldr	r3, [pc, #432]	; (80065b0 <HAL_RCC_OscConfig+0x4ac>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f0      	beq.n	80063ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d106      	bne.n	800641e <HAL_RCC_OscConfig+0x31a>
 8006410:	4b66      	ldr	r3, [pc, #408]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006414:	4a65      	ldr	r2, [pc, #404]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	6713      	str	r3, [r2, #112]	; 0x70
 800641c:	e01c      	b.n	8006458 <HAL_RCC_OscConfig+0x354>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b05      	cmp	r3, #5
 8006424:	d10c      	bne.n	8006440 <HAL_RCC_OscConfig+0x33c>
 8006426:	4b61      	ldr	r3, [pc, #388]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642a:	4a60      	ldr	r2, [pc, #384]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 800642c:	f043 0304 	orr.w	r3, r3, #4
 8006430:	6713      	str	r3, [r2, #112]	; 0x70
 8006432:	4b5e      	ldr	r3, [pc, #376]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	4a5d      	ldr	r2, [pc, #372]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006438:	f043 0301 	orr.w	r3, r3, #1
 800643c:	6713      	str	r3, [r2, #112]	; 0x70
 800643e:	e00b      	b.n	8006458 <HAL_RCC_OscConfig+0x354>
 8006440:	4b5a      	ldr	r3, [pc, #360]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006444:	4a59      	ldr	r2, [pc, #356]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	6713      	str	r3, [r2, #112]	; 0x70
 800644c:	4b57      	ldr	r3, [pc, #348]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 800644e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006450:	4a56      	ldr	r2, [pc, #344]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006452:	f023 0304 	bic.w	r3, r3, #4
 8006456:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d015      	beq.n	800648c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006460:	f7fb fc62 	bl	8001d28 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006466:	e00a      	b.n	800647e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006468:	f7fb fc5e 	bl	8001d28 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	f241 3288 	movw	r2, #5000	; 0x1388
 8006476:	4293      	cmp	r3, r2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e092      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800647e:	4b4b      	ldr	r3, [pc, #300]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0ee      	beq.n	8006468 <HAL_RCC_OscConfig+0x364>
 800648a:	e014      	b.n	80064b6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648c:	f7fb fc4c 	bl	8001d28 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006492:	e00a      	b.n	80064aa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006494:	f7fb fc48 	bl	8001d28 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e07c      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064aa:	4b40      	ldr	r3, [pc, #256]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1ee      	bne.n	8006494 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d105      	bne.n	80064c8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064bc:	4b3b      	ldr	r3, [pc, #236]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	4a3a      	ldr	r2, [pc, #232]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 80064c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d068      	beq.n	80065a2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064d0:	4b36      	ldr	r3, [pc, #216]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f003 030c 	and.w	r3, r3, #12
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d060      	beq.n	800659e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d145      	bne.n	8006570 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064e4:	4b33      	ldr	r3, [pc, #204]	; (80065b4 <HAL_RCC_OscConfig+0x4b0>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fb fc1d 	bl	8001d28 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f2:	f7fb fc19 	bl	8001d28 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e04f      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006504:	4b29      	ldr	r3, [pc, #164]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1f0      	bne.n	80064f2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	019b      	lsls	r3, r3, #6
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	085b      	lsrs	r3, r3, #1
 8006528:	3b01      	subs	r3, #1
 800652a:	041b      	lsls	r3, r3, #16
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	061b      	lsls	r3, r3, #24
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	071b      	lsls	r3, r3, #28
 800653c:	491b      	ldr	r1, [pc, #108]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 800653e:	4313      	orrs	r3, r2
 8006540:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006542:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <HAL_RCC_OscConfig+0x4b0>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006548:	f7fb fbee 	bl	8001d28 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006550:	f7fb fbea 	bl	8001d28 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e020      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0f0      	beq.n	8006550 <HAL_RCC_OscConfig+0x44c>
 800656e:	e018      	b.n	80065a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006570:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <HAL_RCC_OscConfig+0x4b0>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006576:	f7fb fbd7 	bl	8001d28 <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800657e:	f7fb fbd3 	bl	8001d28 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e009      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006590:	4b06      	ldr	r3, [pc, #24]	; (80065ac <HAL_RCC_OscConfig+0x4a8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f0      	bne.n	800657e <HAL_RCC_OscConfig+0x47a>
 800659c:	e001      	b.n	80065a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40023800 	.word	0x40023800
 80065b0:	40007000 	.word	0x40007000
 80065b4:	42470060 	.word	0x42470060

080065b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e056      	b.n	8006678 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7fa fe85 	bl	80012f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006600:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	431a      	orrs	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	ea42 0103 	orr.w	r1, r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	0c1b      	lsrs	r3, r3, #16
 8006648:	f003 0104 	and.w	r1, r3, #4
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006666:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_SPI_Transmit+0x22>
 800669e:	2302      	movs	r3, #2
 80066a0:	e11e      	b.n	80068e0 <HAL_SPI_Transmit+0x260>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066aa:	f7fb fb3d 	bl	8001d28 <HAL_GetTick>
 80066ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d002      	beq.n	80066c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80066c0:	2302      	movs	r3, #2
 80066c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066c4:	e103      	b.n	80068ce <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_SPI_Transmit+0x52>
 80066cc:	88fb      	ldrh	r3, [r7, #6]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d102      	bne.n	80066d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066d6:	e0fa      	b.n	80068ce <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2203      	movs	r2, #3
 80066dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	88fa      	ldrh	r2, [r7, #6]
 80066f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	88fa      	ldrh	r2, [r7, #6]
 80066f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800671e:	d107      	bne.n	8006730 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800672e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	d007      	beq.n	800674e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800674c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006756:	d14b      	bne.n	80067f0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <HAL_SPI_Transmit+0xe6>
 8006760:	8afb      	ldrh	r3, [r7, #22]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d13e      	bne.n	80067e4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	881a      	ldrh	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	1c9a      	adds	r2, r3, #2
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800678a:	e02b      	b.n	80067e4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b02      	cmp	r3, #2
 8006798:	d112      	bne.n	80067c0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679e:	881a      	ldrh	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	1c9a      	adds	r2, r3, #2
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80067be:	e011      	b.n	80067e4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067c0:	f7fb fab2 	bl	8001d28 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d803      	bhi.n	80067d8 <HAL_SPI_Transmit+0x158>
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d102      	bne.n	80067de <HAL_SPI_Transmit+0x15e>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d102      	bne.n	80067e4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067e2:	e074      	b.n	80068ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1ce      	bne.n	800678c <HAL_SPI_Transmit+0x10c>
 80067ee:	e04c      	b.n	800688a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <HAL_SPI_Transmit+0x17e>
 80067f8:	8afb      	ldrh	r3, [r7, #22]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d140      	bne.n	8006880 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	330c      	adds	r3, #12
 8006808:	7812      	ldrb	r2, [r2, #0]
 800680a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800681a:	b29b      	uxth	r3, r3
 800681c:	3b01      	subs	r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006824:	e02c      	b.n	8006880 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b02      	cmp	r3, #2
 8006832:	d113      	bne.n	800685c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	330c      	adds	r3, #12
 800683e:	7812      	ldrb	r2, [r2, #0]
 8006840:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	86da      	strh	r2, [r3, #54]	; 0x36
 800685a:	e011      	b.n	8006880 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800685c:	f7fb fa64 	bl	8001d28 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d803      	bhi.n	8006874 <HAL_SPI_Transmit+0x1f4>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006872:	d102      	bne.n	800687a <HAL_SPI_Transmit+0x1fa>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800687e:	e026      	b.n	80068ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1cd      	bne.n	8006826 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 fafa 	bl	8006e88 <SPI_EndRxTxTransaction>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068a8:	2300      	movs	r3, #0
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	613b      	str	r3, [r7, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	77fb      	strb	r3, [r7, #31]
 80068ca:	e000      	b.n	80068ce <HAL_SPI_Transmit+0x24e>
  }

error:
 80068cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068de:	7ffb      	ldrb	r3, [r7, #31]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3720      	adds	r7, #32
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_SPI_Transmit_DMA+0x20>
 8006904:	2302      	movs	r3, #2
 8006906:	e093      	b.n	8006a30 <HAL_SPI_Transmit_DMA+0x148>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	d002      	beq.n	8006922 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800691c:	2302      	movs	r3, #2
 800691e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006920:	e081      	b.n	8006a26 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_SPI_Transmit_DMA+0x46>
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006932:	e078      	b.n	8006a26 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2203      	movs	r2, #3
 8006938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	88fa      	ldrh	r2, [r7, #6]
 800694c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	88fa      	ldrh	r2, [r7, #6]
 8006952:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697a:	d107      	bne.n	800698c <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800698a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006990:	4a29      	ldr	r2, [pc, #164]	; (8006a38 <HAL_SPI_Transmit_DMA+0x150>)
 8006992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006998:	4a28      	ldr	r2, [pc, #160]	; (8006a3c <HAL_SPI_Transmit_DMA+0x154>)
 800699a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a0:	4a27      	ldr	r2, [pc, #156]	; (8006a40 <HAL_SPI_Transmit_DMA+0x158>)
 80069a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a8:	2200      	movs	r2, #0
 80069aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	4619      	mov	r1, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	330c      	adds	r3, #12
 80069bc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069c4:	f7fc f8bc 	bl	8002b40 <HAL_DMA_Start_IT>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00c      	beq.n	80069e8 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d2:	f043 0210 	orr.w	r2, r3, #16
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80069e6:	e01e      	b.n	8006a26 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f2:	2b40      	cmp	r3, #64	; 0x40
 80069f4:	d007      	beq.n	8006a06 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a04:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0220 	orr.w	r2, r2, #32
 8006a14:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0202 	orr.w	r2, r2, #2
 8006a24:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	08006d31 	.word	0x08006d31
 8006a3c:	08006c89 	.word	0x08006c89
 8006a40:	08006d4d 	.word	0x08006d4d

08006a44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	099b      	lsrs	r3, r3, #6
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10f      	bne.n	8006a88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	099b      	lsrs	r3, r3, #6
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
    return;
 8006a86:	e0d8      	b.n	8006c3a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00a      	beq.n	8006aaa <HAL_SPI_IRQHandler+0x66>
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	09db      	lsrs	r3, r3, #7
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d004      	beq.n	8006aaa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	4798      	blx	r3
    return;
 8006aa8:	e0c7      	b.n	8006c3a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_SPI_IRQHandler+0x8c>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	099b      	lsrs	r3, r3, #6
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	0a1b      	lsrs	r3, r3, #8
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80b5 	beq.w	8006c3a <HAL_SPI_IRQHandler+0x1f6>
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80ae 	beq.w	8006c3a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	099b      	lsrs	r3, r3, #6
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d023      	beq.n	8006b32 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d011      	beq.n	8006b1a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afa:	f043 0204 	orr.w	r2, r3, #4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	617b      	str	r3, [r7, #20]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	e00b      	b.n	8006b32 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	693b      	ldr	r3, [r7, #16]
        return;
 8006b30:	e083      	b.n	8006c3a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d014      	beq.n	8006b68 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f043 0201 	orr.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	0a1b      	lsrs	r3, r3, #8
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	f043 0208 	orr.w	r2, r3, #8
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b80:	2300      	movs	r3, #0
 8006b82:	60bb      	str	r3, [r7, #8]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	60bb      	str	r3, [r7, #8]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d050      	beq.n	8006c38 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ba4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <HAL_SPI_IRQHandler+0x17e>
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d034      	beq.n	8006c2c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0203 	bic.w	r2, r2, #3
 8006bd0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d011      	beq.n	8006bfe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bde:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <HAL_SPI_IRQHandler+0x1fc>)
 8006be0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fc f802 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d016      	beq.n	8006c34 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0a:	4a0d      	ldr	r2, [pc, #52]	; (8006c40 <HAL_SPI_IRQHandler+0x1fc>)
 8006c0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fb ffec 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006c2a:	e003      	b.n	8006c34 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f813 	bl	8006c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c32:	e000      	b.n	8006c36 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006c34:	bf00      	nop
    return;
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
  }
}
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	08006d8d 	.word	0x08006d8d

08006c44 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c7a:	b2db      	uxtb	r3, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c96:	f7fb f847 	bl	8001d28 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006caa:	d03b      	beq.n	8006d24 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0220 	bic.w	r2, r2, #32
 8006cba:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0202 	bic.w	r2, r2, #2
 8006cca:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	2164      	movs	r1, #100	; 0x64
 8006cd0:	6978      	ldr	r0, [r7, #20]
 8006cd2:	f000 f8d9 	bl	8006e88 <SPI_EndRxTxTransaction>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce0:	f043 0220 	orr.w	r2, r3, #32
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006d1c:	6978      	ldr	r0, [r7, #20]
 8006d1e:	f7ff ff9b 	bl	8006c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006d22:	e002      	b.n	8006d2a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006d24:	6978      	ldr	r0, [r7, #20]
 8006d26:	f7fa f92b 	bl	8000f80 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f7ff ff80 	bl	8006c44 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0203 	bic.w	r2, r2, #3
 8006d68:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6e:	f043 0210 	orr.w	r2, r3, #16
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f7ff ff6a 	bl	8006c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d84:	bf00      	nop
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff ff56 	bl	8006c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	603b      	str	r3, [r7, #0]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dc4:	e04c      	b.n	8006e60 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dcc:	d048      	beq.n	8006e60 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006dce:	f7fa ffab 	bl	8001d28 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d902      	bls.n	8006de4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d13d      	bne.n	8006e60 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006df2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dfc:	d111      	bne.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e06:	d004      	beq.n	8006e12 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e10:	d107      	bne.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2a:	d10f      	bne.n	8006e4c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e00f      	b.n	8006e80 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bf0c      	ite	eq
 8006e70:	2301      	moveq	r3, #1
 8006e72:	2300      	movne	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d1a3      	bne.n	8006dc6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e94:	4b1b      	ldr	r3, [pc, #108]	; (8006f04 <SPI_EndRxTxTransaction+0x7c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1b      	ldr	r2, [pc, #108]	; (8006f08 <SPI_EndRxTxTransaction+0x80>)
 8006e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9e:	0d5b      	lsrs	r3, r3, #21
 8006ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ea4:	fb02 f303 	mul.w	r3, r2, r3
 8006ea8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eb2:	d112      	bne.n	8006eda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2180      	movs	r1, #128	; 0x80
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff ff78 	bl	8006db4 <SPI_WaitFlagStateUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d016      	beq.n	8006ef8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ece:	f043 0220 	orr.w	r2, r3, #32
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e00f      	b.n	8006efa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00a      	beq.n	8006ef6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d0f2      	beq.n	8006eda <SPI_EndRxTxTransaction+0x52>
 8006ef4:	e000      	b.n	8006ef8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ef6:	bf00      	nop
  }

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000034 	.word	0x20000034
 8006f08:	165e9f81 	.word	0x165e9f81

08006f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e01d      	b.n	8006f5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f815 	bl	8006f62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	f000 f968 	bl	8007220 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f042 0201 	orr.w	r2, r2, #1
 8006f8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b06      	cmp	r3, #6
 8006f9e:	d007      	beq.n	8006fb0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d122      	bne.n	800701a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d11b      	bne.n	800701a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f06f 0202 	mvn.w	r2, #2
 8006fea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	f003 0303 	and.w	r3, r3, #3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f8ee 	bl	80071e2 <HAL_TIM_IC_CaptureCallback>
 8007006:	e005      	b.n	8007014 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f8e0 	bl	80071ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f8f1 	bl	80071f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b04      	cmp	r3, #4
 8007026:	d122      	bne.n	800706e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	2b04      	cmp	r3, #4
 8007034:	d11b      	bne.n	800706e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f06f 0204 	mvn.w	r2, #4
 800703e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f8c4 	bl	80071e2 <HAL_TIM_IC_CaptureCallback>
 800705a:	e005      	b.n	8007068 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f8b6 	bl	80071ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f8c7 	bl	80071f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b08      	cmp	r3, #8
 800707a:	d122      	bne.n	80070c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f003 0308 	and.w	r3, r3, #8
 8007086:	2b08      	cmp	r3, #8
 8007088:	d11b      	bne.n	80070c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f06f 0208 	mvn.w	r2, #8
 8007092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2204      	movs	r2, #4
 8007098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f89a 	bl	80071e2 <HAL_TIM_IC_CaptureCallback>
 80070ae:	e005      	b.n	80070bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f88c 	bl	80071ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f89d 	bl	80071f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	f003 0310 	and.w	r3, r3, #16
 80070cc:	2b10      	cmp	r3, #16
 80070ce:	d122      	bne.n	8007116 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f003 0310 	and.w	r3, r3, #16
 80070da:	2b10      	cmp	r3, #16
 80070dc:	d11b      	bne.n	8007116 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f06f 0210 	mvn.w	r2, #16
 80070e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2208      	movs	r2, #8
 80070ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f870 	bl	80071e2 <HAL_TIM_IC_CaptureCallback>
 8007102:	e005      	b.n	8007110 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f862 	bl	80071ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f873 	bl	80071f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b01      	cmp	r3, #1
 8007122:	d10e      	bne.n	8007142 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b01      	cmp	r3, #1
 8007130:	d107      	bne.n	8007142 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f06f 0201 	mvn.w	r2, #1
 800713a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7f9 ffbb 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714c:	2b80      	cmp	r3, #128	; 0x80
 800714e:	d10e      	bne.n	800716e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715a:	2b80      	cmp	r3, #128	; 0x80
 800715c:	d107      	bne.n	800716e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f903 	bl	8007374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007178:	2b40      	cmp	r3, #64	; 0x40
 800717a:	d10e      	bne.n	800719a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007186:	2b40      	cmp	r3, #64	; 0x40
 8007188:	d107      	bne.n	800719a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f838 	bl	800720a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d10e      	bne.n	80071c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	d107      	bne.n	80071c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f06f 0220 	mvn.w	r2, #32
 80071be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f8cd 	bl	8007360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
	...

08007220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a40      	ldr	r2, [pc, #256]	; (8007334 <TIM_Base_SetConfig+0x114>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d013      	beq.n	8007260 <TIM_Base_SetConfig+0x40>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723e:	d00f      	beq.n	8007260 <TIM_Base_SetConfig+0x40>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a3d      	ldr	r2, [pc, #244]	; (8007338 <TIM_Base_SetConfig+0x118>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00b      	beq.n	8007260 <TIM_Base_SetConfig+0x40>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a3c      	ldr	r2, [pc, #240]	; (800733c <TIM_Base_SetConfig+0x11c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d007      	beq.n	8007260 <TIM_Base_SetConfig+0x40>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a3b      	ldr	r2, [pc, #236]	; (8007340 <TIM_Base_SetConfig+0x120>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_Base_SetConfig+0x40>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a3a      	ldr	r2, [pc, #232]	; (8007344 <TIM_Base_SetConfig+0x124>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d108      	bne.n	8007272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a2f      	ldr	r2, [pc, #188]	; (8007334 <TIM_Base_SetConfig+0x114>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d02b      	beq.n	80072d2 <TIM_Base_SetConfig+0xb2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007280:	d027      	beq.n	80072d2 <TIM_Base_SetConfig+0xb2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a2c      	ldr	r2, [pc, #176]	; (8007338 <TIM_Base_SetConfig+0x118>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d023      	beq.n	80072d2 <TIM_Base_SetConfig+0xb2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a2b      	ldr	r2, [pc, #172]	; (800733c <TIM_Base_SetConfig+0x11c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d01f      	beq.n	80072d2 <TIM_Base_SetConfig+0xb2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a2a      	ldr	r2, [pc, #168]	; (8007340 <TIM_Base_SetConfig+0x120>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d01b      	beq.n	80072d2 <TIM_Base_SetConfig+0xb2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a29      	ldr	r2, [pc, #164]	; (8007344 <TIM_Base_SetConfig+0x124>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d017      	beq.n	80072d2 <TIM_Base_SetConfig+0xb2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a28      	ldr	r2, [pc, #160]	; (8007348 <TIM_Base_SetConfig+0x128>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d013      	beq.n	80072d2 <TIM_Base_SetConfig+0xb2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a27      	ldr	r2, [pc, #156]	; (800734c <TIM_Base_SetConfig+0x12c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00f      	beq.n	80072d2 <TIM_Base_SetConfig+0xb2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a26      	ldr	r2, [pc, #152]	; (8007350 <TIM_Base_SetConfig+0x130>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00b      	beq.n	80072d2 <TIM_Base_SetConfig+0xb2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a25      	ldr	r2, [pc, #148]	; (8007354 <TIM_Base_SetConfig+0x134>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d007      	beq.n	80072d2 <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a24      	ldr	r2, [pc, #144]	; (8007358 <TIM_Base_SetConfig+0x138>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d003      	beq.n	80072d2 <TIM_Base_SetConfig+0xb2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a23      	ldr	r2, [pc, #140]	; (800735c <TIM_Base_SetConfig+0x13c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d108      	bne.n	80072e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a0a      	ldr	r2, [pc, #40]	; (8007334 <TIM_Base_SetConfig+0x114>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d003      	beq.n	8007318 <TIM_Base_SetConfig+0xf8>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a0c      	ldr	r2, [pc, #48]	; (8007344 <TIM_Base_SetConfig+0x124>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d103      	bne.n	8007320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	691a      	ldr	r2, [r3, #16]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	615a      	str	r2, [r3, #20]
}
 8007326:	bf00      	nop
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	40010000 	.word	0x40010000
 8007338:	40000400 	.word	0x40000400
 800733c:	40000800 	.word	0x40000800
 8007340:	40000c00 	.word	0x40000c00
 8007344:	40010400 	.word	0x40010400
 8007348:	40014000 	.word	0x40014000
 800734c:	40014400 	.word	0x40014400
 8007350:	40014800 	.word	0x40014800
 8007354:	40001800 	.word	0x40001800
 8007358:	40001c00 	.word	0x40001c00
 800735c:	40002000 	.word	0x40002000

08007360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e03f      	b.n	800741a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7fa f822 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2224      	movs	r2, #36	; 0x24
 80073b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fa69 	bl	80078a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	691a      	ldr	r2, [r3, #16]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	695a      	ldr	r2, [r3, #20]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2220      	movs	r2, #32
 8007414:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007444:	2300      	movs	r3, #0
 8007446:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10d      	bne.n	8007476 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d008      	beq.n	8007476 <HAL_UART_IRQHandler+0x52>
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f996 	bl	80077a0 <UART_Receive_IT>
      return;
 8007474:	e0d1      	b.n	800761a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80b0 	beq.w	80075de <HAL_UART_IRQHandler+0x1ba>
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	d105      	bne.n	8007494 <HAL_UART_IRQHandler+0x70>
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 80a5 	beq.w	80075de <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <HAL_UART_IRQHandler+0x90>
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ac:	f043 0201 	orr.w	r2, r3, #1
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <HAL_UART_IRQHandler+0xb0>
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074cc:	f043 0202 	orr.w	r2, r3, #2
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <HAL_UART_IRQHandler+0xd0>
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ec:	f043 0204 	orr.w	r2, r3, #4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00f      	beq.n	800751e <HAL_UART_IRQHandler+0xfa>
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	f003 0320 	and.w	r3, r3, #32
 8007504:	2b00      	cmp	r3, #0
 8007506:	d104      	bne.n	8007512 <HAL_UART_IRQHandler+0xee>
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007516:	f043 0208 	orr.w	r2, r3, #8
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007522:	2b00      	cmp	r3, #0
 8007524:	d078      	beq.n	8007618 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d007      	beq.n	8007540 <HAL_UART_IRQHandler+0x11c>
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f930 	bl	80077a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b40      	cmp	r3, #64	; 0x40
 800754c:	bf0c      	ite	eq
 800754e:	2301      	moveq	r3, #1
 8007550:	2300      	movne	r3, #0
 8007552:	b2db      	uxtb	r3, r3
 8007554:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d102      	bne.n	8007568 <HAL_UART_IRQHandler+0x144>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d031      	beq.n	80075cc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f879 	bl	8007660 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007578:	2b40      	cmp	r3, #64	; 0x40
 800757a:	d123      	bne.n	80075c4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	695a      	ldr	r2, [r3, #20]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800758a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007590:	2b00      	cmp	r3, #0
 8007592:	d013      	beq.n	80075bc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007598:	4a21      	ldr	r2, [pc, #132]	; (8007620 <HAL_UART_IRQHandler+0x1fc>)
 800759a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fb fb25 	bl	8002bf0 <HAL_DMA_Abort_IT>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d016      	beq.n	80075da <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075b6:	4610      	mov	r0, r2
 80075b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ba:	e00e      	b.n	80075da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f845 	bl	800764c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c2:	e00a      	b.n	80075da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f841 	bl	800764c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ca:	e006      	b.n	80075da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f83d 	bl	800764c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80075d8:	e01e      	b.n	8007618 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075da:	bf00      	nop
    return;
 80075dc:	e01c      	b.n	8007618 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <HAL_UART_IRQHandler+0x1d6>
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f866 	bl	80076c4 <UART_Transmit_IT>
    return;
 80075f8:	e00f      	b.n	800761a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <HAL_UART_IRQHandler+0x1f6>
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f8ae 	bl	8007770 <UART_EndTransmit_IT>
    return;
 8007614:	bf00      	nop
 8007616:	e000      	b.n	800761a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007618:	bf00      	nop
  }
}
 800761a:	3720      	adds	r7, #32
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	0800769d 	.word	0x0800769d

08007624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007676:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695a      	ldr	r2, [r3, #20]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0201 	bic.w	r2, r2, #1
 8007686:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff ffc8 	bl	800764c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b21      	cmp	r3, #33	; 0x21
 80076d6:	d144      	bne.n	8007762 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e0:	d11a      	bne.n	8007718 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076f6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d105      	bne.n	800770c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	1c9a      	adds	r2, r3, #2
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	621a      	str	r2, [r3, #32]
 800770a:	e00e      	b.n	800772a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	621a      	str	r2, [r3, #32]
 8007716:	e008      	b.n	800772a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	1c59      	adds	r1, r3, #1
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6211      	str	r1, [r2, #32]
 8007722:	781a      	ldrb	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29b      	uxth	r3, r3
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	4619      	mov	r1, r3
 8007738:	84d1      	strh	r1, [r2, #38]	; 0x26
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10f      	bne.n	800775e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800774c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800775c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	e000      	b.n	8007764 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007762:	2302      	movs	r3, #2
  }
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007786:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff ff47 	bl	8007624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b22      	cmp	r3, #34	; 0x22
 80077b2:	d171      	bne.n	8007898 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077bc:	d123      	bne.n	8007806 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10e      	bne.n	80077ea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d8:	b29a      	uxth	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e2:	1c9a      	adds	r2, r3, #2
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	629a      	str	r2, [r3, #40]	; 0x28
 80077e8:	e029      	b.n	800783e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	629a      	str	r2, [r3, #40]	; 0x28
 8007804:	e01b      	b.n	800783e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6858      	ldr	r0, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007818:	1c59      	adds	r1, r3, #1
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	6291      	str	r1, [r2, #40]	; 0x28
 800781e:	b2c2      	uxtb	r2, r0
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	e00c      	b.n	800783e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	b2da      	uxtb	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007830:	1c58      	adds	r0, r3, #1
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	6288      	str	r0, [r1, #40]	; 0x28
 8007836:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007842:	b29b      	uxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	b29b      	uxth	r3, r3
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	4619      	mov	r1, r3
 800784c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800784e:	2b00      	cmp	r3, #0
 8007850:	d120      	bne.n	8007894 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0220 	bic.w	r2, r2, #32
 8007860:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007870:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	695a      	ldr	r2, [r3, #20]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2220      	movs	r2, #32
 8007886:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff fed4 	bl	8007638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	e002      	b.n	800789a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	e000      	b.n	800789a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007898:	2302      	movs	r3, #2
  }
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80078e6:	f023 030c 	bic.w	r3, r3, #12
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	430b      	orrs	r3, r1
 80078f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007912:	f040 818b 	bne.w	8007c2c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4ac1      	ldr	r2, [pc, #772]	; (8007c20 <UART_SetConfig+0x37c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d005      	beq.n	800792c <UART_SetConfig+0x88>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4abf      	ldr	r2, [pc, #764]	; (8007c24 <UART_SetConfig+0x380>)
 8007926:	4293      	cmp	r3, r2
 8007928:	f040 80bd 	bne.w	8007aa6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800792c:	f7fe fa52 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 8007930:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	461d      	mov	r5, r3
 8007936:	f04f 0600 	mov.w	r6, #0
 800793a:	46a8      	mov	r8, r5
 800793c:	46b1      	mov	r9, r6
 800793e:	eb18 0308 	adds.w	r3, r8, r8
 8007942:	eb49 0409 	adc.w	r4, r9, r9
 8007946:	4698      	mov	r8, r3
 8007948:	46a1      	mov	r9, r4
 800794a:	eb18 0805 	adds.w	r8, r8, r5
 800794e:	eb49 0906 	adc.w	r9, r9, r6
 8007952:	f04f 0100 	mov.w	r1, #0
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800795e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007962:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007966:	4688      	mov	r8, r1
 8007968:	4691      	mov	r9, r2
 800796a:	eb18 0005 	adds.w	r0, r8, r5
 800796e:	eb49 0106 	adc.w	r1, r9, r6
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	461d      	mov	r5, r3
 8007978:	f04f 0600 	mov.w	r6, #0
 800797c:	196b      	adds	r3, r5, r5
 800797e:	eb46 0406 	adc.w	r4, r6, r6
 8007982:	461a      	mov	r2, r3
 8007984:	4623      	mov	r3, r4
 8007986:	f7f8 fc43 	bl	8000210 <__aeabi_uldivmod>
 800798a:	4603      	mov	r3, r0
 800798c:	460c      	mov	r4, r1
 800798e:	461a      	mov	r2, r3
 8007990:	4ba5      	ldr	r3, [pc, #660]	; (8007c28 <UART_SetConfig+0x384>)
 8007992:	fba3 2302 	umull	r2, r3, r3, r2
 8007996:	095b      	lsrs	r3, r3, #5
 8007998:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	461d      	mov	r5, r3
 80079a0:	f04f 0600 	mov.w	r6, #0
 80079a4:	46a9      	mov	r9, r5
 80079a6:	46b2      	mov	sl, r6
 80079a8:	eb19 0309 	adds.w	r3, r9, r9
 80079ac:	eb4a 040a 	adc.w	r4, sl, sl
 80079b0:	4699      	mov	r9, r3
 80079b2:	46a2      	mov	sl, r4
 80079b4:	eb19 0905 	adds.w	r9, r9, r5
 80079b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80079bc:	f04f 0100 	mov.w	r1, #0
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079d0:	4689      	mov	r9, r1
 80079d2:	4692      	mov	sl, r2
 80079d4:	eb19 0005 	adds.w	r0, r9, r5
 80079d8:	eb4a 0106 	adc.w	r1, sl, r6
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	461d      	mov	r5, r3
 80079e2:	f04f 0600 	mov.w	r6, #0
 80079e6:	196b      	adds	r3, r5, r5
 80079e8:	eb46 0406 	adc.w	r4, r6, r6
 80079ec:	461a      	mov	r2, r3
 80079ee:	4623      	mov	r3, r4
 80079f0:	f7f8 fc0e 	bl	8000210 <__aeabi_uldivmod>
 80079f4:	4603      	mov	r3, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	461a      	mov	r2, r3
 80079fa:	4b8b      	ldr	r3, [pc, #556]	; (8007c28 <UART_SetConfig+0x384>)
 80079fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007a00:	095b      	lsrs	r3, r3, #5
 8007a02:	2164      	movs	r1, #100	; 0x64
 8007a04:	fb01 f303 	mul.w	r3, r1, r3
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	3332      	adds	r3, #50	; 0x32
 8007a0e:	4a86      	ldr	r2, [pc, #536]	; (8007c28 <UART_SetConfig+0x384>)
 8007a10:	fba2 2303 	umull	r2, r3, r2, r3
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a1c:	4498      	add	r8, r3
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	461d      	mov	r5, r3
 8007a22:	f04f 0600 	mov.w	r6, #0
 8007a26:	46a9      	mov	r9, r5
 8007a28:	46b2      	mov	sl, r6
 8007a2a:	eb19 0309 	adds.w	r3, r9, r9
 8007a2e:	eb4a 040a 	adc.w	r4, sl, sl
 8007a32:	4699      	mov	r9, r3
 8007a34:	46a2      	mov	sl, r4
 8007a36:	eb19 0905 	adds.w	r9, r9, r5
 8007a3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a3e:	f04f 0100 	mov.w	r1, #0
 8007a42:	f04f 0200 	mov.w	r2, #0
 8007a46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a52:	4689      	mov	r9, r1
 8007a54:	4692      	mov	sl, r2
 8007a56:	eb19 0005 	adds.w	r0, r9, r5
 8007a5a:	eb4a 0106 	adc.w	r1, sl, r6
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	461d      	mov	r5, r3
 8007a64:	f04f 0600 	mov.w	r6, #0
 8007a68:	196b      	adds	r3, r5, r5
 8007a6a:	eb46 0406 	adc.w	r4, r6, r6
 8007a6e:	461a      	mov	r2, r3
 8007a70:	4623      	mov	r3, r4
 8007a72:	f7f8 fbcd 	bl	8000210 <__aeabi_uldivmod>
 8007a76:	4603      	mov	r3, r0
 8007a78:	460c      	mov	r4, r1
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	4b6a      	ldr	r3, [pc, #424]	; (8007c28 <UART_SetConfig+0x384>)
 8007a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	2164      	movs	r1, #100	; 0x64
 8007a86:	fb01 f303 	mul.w	r3, r1, r3
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	3332      	adds	r3, #50	; 0x32
 8007a90:	4a65      	ldr	r2, [pc, #404]	; (8007c28 <UART_SetConfig+0x384>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	f003 0207 	and.w	r2, r3, #7
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4442      	add	r2, r8
 8007aa2:	609a      	str	r2, [r3, #8]
 8007aa4:	e26f      	b.n	8007f86 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007aa6:	f7fe f981 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8007aaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	461d      	mov	r5, r3
 8007ab0:	f04f 0600 	mov.w	r6, #0
 8007ab4:	46a8      	mov	r8, r5
 8007ab6:	46b1      	mov	r9, r6
 8007ab8:	eb18 0308 	adds.w	r3, r8, r8
 8007abc:	eb49 0409 	adc.w	r4, r9, r9
 8007ac0:	4698      	mov	r8, r3
 8007ac2:	46a1      	mov	r9, r4
 8007ac4:	eb18 0805 	adds.w	r8, r8, r5
 8007ac8:	eb49 0906 	adc.w	r9, r9, r6
 8007acc:	f04f 0100 	mov.w	r1, #0
 8007ad0:	f04f 0200 	mov.w	r2, #0
 8007ad4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ad8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007adc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ae0:	4688      	mov	r8, r1
 8007ae2:	4691      	mov	r9, r2
 8007ae4:	eb18 0005 	adds.w	r0, r8, r5
 8007ae8:	eb49 0106 	adc.w	r1, r9, r6
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	461d      	mov	r5, r3
 8007af2:	f04f 0600 	mov.w	r6, #0
 8007af6:	196b      	adds	r3, r5, r5
 8007af8:	eb46 0406 	adc.w	r4, r6, r6
 8007afc:	461a      	mov	r2, r3
 8007afe:	4623      	mov	r3, r4
 8007b00:	f7f8 fb86 	bl	8000210 <__aeabi_uldivmod>
 8007b04:	4603      	mov	r3, r0
 8007b06:	460c      	mov	r4, r1
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4b47      	ldr	r3, [pc, #284]	; (8007c28 <UART_SetConfig+0x384>)
 8007b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b10:	095b      	lsrs	r3, r3, #5
 8007b12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	461d      	mov	r5, r3
 8007b1a:	f04f 0600 	mov.w	r6, #0
 8007b1e:	46a9      	mov	r9, r5
 8007b20:	46b2      	mov	sl, r6
 8007b22:	eb19 0309 	adds.w	r3, r9, r9
 8007b26:	eb4a 040a 	adc.w	r4, sl, sl
 8007b2a:	4699      	mov	r9, r3
 8007b2c:	46a2      	mov	sl, r4
 8007b2e:	eb19 0905 	adds.w	r9, r9, r5
 8007b32:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b36:	f04f 0100 	mov.w	r1, #0
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b4a:	4689      	mov	r9, r1
 8007b4c:	4692      	mov	sl, r2
 8007b4e:	eb19 0005 	adds.w	r0, r9, r5
 8007b52:	eb4a 0106 	adc.w	r1, sl, r6
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	461d      	mov	r5, r3
 8007b5c:	f04f 0600 	mov.w	r6, #0
 8007b60:	196b      	adds	r3, r5, r5
 8007b62:	eb46 0406 	adc.w	r4, r6, r6
 8007b66:	461a      	mov	r2, r3
 8007b68:	4623      	mov	r3, r4
 8007b6a:	f7f8 fb51 	bl	8000210 <__aeabi_uldivmod>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	460c      	mov	r4, r1
 8007b72:	461a      	mov	r2, r3
 8007b74:	4b2c      	ldr	r3, [pc, #176]	; (8007c28 <UART_SetConfig+0x384>)
 8007b76:	fba3 1302 	umull	r1, r3, r3, r2
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	2164      	movs	r1, #100	; 0x64
 8007b7e:	fb01 f303 	mul.w	r3, r1, r3
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	3332      	adds	r3, #50	; 0x32
 8007b88:	4a27      	ldr	r2, [pc, #156]	; (8007c28 <UART_SetConfig+0x384>)
 8007b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b96:	4498      	add	r8, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	461d      	mov	r5, r3
 8007b9c:	f04f 0600 	mov.w	r6, #0
 8007ba0:	46a9      	mov	r9, r5
 8007ba2:	46b2      	mov	sl, r6
 8007ba4:	eb19 0309 	adds.w	r3, r9, r9
 8007ba8:	eb4a 040a 	adc.w	r4, sl, sl
 8007bac:	4699      	mov	r9, r3
 8007bae:	46a2      	mov	sl, r4
 8007bb0:	eb19 0905 	adds.w	r9, r9, r5
 8007bb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8007bb8:	f04f 0100 	mov.w	r1, #0
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bcc:	4689      	mov	r9, r1
 8007bce:	4692      	mov	sl, r2
 8007bd0:	eb19 0005 	adds.w	r0, r9, r5
 8007bd4:	eb4a 0106 	adc.w	r1, sl, r6
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	461d      	mov	r5, r3
 8007bde:	f04f 0600 	mov.w	r6, #0
 8007be2:	196b      	adds	r3, r5, r5
 8007be4:	eb46 0406 	adc.w	r4, r6, r6
 8007be8:	461a      	mov	r2, r3
 8007bea:	4623      	mov	r3, r4
 8007bec:	f7f8 fb10 	bl	8000210 <__aeabi_uldivmod>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <UART_SetConfig+0x384>)
 8007bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bfc:	095b      	lsrs	r3, r3, #5
 8007bfe:	2164      	movs	r1, #100	; 0x64
 8007c00:	fb01 f303 	mul.w	r3, r1, r3
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	3332      	adds	r3, #50	; 0x32
 8007c0a:	4a07      	ldr	r2, [pc, #28]	; (8007c28 <UART_SetConfig+0x384>)
 8007c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	f003 0207 	and.w	r2, r3, #7
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4442      	add	r2, r8
 8007c1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007c1e:	e1b2      	b.n	8007f86 <UART_SetConfig+0x6e2>
 8007c20:	40011000 	.word	0x40011000
 8007c24:	40011400 	.word	0x40011400
 8007c28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4ad7      	ldr	r2, [pc, #860]	; (8007f90 <UART_SetConfig+0x6ec>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d005      	beq.n	8007c42 <UART_SetConfig+0x39e>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4ad6      	ldr	r2, [pc, #856]	; (8007f94 <UART_SetConfig+0x6f0>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	f040 80d1 	bne.w	8007de4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c42:	f7fe f8c7 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 8007c46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	469a      	mov	sl, r3
 8007c4c:	f04f 0b00 	mov.w	fp, #0
 8007c50:	46d0      	mov	r8, sl
 8007c52:	46d9      	mov	r9, fp
 8007c54:	eb18 0308 	adds.w	r3, r8, r8
 8007c58:	eb49 0409 	adc.w	r4, r9, r9
 8007c5c:	4698      	mov	r8, r3
 8007c5e:	46a1      	mov	r9, r4
 8007c60:	eb18 080a 	adds.w	r8, r8, sl
 8007c64:	eb49 090b 	adc.w	r9, r9, fp
 8007c68:	f04f 0100 	mov.w	r1, #0
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c7c:	4688      	mov	r8, r1
 8007c7e:	4691      	mov	r9, r2
 8007c80:	eb1a 0508 	adds.w	r5, sl, r8
 8007c84:	eb4b 0609 	adc.w	r6, fp, r9
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	f04f 0200 	mov.w	r2, #0
 8007c92:	f04f 0300 	mov.w	r3, #0
 8007c96:	f04f 0400 	mov.w	r4, #0
 8007c9a:	0094      	lsls	r4, r2, #2
 8007c9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ca0:	008b      	lsls	r3, r1, #2
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	4623      	mov	r3, r4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	4631      	mov	r1, r6
 8007caa:	f7f8 fab1 	bl	8000210 <__aeabi_uldivmod>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4bb8      	ldr	r3, [pc, #736]	; (8007f98 <UART_SetConfig+0x6f4>)
 8007cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cba:	095b      	lsrs	r3, r3, #5
 8007cbc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	469b      	mov	fp, r3
 8007cc4:	f04f 0c00 	mov.w	ip, #0
 8007cc8:	46d9      	mov	r9, fp
 8007cca:	46e2      	mov	sl, ip
 8007ccc:	eb19 0309 	adds.w	r3, r9, r9
 8007cd0:	eb4a 040a 	adc.w	r4, sl, sl
 8007cd4:	4699      	mov	r9, r3
 8007cd6:	46a2      	mov	sl, r4
 8007cd8:	eb19 090b 	adds.w	r9, r9, fp
 8007cdc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ce0:	f04f 0100 	mov.w	r1, #0
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cf4:	4689      	mov	r9, r1
 8007cf6:	4692      	mov	sl, r2
 8007cf8:	eb1b 0509 	adds.w	r5, fp, r9
 8007cfc:	eb4c 060a 	adc.w	r6, ip, sl
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	4619      	mov	r1, r3
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	f04f 0300 	mov.w	r3, #0
 8007d0e:	f04f 0400 	mov.w	r4, #0
 8007d12:	0094      	lsls	r4, r2, #2
 8007d14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d18:	008b      	lsls	r3, r1, #2
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	4623      	mov	r3, r4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	4631      	mov	r1, r6
 8007d22:	f7f8 fa75 	bl	8000210 <__aeabi_uldivmod>
 8007d26:	4603      	mov	r3, r0
 8007d28:	460c      	mov	r4, r1
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	4b9a      	ldr	r3, [pc, #616]	; (8007f98 <UART_SetConfig+0x6f4>)
 8007d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8007d32:	095b      	lsrs	r3, r3, #5
 8007d34:	2164      	movs	r1, #100	; 0x64
 8007d36:	fb01 f303 	mul.w	r3, r1, r3
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	011b      	lsls	r3, r3, #4
 8007d3e:	3332      	adds	r3, #50	; 0x32
 8007d40:	4a95      	ldr	r2, [pc, #596]	; (8007f98 <UART_SetConfig+0x6f4>)
 8007d42:	fba2 2303 	umull	r2, r3, r2, r3
 8007d46:	095b      	lsrs	r3, r3, #5
 8007d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d4c:	4498      	add	r8, r3
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	469b      	mov	fp, r3
 8007d52:	f04f 0c00 	mov.w	ip, #0
 8007d56:	46d9      	mov	r9, fp
 8007d58:	46e2      	mov	sl, ip
 8007d5a:	eb19 0309 	adds.w	r3, r9, r9
 8007d5e:	eb4a 040a 	adc.w	r4, sl, sl
 8007d62:	4699      	mov	r9, r3
 8007d64:	46a2      	mov	sl, r4
 8007d66:	eb19 090b 	adds.w	r9, r9, fp
 8007d6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d6e:	f04f 0100 	mov.w	r1, #0
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d82:	4689      	mov	r9, r1
 8007d84:	4692      	mov	sl, r2
 8007d86:	eb1b 0509 	adds.w	r5, fp, r9
 8007d8a:	eb4c 060a 	adc.w	r6, ip, sl
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	4619      	mov	r1, r3
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	f04f 0400 	mov.w	r4, #0
 8007da0:	0094      	lsls	r4, r2, #2
 8007da2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007da6:	008b      	lsls	r3, r1, #2
 8007da8:	461a      	mov	r2, r3
 8007daa:	4623      	mov	r3, r4
 8007dac:	4628      	mov	r0, r5
 8007dae:	4631      	mov	r1, r6
 8007db0:	f7f8 fa2e 	bl	8000210 <__aeabi_uldivmod>
 8007db4:	4603      	mov	r3, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	461a      	mov	r2, r3
 8007dba:	4b77      	ldr	r3, [pc, #476]	; (8007f98 <UART_SetConfig+0x6f4>)
 8007dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007dc0:	095b      	lsrs	r3, r3, #5
 8007dc2:	2164      	movs	r1, #100	; 0x64
 8007dc4:	fb01 f303 	mul.w	r3, r1, r3
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	3332      	adds	r3, #50	; 0x32
 8007dce:	4a72      	ldr	r2, [pc, #456]	; (8007f98 <UART_SetConfig+0x6f4>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	f003 020f 	and.w	r2, r3, #15
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4442      	add	r2, r8
 8007de0:	609a      	str	r2, [r3, #8]
 8007de2:	e0d0      	b.n	8007f86 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007de4:	f7fd ffe2 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8007de8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	469a      	mov	sl, r3
 8007dee:	f04f 0b00 	mov.w	fp, #0
 8007df2:	46d0      	mov	r8, sl
 8007df4:	46d9      	mov	r9, fp
 8007df6:	eb18 0308 	adds.w	r3, r8, r8
 8007dfa:	eb49 0409 	adc.w	r4, r9, r9
 8007dfe:	4698      	mov	r8, r3
 8007e00:	46a1      	mov	r9, r4
 8007e02:	eb18 080a 	adds.w	r8, r8, sl
 8007e06:	eb49 090b 	adc.w	r9, r9, fp
 8007e0a:	f04f 0100 	mov.w	r1, #0
 8007e0e:	f04f 0200 	mov.w	r2, #0
 8007e12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e1e:	4688      	mov	r8, r1
 8007e20:	4691      	mov	r9, r2
 8007e22:	eb1a 0508 	adds.w	r5, sl, r8
 8007e26:	eb4b 0609 	adc.w	r6, fp, r9
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	f04f 0300 	mov.w	r3, #0
 8007e38:	f04f 0400 	mov.w	r4, #0
 8007e3c:	0094      	lsls	r4, r2, #2
 8007e3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e42:	008b      	lsls	r3, r1, #2
 8007e44:	461a      	mov	r2, r3
 8007e46:	4623      	mov	r3, r4
 8007e48:	4628      	mov	r0, r5
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	f7f8 f9e0 	bl	8000210 <__aeabi_uldivmod>
 8007e50:	4603      	mov	r3, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	461a      	mov	r2, r3
 8007e56:	4b50      	ldr	r3, [pc, #320]	; (8007f98 <UART_SetConfig+0x6f4>)
 8007e58:	fba3 2302 	umull	r2, r3, r3, r2
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	469b      	mov	fp, r3
 8007e66:	f04f 0c00 	mov.w	ip, #0
 8007e6a:	46d9      	mov	r9, fp
 8007e6c:	46e2      	mov	sl, ip
 8007e6e:	eb19 0309 	adds.w	r3, r9, r9
 8007e72:	eb4a 040a 	adc.w	r4, sl, sl
 8007e76:	4699      	mov	r9, r3
 8007e78:	46a2      	mov	sl, r4
 8007e7a:	eb19 090b 	adds.w	r9, r9, fp
 8007e7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e82:	f04f 0100 	mov.w	r1, #0
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e96:	4689      	mov	r9, r1
 8007e98:	4692      	mov	sl, r2
 8007e9a:	eb1b 0509 	adds.w	r5, fp, r9
 8007e9e:	eb4c 060a 	adc.w	r6, ip, sl
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	f04f 0300 	mov.w	r3, #0
 8007eb0:	f04f 0400 	mov.w	r4, #0
 8007eb4:	0094      	lsls	r4, r2, #2
 8007eb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007eba:	008b      	lsls	r3, r1, #2
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4623      	mov	r3, r4
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	f7f8 f9a4 	bl	8000210 <__aeabi_uldivmod>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4b32      	ldr	r3, [pc, #200]	; (8007f98 <UART_SetConfig+0x6f4>)
 8007ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ed4:	095b      	lsrs	r3, r3, #5
 8007ed6:	2164      	movs	r1, #100	; 0x64
 8007ed8:	fb01 f303 	mul.w	r3, r1, r3
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	3332      	adds	r3, #50	; 0x32
 8007ee2:	4a2d      	ldr	r2, [pc, #180]	; (8007f98 <UART_SetConfig+0x6f4>)
 8007ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee8:	095b      	lsrs	r3, r3, #5
 8007eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007eee:	4498      	add	r8, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	469b      	mov	fp, r3
 8007ef4:	f04f 0c00 	mov.w	ip, #0
 8007ef8:	46d9      	mov	r9, fp
 8007efa:	46e2      	mov	sl, ip
 8007efc:	eb19 0309 	adds.w	r3, r9, r9
 8007f00:	eb4a 040a 	adc.w	r4, sl, sl
 8007f04:	4699      	mov	r9, r3
 8007f06:	46a2      	mov	sl, r4
 8007f08:	eb19 090b 	adds.w	r9, r9, fp
 8007f0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f10:	f04f 0100 	mov.w	r1, #0
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f24:	4689      	mov	r9, r1
 8007f26:	4692      	mov	sl, r2
 8007f28:	eb1b 0509 	adds.w	r5, fp, r9
 8007f2c:	eb4c 060a 	adc.w	r6, ip, sl
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	4619      	mov	r1, r3
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	f04f 0300 	mov.w	r3, #0
 8007f3e:	f04f 0400 	mov.w	r4, #0
 8007f42:	0094      	lsls	r4, r2, #2
 8007f44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f48:	008b      	lsls	r3, r1, #2
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	4623      	mov	r3, r4
 8007f4e:	4628      	mov	r0, r5
 8007f50:	4631      	mov	r1, r6
 8007f52:	f7f8 f95d 	bl	8000210 <__aeabi_uldivmod>
 8007f56:	4603      	mov	r3, r0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <UART_SetConfig+0x6f4>)
 8007f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8007f62:	095b      	lsrs	r3, r3, #5
 8007f64:	2164      	movs	r1, #100	; 0x64
 8007f66:	fb01 f303 	mul.w	r3, r1, r3
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	011b      	lsls	r3, r3, #4
 8007f6e:	3332      	adds	r3, #50	; 0x32
 8007f70:	4a09      	ldr	r2, [pc, #36]	; (8007f98 <UART_SetConfig+0x6f4>)
 8007f72:	fba2 2303 	umull	r2, r3, r2, r3
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	f003 020f 	and.w	r2, r3, #15
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4442      	add	r2, r8
 8007f82:	609a      	str	r2, [r3, #8]
}
 8007f84:	e7ff      	b.n	8007f86 <UART_SetConfig+0x6e2>
 8007f86:	bf00      	nop
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f90:	40011000 	.word	0x40011000
 8007f94:	40011400 	.word	0x40011400
 8007f98:	51eb851f 	.word	0x51eb851f

08007f9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4a07      	ldr	r2, [pc, #28]	; (8007fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	4a06      	ldr	r2, [pc, #24]	; (8007fcc <vApplicationGetIdleTaskMemory+0x30>)
 8007fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2280      	movs	r2, #128	; 0x80
 8007fb8:	601a      	str	r2, [r3, #0]
}
 8007fba:	bf00      	nop
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	20000270 	.word	0x20000270
 8007fcc:	200002cc 	.word	0x200002cc

08007fd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4a07      	ldr	r2, [pc, #28]	; (8007ffc <vApplicationGetTimerTaskMemory+0x2c>)
 8007fe0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	4a06      	ldr	r2, [pc, #24]	; (8008000 <vApplicationGetTimerTaskMemory+0x30>)
 8007fe6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fee:	601a      	str	r2, [r3, #0]
}
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	200004cc 	.word	0x200004cc
 8008000:	20000528 	.word	0x20000528

08008004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f103 0208 	add.w	r2, r3, #8
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f04f 32ff 	mov.w	r2, #4294967295
 800801c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f103 0208 	add.w	r2, r3, #8
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f103 0208 	add.w	r2, r3, #8
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800805e:	b480      	push	{r7}
 8008060:	b085      	sub	sp, #20
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	601a      	str	r2, [r3, #0]
}
 800809a:	bf00      	nop
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080bc:	d103      	bne.n	80080c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	e00c      	b.n	80080e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3308      	adds	r3, #8
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e002      	b.n	80080d4 <vListInsert+0x2e>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d2f6      	bcs.n	80080ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	601a      	str	r2, [r3, #0]
}
 800810c:	bf00      	nop
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6892      	ldr	r2, [r2, #8]
 800812e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6852      	ldr	r2, [r2, #4]
 8008138:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	429a      	cmp	r2, r3
 8008142:	d103      	bne.n	800814c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	1e5a      	subs	r2, r3, #1
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d109      	bne.n	8008194 <xQueueGenericReset+0x28>
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	60bb      	str	r3, [r7, #8]
 8008192:	e7fe      	b.n	8008192 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008194:	f002 fb42 	bl	800a81c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a0:	68f9      	ldr	r1, [r7, #12]
 80081a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081a4:	fb01 f303 	mul.w	r3, r1, r3
 80081a8:	441a      	add	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c4:	3b01      	subs	r3, #1
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081ca:	fb01 f303 	mul.w	r3, r1, r3
 80081ce:	441a      	add	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	22ff      	movs	r2, #255	; 0xff
 80081d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	22ff      	movs	r2, #255	; 0xff
 80081e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d114      	bne.n	8008214 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d01a      	beq.n	8008228 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3310      	adds	r3, #16
 80081f6:	4618      	mov	r0, r3
 80081f8:	f001 fb3e 	bl	8009878 <xTaskRemoveFromEventList>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d012      	beq.n	8008228 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008202:	4b0d      	ldr	r3, [pc, #52]	; (8008238 <xQueueGenericReset+0xcc>)
 8008204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	e009      	b.n	8008228 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3310      	adds	r3, #16
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fef3 	bl	8008004 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3324      	adds	r3, #36	; 0x24
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff feee 	bl	8008004 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008228:	f002 fb26 	bl	800a878 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800822c:	2301      	movs	r3, #1
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	e000ed04 	.word	0xe000ed04

0800823c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08e      	sub	sp, #56	; 0x38
 8008240:	af02      	add	r7, sp, #8
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d109      	bne.n	8008264 <xQueueGenericCreateStatic+0x28>
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	62bb      	str	r3, [r7, #40]	; 0x28
 8008262:	e7fe      	b.n	8008262 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <xQueueGenericCreateStatic+0x42>
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
 800827c:	e7fe      	b.n	800827c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <xQueueGenericCreateStatic+0x4e>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <xQueueGenericCreateStatic+0x52>
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <xQueueGenericCreateStatic+0x54>
 800828e:	2300      	movs	r3, #0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d109      	bne.n	80082a8 <xQueueGenericCreateStatic+0x6c>
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	623b      	str	r3, [r7, #32]
 80082a6:	e7fe      	b.n	80082a6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <xQueueGenericCreateStatic+0x78>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <xQueueGenericCreateStatic+0x7c>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e000      	b.n	80082ba <xQueueGenericCreateStatic+0x7e>
 80082b8:	2300      	movs	r3, #0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <xQueueGenericCreateStatic+0x96>
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	61fb      	str	r3, [r7, #28]
 80082d0:	e7fe      	b.n	80082d0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082d2:	2350      	movs	r3, #80	; 0x50
 80082d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b50      	cmp	r3, #80	; 0x50
 80082da:	d009      	beq.n	80082f0 <xQueueGenericCreateStatic+0xb4>
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	61bb      	str	r3, [r7, #24]
 80082ee:	e7fe      	b.n	80082ee <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00d      	beq.n	8008316 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008302:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4613      	mov	r3, r2
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	68b9      	ldr	r1, [r7, #8]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f842 	bl	800839a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008318:	4618      	mov	r0, r3
 800831a:	3730      	adds	r7, #48	; 0x30
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	; 0x28
 8008324:	af02      	add	r7, sp, #8
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	4613      	mov	r3, r2
 800832c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d109      	bne.n	8008348 <xQueueGenericCreate+0x28>
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	613b      	str	r3, [r7, #16]
 8008346:	e7fe      	b.n	8008346 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	e004      	b.n	800835e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	fb02 f303 	mul.w	r3, r2, r3
 800835c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	3350      	adds	r3, #80	; 0x50
 8008362:	4618      	mov	r0, r3
 8008364:	f002 fb74 	bl	800aa50 <pvPortMalloc>
 8008368:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00f      	beq.n	8008390 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	3350      	adds	r3, #80	; 0x50
 8008374:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800837e:	79fa      	ldrb	r2, [r7, #7]
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	4613      	mov	r3, r2
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f805 	bl	800839a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008390:	69bb      	ldr	r3, [r7, #24]
	}
 8008392:	4618      	mov	r0, r3
 8008394:	3720      	adds	r7, #32
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	607a      	str	r2, [r7, #4]
 80083a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d103      	bne.n	80083b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	e002      	b.n	80083bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083c8:	2101      	movs	r1, #1
 80083ca:	69b8      	ldr	r0, [r7, #24]
 80083cc:	f7ff fece 	bl	800816c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	78fa      	ldrb	r2, [r7, #3]
 80083d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08e      	sub	sp, #56	; 0x38
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083ee:	2300      	movs	r3, #0
 80083f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d109      	bne.n	8008410 <xQueueGenericSend+0x30>
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
 800840e:	e7fe      	b.n	800840e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d103      	bne.n	800841e <xQueueGenericSend+0x3e>
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <xQueueGenericSend+0x42>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <xQueueGenericSend+0x44>
 8008422:	2300      	movs	r3, #0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d109      	bne.n	800843c <xQueueGenericSend+0x5c>
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
 800843a:	e7fe      	b.n	800843a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d103      	bne.n	800844a <xQueueGenericSend+0x6a>
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008446:	2b01      	cmp	r3, #1
 8008448:	d101      	bne.n	800844e <xQueueGenericSend+0x6e>
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <xQueueGenericSend+0x70>
 800844e:	2300      	movs	r3, #0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d109      	bne.n	8008468 <xQueueGenericSend+0x88>
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	623b      	str	r3, [r7, #32]
 8008466:	e7fe      	b.n	8008466 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008468:	f001 fbc2 	bl	8009bf0 <xTaskGetSchedulerState>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <xQueueGenericSend+0x98>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <xQueueGenericSend+0x9c>
 8008478:	2301      	movs	r3, #1
 800847a:	e000      	b.n	800847e <xQueueGenericSend+0x9e>
 800847c:	2300      	movs	r3, #0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d109      	bne.n	8008496 <xQueueGenericSend+0xb6>
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	61fb      	str	r3, [r7, #28]
 8008494:	e7fe      	b.n	8008494 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008496:	f002 f9c1 	bl	800a81c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d302      	bcc.n	80084ac <xQueueGenericSend+0xcc>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d129      	bne.n	8008500 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	68b9      	ldr	r1, [r7, #8]
 80084b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084b2:	f000 fc26 	bl	8008d02 <prvCopyDataToQueue>
 80084b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d010      	beq.n	80084e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	3324      	adds	r3, #36	; 0x24
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 f9d7 	bl	8009878 <xTaskRemoveFromEventList>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d013      	beq.n	80084f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084d0:	4b3f      	ldr	r3, [pc, #252]	; (80085d0 <xQueueGenericSend+0x1f0>)
 80084d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	e00a      	b.n	80084f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d007      	beq.n	80084f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084e8:	4b39      	ldr	r3, [pc, #228]	; (80085d0 <xQueueGenericSend+0x1f0>)
 80084ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084f8:	f002 f9be 	bl	800a878 <vPortExitCritical>
				return pdPASS;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e063      	b.n	80085c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d103      	bne.n	800850e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008506:	f002 f9b7 	bl	800a878 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800850a:	2300      	movs	r3, #0
 800850c:	e05c      	b.n	80085c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008510:	2b00      	cmp	r3, #0
 8008512:	d106      	bne.n	8008522 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008514:	f107 0314 	add.w	r3, r7, #20
 8008518:	4618      	mov	r0, r3
 800851a:	f001 fa0f 	bl	800993c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800851e:	2301      	movs	r3, #1
 8008520:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008522:	f002 f9a9 	bl	800a878 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008526:	f000 ff85 	bl	8009434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800852a:	f002 f977 	bl	800a81c <vPortEnterCritical>
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008534:	b25b      	sxtb	r3, r3
 8008536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853a:	d103      	bne.n	8008544 <xQueueGenericSend+0x164>
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800854a:	b25b      	sxtb	r3, r3
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d103      	bne.n	800855a <xQueueGenericSend+0x17a>
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800855a:	f002 f98d 	bl	800a878 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800855e:	1d3a      	adds	r2, r7, #4
 8008560:	f107 0314 	add.w	r3, r7, #20
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f001 f9fe 	bl	8009968 <xTaskCheckForTimeOut>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d124      	bne.n	80085bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008574:	f000 fcbd 	bl	8008ef2 <prvIsQueueFull>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d018      	beq.n	80085b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	3310      	adds	r3, #16
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f001 f928 	bl	80097dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800858c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800858e:	f000 fc48 	bl	8008e22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008592:	f000 ff5d 	bl	8009450 <xTaskResumeAll>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	f47f af7c 	bne.w	8008496 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800859e:	4b0c      	ldr	r3, [pc, #48]	; (80085d0 <xQueueGenericSend+0x1f0>)
 80085a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	e772      	b.n	8008496 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80085b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085b2:	f000 fc36 	bl	8008e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085b6:	f000 ff4b 	bl	8009450 <xTaskResumeAll>
 80085ba:	e76c      	b.n	8008496 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085be:	f000 fc30 	bl	8008e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085c2:	f000 ff45 	bl	8009450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085c6:	2300      	movs	r3, #0
		}
	}
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3738      	adds	r7, #56	; 0x38
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	e000ed04 	.word	0xe000ed04

080085d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08e      	sub	sp, #56	; 0x38
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d109      	bne.n	8008600 <xQueueGenericSendFromISR+0x2c>
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
 80085fe:	e7fe      	b.n	80085fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d103      	bne.n	800860e <xQueueGenericSendFromISR+0x3a>
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <xQueueGenericSendFromISR+0x3e>
 800860e:	2301      	movs	r3, #1
 8008610:	e000      	b.n	8008614 <xQueueGenericSendFromISR+0x40>
 8008612:	2300      	movs	r3, #0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d109      	bne.n	800862c <xQueueGenericSendFromISR+0x58>
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	623b      	str	r3, [r7, #32]
 800862a:	e7fe      	b.n	800862a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d103      	bne.n	800863a <xQueueGenericSendFromISR+0x66>
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <xQueueGenericSendFromISR+0x6a>
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <xQueueGenericSendFromISR+0x6c>
 800863e:	2300      	movs	r3, #0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d109      	bne.n	8008658 <xQueueGenericSendFromISR+0x84>
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	61fb      	str	r3, [r7, #28]
 8008656:	e7fe      	b.n	8008656 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008658:	f002 f9bc 	bl	800a9d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800865c:	f3ef 8211 	mrs	r2, BASEPRI
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	61ba      	str	r2, [r7, #24]
 8008672:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008674:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008676:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008680:	429a      	cmp	r2, r3
 8008682:	d302      	bcc.n	800868a <xQueueGenericSendFromISR+0xb6>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2b02      	cmp	r3, #2
 8008688:	d12c      	bne.n	80086e4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	68b9      	ldr	r1, [r7, #8]
 8008698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800869a:	f000 fb32 	bl	8008d02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800869e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	d112      	bne.n	80086ce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d016      	beq.n	80086de <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	3324      	adds	r3, #36	; 0x24
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 f8df 	bl	8009878 <xTaskRemoveFromEventList>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00e      	beq.n	80086de <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00b      	beq.n	80086de <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	e007      	b.n	80086de <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086d2:	3301      	adds	r3, #1
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	b25a      	sxtb	r2, r3
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086de:	2301      	movs	r3, #1
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80086e2:	e001      	b.n	80086e8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	637b      	str	r3, [r7, #52]	; 0x34
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3738      	adds	r7, #56	; 0x38
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08e      	sub	sp, #56	; 0x38
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	2b00      	cmp	r3, #0
 800870e:	d109      	bne.n	8008724 <xQueueGiveFromISR+0x28>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	623b      	str	r3, [r7, #32]
 8008722:	e7fe      	b.n	8008722 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d009      	beq.n	8008740 <xQueueGiveFromISR+0x44>
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	61fb      	str	r3, [r7, #28]
 800873e:	e7fe      	b.n	800873e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d103      	bne.n	8008750 <xQueueGiveFromISR+0x54>
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <xQueueGiveFromISR+0x58>
 8008750:	2301      	movs	r3, #1
 8008752:	e000      	b.n	8008756 <xQueueGiveFromISR+0x5a>
 8008754:	2300      	movs	r3, #0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d109      	bne.n	800876e <xQueueGiveFromISR+0x72>
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	61bb      	str	r3, [r7, #24]
 800876c:	e7fe      	b.n	800876c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800876e:	f002 f931 	bl	800a9d4 <vPortValidateInterruptPriority>
	__asm volatile
 8008772:	f3ef 8211 	mrs	r2, BASEPRI
 8008776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	617a      	str	r2, [r7, #20]
 8008788:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800878a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008792:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800879a:	429a      	cmp	r2, r3
 800879c:	d22b      	bcs.n	80087f6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b8:	d112      	bne.n	80087e0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d016      	beq.n	80087f0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	3324      	adds	r3, #36	; 0x24
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 f856 	bl	8009878 <xTaskRemoveFromEventList>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00e      	beq.n	80087f0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00b      	beq.n	80087f0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2201      	movs	r2, #1
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	e007      	b.n	80087f0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087e4:	3301      	adds	r3, #1
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	b25a      	sxtb	r2, r3
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087f0:	2301      	movs	r3, #1
 80087f2:	637b      	str	r3, [r7, #52]	; 0x34
 80087f4:	e001      	b.n	80087fa <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	637b      	str	r3, [r7, #52]	; 0x34
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008806:	4618      	mov	r0, r3
 8008808:	3738      	adds	r7, #56	; 0x38
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08c      	sub	sp, #48	; 0x30
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800881c:	2300      	movs	r3, #0
 800881e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	2b00      	cmp	r3, #0
 8008828:	d109      	bne.n	800883e <xQueueReceive+0x2e>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	623b      	str	r3, [r7, #32]
 800883c:	e7fe      	b.n	800883c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d103      	bne.n	800884c <xQueueReceive+0x3c>
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <xQueueReceive+0x40>
 800884c:	2301      	movs	r3, #1
 800884e:	e000      	b.n	8008852 <xQueueReceive+0x42>
 8008850:	2300      	movs	r3, #0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <xQueueReceive+0x5a>
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	61fb      	str	r3, [r7, #28]
 8008868:	e7fe      	b.n	8008868 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800886a:	f001 f9c1 	bl	8009bf0 <xTaskGetSchedulerState>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <xQueueReceive+0x6a>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <xQueueReceive+0x6e>
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <xQueueReceive+0x70>
 800887e:	2300      	movs	r3, #0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d109      	bne.n	8008898 <xQueueReceive+0x88>
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	61bb      	str	r3, [r7, #24]
 8008896:	e7fe      	b.n	8008896 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008898:	f001 ffc0 	bl	800a81c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d01f      	beq.n	80088e8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ac:	f000 fa93 	bl	8008dd6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	1e5a      	subs	r2, r3, #1
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00f      	beq.n	80088e0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	3310      	adds	r3, #16
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 ffd7 	bl	8009878 <xTaskRemoveFromEventList>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d007      	beq.n	80088e0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088d0:	4b3c      	ldr	r3, [pc, #240]	; (80089c4 <xQueueReceive+0x1b4>)
 80088d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088e0:	f001 ffca 	bl	800a878 <vPortExitCritical>
				return pdPASS;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e069      	b.n	80089bc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d103      	bne.n	80088f6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088ee:	f001 ffc3 	bl	800a878 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088f2:	2300      	movs	r3, #0
 80088f4:	e062      	b.n	80089bc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	4618      	mov	r0, r3
 8008902:	f001 f81b 	bl	800993c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008906:	2301      	movs	r3, #1
 8008908:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800890a:	f001 ffb5 	bl	800a878 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800890e:	f000 fd91 	bl	8009434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008912:	f001 ff83 	bl	800a81c <vPortEnterCritical>
 8008916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800891c:	b25b      	sxtb	r3, r3
 800891e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008922:	d103      	bne.n	800892c <xQueueReceive+0x11c>
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008932:	b25b      	sxtb	r3, r3
 8008934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008938:	d103      	bne.n	8008942 <xQueueReceive+0x132>
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008942:	f001 ff99 	bl	800a878 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008946:	1d3a      	adds	r2, r7, #4
 8008948:	f107 0310 	add.w	r3, r7, #16
 800894c:	4611      	mov	r1, r2
 800894e:	4618      	mov	r0, r3
 8008950:	f001 f80a 	bl	8009968 <xTaskCheckForTimeOut>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d123      	bne.n	80089a2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800895a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800895c:	f000 fab3 	bl	8008ec6 <prvIsQueueEmpty>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d017      	beq.n	8008996 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	3324      	adds	r3, #36	; 0x24
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f000 ff34 	bl	80097dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008976:	f000 fa54 	bl	8008e22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800897a:	f000 fd69 	bl	8009450 <xTaskResumeAll>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d189      	bne.n	8008898 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008984:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <xQueueReceive+0x1b4>)
 8008986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	e780      	b.n	8008898 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008998:	f000 fa43 	bl	8008e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800899c:	f000 fd58 	bl	8009450 <xTaskResumeAll>
 80089a0:	e77a      	b.n	8008898 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a4:	f000 fa3d 	bl	8008e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089a8:	f000 fd52 	bl	8009450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ae:	f000 fa8a 	bl	8008ec6 <prvIsQueueEmpty>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f43f af6f 	beq.w	8008898 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3730      	adds	r7, #48	; 0x30
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	e000ed04 	.word	0xe000ed04

080089c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08e      	sub	sp, #56	; 0x38
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80089d2:	2300      	movs	r3, #0
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80089da:	2300      	movs	r3, #0
 80089dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d109      	bne.n	80089f8 <xQueueSemaphoreTake+0x30>
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	623b      	str	r3, [r7, #32]
 80089f6:	e7fe      	b.n	80089f6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d009      	beq.n	8008a14 <xQueueSemaphoreTake+0x4c>
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	61fb      	str	r3, [r7, #28]
 8008a12:	e7fe      	b.n	8008a12 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a14:	f001 f8ec 	bl	8009bf0 <xTaskGetSchedulerState>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d102      	bne.n	8008a24 <xQueueSemaphoreTake+0x5c>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <xQueueSemaphoreTake+0x60>
 8008a24:	2301      	movs	r3, #1
 8008a26:	e000      	b.n	8008a2a <xQueueSemaphoreTake+0x62>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d109      	bne.n	8008a42 <xQueueSemaphoreTake+0x7a>
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	61bb      	str	r3, [r7, #24]
 8008a40:	e7fe      	b.n	8008a40 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a42:	f001 feeb 	bl	800a81c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d024      	beq.n	8008a9c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	1e5a      	subs	r2, r3, #1
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a58:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d104      	bne.n	8008a6c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008a62:	f001 fa41 	bl	8009ee8 <pvTaskIncrementMutexHeldCount>
 8008a66:	4602      	mov	r2, r0
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00f      	beq.n	8008a94 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a76:	3310      	adds	r3, #16
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fefd 	bl	8009878 <xTaskRemoveFromEventList>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d007      	beq.n	8008a94 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a84:	4b53      	ldr	r3, [pc, #332]	; (8008bd4 <xQueueSemaphoreTake+0x20c>)
 8008a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a94:	f001 fef0 	bl	800a878 <vPortExitCritical>
				return pdPASS;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e096      	b.n	8008bca <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d110      	bne.n	8008ac4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <xQueueSemaphoreTake+0xf4>
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	e7fe      	b.n	8008aba <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008abc:	f001 fedc 	bl	800a878 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	e082      	b.n	8008bca <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d106      	bne.n	8008ad8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008aca:	f107 030c 	add.w	r3, r7, #12
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 ff34 	bl	800993c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ad8:	f001 fece 	bl	800a878 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008adc:	f000 fcaa 	bl	8009434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ae0:	f001 fe9c 	bl	800a81c <vPortEnterCritical>
 8008ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aea:	b25b      	sxtb	r3, r3
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af0:	d103      	bne.n	8008afa <xQueueSemaphoreTake+0x132>
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b00:	b25b      	sxtb	r3, r3
 8008b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b06:	d103      	bne.n	8008b10 <xQueueSemaphoreTake+0x148>
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b10:	f001 feb2 	bl	800a878 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b14:	463a      	mov	r2, r7
 8008b16:	f107 030c 	add.w	r3, r7, #12
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 ff23 	bl	8009968 <xTaskCheckForTimeOut>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d132      	bne.n	8008b8e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b2a:	f000 f9cc 	bl	8008ec6 <prvIsQueueEmpty>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d026      	beq.n	8008b82 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d109      	bne.n	8008b50 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008b3c:	f001 fe6e 	bl	800a81c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f001 f871 	bl	8009c2c <xTaskPriorityInherit>
 8008b4a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008b4c:	f001 fe94 	bl	800a878 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b52:	3324      	adds	r3, #36	; 0x24
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	4611      	mov	r1, r2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fe3f 	bl	80097dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b60:	f000 f95f 	bl	8008e22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b64:	f000 fc74 	bl	8009450 <xTaskResumeAll>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f47f af69 	bne.w	8008a42 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008b70:	4b18      	ldr	r3, [pc, #96]	; (8008bd4 <xQueueSemaphoreTake+0x20c>)
 8008b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	e75f      	b.n	8008a42 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008b82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b84:	f000 f94d 	bl	8008e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b88:	f000 fc62 	bl	8009450 <xTaskResumeAll>
 8008b8c:	e759      	b.n	8008a42 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008b8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b90:	f000 f947 	bl	8008e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b94:	f000 fc5c 	bl	8009450 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b9a:	f000 f994 	bl	8008ec6 <prvIsQueueEmpty>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f43f af4e 	beq.w	8008a42 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00d      	beq.n	8008bc8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008bac:	f001 fe36 	bl	800a81c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008bb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bb2:	f000 f88e 	bl	8008cd2 <prvGetDisinheritPriorityAfterTimeout>
 8008bb6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 f90e 	bl	8009de0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008bc4:	f001 fe58 	bl	800a878 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3738      	adds	r7, #56	; 0x38
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	e000ed04 	.word	0xe000ed04

08008bd8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b08e      	sub	sp, #56	; 0x38
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d109      	bne.n	8008c02 <xQueueReceiveFromISR+0x2a>
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	623b      	str	r3, [r7, #32]
 8008c00:	e7fe      	b.n	8008c00 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d103      	bne.n	8008c10 <xQueueReceiveFromISR+0x38>
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <xQueueReceiveFromISR+0x3c>
 8008c10:	2301      	movs	r3, #1
 8008c12:	e000      	b.n	8008c16 <xQueueReceiveFromISR+0x3e>
 8008c14:	2300      	movs	r3, #0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d109      	bne.n	8008c2e <xQueueReceiveFromISR+0x56>
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	61fb      	str	r3, [r7, #28]
 8008c2c:	e7fe      	b.n	8008c2c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c2e:	f001 fed1 	bl	800a9d4 <vPortValidateInterruptPriority>
	__asm volatile
 8008c32:	f3ef 8211 	mrs	r2, BASEPRI
 8008c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	61ba      	str	r2, [r7, #24]
 8008c48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008c4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d02f      	beq.n	8008cba <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c64:	68b9      	ldr	r1, [r7, #8]
 8008c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c68:	f000 f8b5 	bl	8008dd6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	1e5a      	subs	r2, r3, #1
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008c74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7c:	d112      	bne.n	8008ca4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d016      	beq.n	8008cb4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	3310      	adds	r3, #16
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 fdf4 	bl	8009878 <xTaskRemoveFromEventList>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00e      	beq.n	8008cb4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	e007      	b.n	8008cb4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ca8:	3301      	adds	r3, #1
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	b25a      	sxtb	r2, r3
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb8:	e001      	b.n	8008cbe <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3738      	adds	r7, #56	; 0x38
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b085      	sub	sp, #20
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d006      	beq.n	8008cf0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008cec:	60fb      	str	r3, [r7, #12]
 8008cee:	e001      	b.n	8008cf4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
	}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10d      	bne.n	8008d3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d14d      	bne.n	8008dc4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 ffeb 	bl	8009d08 <xTaskPriorityDisinherit>
 8008d32:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	605a      	str	r2, [r3, #4]
 8008d3a:	e043      	b.n	8008dc4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d119      	bne.n	8008d76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6898      	ldr	r0, [r3, #8]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	68b9      	ldr	r1, [r7, #8]
 8008d4e:	f002 f893 	bl	800ae78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	441a      	add	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d32b      	bcc.n	8008dc4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	609a      	str	r2, [r3, #8]
 8008d74:	e026      	b.n	8008dc4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	68d8      	ldr	r0, [r3, #12]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	461a      	mov	r2, r3
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	f002 f879 	bl	800ae78 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	425b      	negs	r3, r3
 8008d90:	441a      	add	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d207      	bcs.n	8008db2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	425b      	negs	r3, r3
 8008dac:	441a      	add	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d105      	bne.n	8008dc4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008dcc:	697b      	ldr	r3, [r7, #20]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3718      	adds	r7, #24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d018      	beq.n	8008e1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df0:	441a      	add	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d303      	bcc.n	8008e0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68d9      	ldr	r1, [r3, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e12:	461a      	mov	r2, r3
 8008e14:	6838      	ldr	r0, [r7, #0]
 8008e16:	f002 f82f 	bl	800ae78 <memcpy>
	}
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e2a:	f001 fcf7 	bl	800a81c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e36:	e011      	b.n	8008e5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d012      	beq.n	8008e66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3324      	adds	r3, #36	; 0x24
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fd17 	bl	8009878 <xTaskRemoveFromEventList>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e50:	f000 fdea 	bl	8009a28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dce9      	bgt.n	8008e38 <prvUnlockQueue+0x16>
 8008e64:	e000      	b.n	8008e68 <prvUnlockQueue+0x46>
					break;
 8008e66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	22ff      	movs	r2, #255	; 0xff
 8008e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e70:	f001 fd02 	bl	800a878 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e74:	f001 fcd2 	bl	800a81c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e80:	e011      	b.n	8008ea6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d012      	beq.n	8008eb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	3310      	adds	r3, #16
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fcf2 	bl	8009878 <xTaskRemoveFromEventList>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e9a:	f000 fdc5 	bl	8009a28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	dce9      	bgt.n	8008e82 <prvUnlockQueue+0x60>
 8008eae:	e000      	b.n	8008eb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008eb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	22ff      	movs	r2, #255	; 0xff
 8008eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008eba:	f001 fcdd 	bl	800a878 <vPortExitCritical>
}
 8008ebe:	bf00      	nop
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ece:	f001 fca5 	bl	800a81c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d102      	bne.n	8008ee0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008eda:	2301      	movs	r3, #1
 8008edc:	60fb      	str	r3, [r7, #12]
 8008ede:	e001      	b.n	8008ee4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ee4:	f001 fcc8 	bl	800a878 <vPortExitCritical>

	return xReturn;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008efa:	f001 fc8f 	bl	800a81c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d102      	bne.n	8008f10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	e001      	b.n	8008f14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f14:	f001 fcb0 	bl	800a878 <vPortExitCritical>

	return xReturn;
 8008f18:	68fb      	ldr	r3, [r7, #12]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
	...

08008f24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	e014      	b.n	8008f5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f34:	4a0e      	ldr	r2, [pc, #56]	; (8008f70 <vQueueAddToRegistry+0x4c>)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10b      	bne.n	8008f58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f40:	490b      	ldr	r1, [pc, #44]	; (8008f70 <vQueueAddToRegistry+0x4c>)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f4a:	4a09      	ldr	r2, [pc, #36]	; (8008f70 <vQueueAddToRegistry+0x4c>)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	4413      	add	r3, r2
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f56:	e005      	b.n	8008f64 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	60fb      	str	r3, [r7, #12]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b07      	cmp	r3, #7
 8008f62:	d9e7      	bls.n	8008f34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f64:	bf00      	nop
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	20004df4 	.word	0x20004df4

08008f74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f84:	f001 fc4a 	bl	800a81c <vPortEnterCritical>
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f8e:	b25b      	sxtb	r3, r3
 8008f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f94:	d103      	bne.n	8008f9e <vQueueWaitForMessageRestricted+0x2a>
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fa4:	b25b      	sxtb	r3, r3
 8008fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008faa:	d103      	bne.n	8008fb4 <vQueueWaitForMessageRestricted+0x40>
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fb4:	f001 fc60 	bl	800a878 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d106      	bne.n	8008fce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	3324      	adds	r3, #36	; 0x24
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fc2b 	bl	8009824 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fce:	6978      	ldr	r0, [r7, #20]
 8008fd0:	f7ff ff27 	bl	8008e22 <prvUnlockQueue>
	}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08e      	sub	sp, #56	; 0x38
 8008fe0:	af04      	add	r7, sp, #16
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d109      	bne.n	8009004 <xTaskCreateStatic+0x28>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	623b      	str	r3, [r7, #32]
 8009002:	e7fe      	b.n	8009002 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	2b00      	cmp	r3, #0
 8009008:	d109      	bne.n	800901e <xTaskCreateStatic+0x42>
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	61fb      	str	r3, [r7, #28]
 800901c:	e7fe      	b.n	800901c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800901e:	235c      	movs	r3, #92	; 0x5c
 8009020:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2b5c      	cmp	r3, #92	; 0x5c
 8009026:	d009      	beq.n	800903c <xTaskCreateStatic+0x60>
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	e7fe      	b.n	800903a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903e:	2b00      	cmp	r3, #0
 8009040:	d01e      	beq.n	8009080 <xTaskCreateStatic+0xa4>
 8009042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009044:	2b00      	cmp	r3, #0
 8009046:	d01b      	beq.n	8009080 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009050:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	2202      	movs	r2, #2
 8009056:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800905a:	2300      	movs	r3, #0
 800905c:	9303      	str	r3, [sp, #12]
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	9302      	str	r3, [sp, #8]
 8009062:	f107 0314 	add.w	r3, r7, #20
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	68b9      	ldr	r1, [r7, #8]
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f000 f850 	bl	8009118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800907a:	f000 f8d3 	bl	8009224 <prvAddNewTaskToReadyList>
 800907e:	e001      	b.n	8009084 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009084:	697b      	ldr	r3, [r7, #20]
	}
 8009086:	4618      	mov	r0, r3
 8009088:	3728      	adds	r7, #40	; 0x28
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800908e:	b580      	push	{r7, lr}
 8009090:	b08c      	sub	sp, #48	; 0x30
 8009092:	af04      	add	r7, sp, #16
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	603b      	str	r3, [r7, #0]
 800909a:	4613      	mov	r3, r2
 800909c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800909e:	88fb      	ldrh	r3, [r7, #6]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f001 fcd4 	bl	800aa50 <pvPortMalloc>
 80090a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00e      	beq.n	80090ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80090b0:	205c      	movs	r0, #92	; 0x5c
 80090b2:	f001 fccd 	bl	800aa50 <pvPortMalloc>
 80090b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	631a      	str	r2, [r3, #48]	; 0x30
 80090c4:	e005      	b.n	80090d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090c6:	6978      	ldr	r0, [r7, #20]
 80090c8:	f001 fd84 	bl	800abd4 <vPortFree>
 80090cc:	e001      	b.n	80090d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d017      	beq.n	8009108 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090e0:	88fa      	ldrh	r2, [r7, #6]
 80090e2:	2300      	movs	r3, #0
 80090e4:	9303      	str	r3, [sp, #12]
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	9302      	str	r3, [sp, #8]
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 f80e 	bl	8009118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090fc:	69f8      	ldr	r0, [r7, #28]
 80090fe:	f000 f891 	bl	8009224 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009102:	2301      	movs	r3, #1
 8009104:	61bb      	str	r3, [r7, #24]
 8009106:	e002      	b.n	800910e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009108:	f04f 33ff 	mov.w	r3, #4294967295
 800910c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800910e:	69bb      	ldr	r3, [r7, #24]
	}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	461a      	mov	r2, r3
 8009130:	21a5      	movs	r1, #165	; 0xa5
 8009132:	f001 feac 	bl	800ae8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009140:	3b01      	subs	r3, #1
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	f023 0307 	bic.w	r3, r3, #7
 800914e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	2b00      	cmp	r3, #0
 8009158:	d009      	beq.n	800916e <prvInitialiseNewTask+0x56>
 800915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	e7fe      	b.n	800916c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800916e:	2300      	movs	r3, #0
 8009170:	61fb      	str	r3, [r7, #28]
 8009172:	e012      	b.n	800919a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	4413      	add	r3, r2
 800917a:	7819      	ldrb	r1, [r3, #0]
 800917c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	4413      	add	r3, r2
 8009182:	3334      	adds	r3, #52	; 0x34
 8009184:	460a      	mov	r2, r1
 8009186:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	4413      	add	r3, r2
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d006      	beq.n	80091a2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	3301      	adds	r3, #1
 8009198:	61fb      	str	r3, [r7, #28]
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	2b0f      	cmp	r3, #15
 800919e:	d9e9      	bls.n	8009174 <prvInitialiseNewTask+0x5c>
 80091a0:	e000      	b.n	80091a4 <prvInitialiseNewTask+0x8c>
		{
			break;
 80091a2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	2b37      	cmp	r3, #55	; 0x37
 80091b0:	d901      	bls.n	80091b6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091b2:	2337      	movs	r3, #55	; 0x37
 80091b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	2200      	movs	r2, #0
 80091c6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	3304      	adds	r3, #4
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fe ff39 	bl	8008044 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	3318      	adds	r3, #24
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe ff34 	bl	8008044 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	2200      	movs	r2, #0
 80091f6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	68f9      	ldr	r1, [r7, #12]
 8009204:	69b8      	ldr	r0, [r7, #24]
 8009206:	f001 f9e1 	bl	800a5cc <pxPortInitialiseStack>
 800920a:	4602      	mov	r2, r0
 800920c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800921c:	bf00      	nop
 800921e:	3720      	adds	r7, #32
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800922c:	f001 faf6 	bl	800a81c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009230:	4b2d      	ldr	r3, [pc, #180]	; (80092e8 <prvAddNewTaskToReadyList+0xc4>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3301      	adds	r3, #1
 8009236:	4a2c      	ldr	r2, [pc, #176]	; (80092e8 <prvAddNewTaskToReadyList+0xc4>)
 8009238:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800923a:	4b2c      	ldr	r3, [pc, #176]	; (80092ec <prvAddNewTaskToReadyList+0xc8>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d109      	bne.n	8009256 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009242:	4a2a      	ldr	r2, [pc, #168]	; (80092ec <prvAddNewTaskToReadyList+0xc8>)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009248:	4b27      	ldr	r3, [pc, #156]	; (80092e8 <prvAddNewTaskToReadyList+0xc4>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d110      	bne.n	8009272 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009250:	f000 fc0e 	bl	8009a70 <prvInitialiseTaskLists>
 8009254:	e00d      	b.n	8009272 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009256:	4b26      	ldr	r3, [pc, #152]	; (80092f0 <prvAddNewTaskToReadyList+0xcc>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d109      	bne.n	8009272 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800925e:	4b23      	ldr	r3, [pc, #140]	; (80092ec <prvAddNewTaskToReadyList+0xc8>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	429a      	cmp	r2, r3
 800926a:	d802      	bhi.n	8009272 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800926c:	4a1f      	ldr	r2, [pc, #124]	; (80092ec <prvAddNewTaskToReadyList+0xc8>)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009272:	4b20      	ldr	r3, [pc, #128]	; (80092f4 <prvAddNewTaskToReadyList+0xd0>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3301      	adds	r3, #1
 8009278:	4a1e      	ldr	r2, [pc, #120]	; (80092f4 <prvAddNewTaskToReadyList+0xd0>)
 800927a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800927c:	4b1d      	ldr	r3, [pc, #116]	; (80092f4 <prvAddNewTaskToReadyList+0xd0>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009288:	4b1b      	ldr	r3, [pc, #108]	; (80092f8 <prvAddNewTaskToReadyList+0xd4>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	d903      	bls.n	8009298 <prvAddNewTaskToReadyList+0x74>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	4a18      	ldr	r2, [pc, #96]	; (80092f8 <prvAddNewTaskToReadyList+0xd4>)
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4a15      	ldr	r2, [pc, #84]	; (80092fc <prvAddNewTaskToReadyList+0xd8>)
 80092a6:	441a      	add	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3304      	adds	r3, #4
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	f7fe fed5 	bl	800805e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092b4:	f001 fae0 	bl	800a878 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092b8:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <prvAddNewTaskToReadyList+0xcc>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00e      	beq.n	80092de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092c0:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <prvAddNewTaskToReadyList+0xc8>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d207      	bcs.n	80092de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092ce:	4b0c      	ldr	r3, [pc, #48]	; (8009300 <prvAddNewTaskToReadyList+0xdc>)
 80092d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000dfc 	.word	0x20000dfc
 80092ec:	20000928 	.word	0x20000928
 80092f0:	20000e08 	.word	0x20000e08
 80092f4:	20000e18 	.word	0x20000e18
 80092f8:	20000e04 	.word	0x20000e04
 80092fc:	2000092c 	.word	0x2000092c
 8009300:	e000ed04 	.word	0xe000ed04

08009304 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800930c:	2300      	movs	r3, #0
 800930e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d016      	beq.n	8009344 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009316:	4b13      	ldr	r3, [pc, #76]	; (8009364 <vTaskDelay+0x60>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d009      	beq.n	8009332 <vTaskDelay+0x2e>
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	60bb      	str	r3, [r7, #8]
 8009330:	e7fe      	b.n	8009330 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009332:	f000 f87f 	bl	8009434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009336:	2100      	movs	r1, #0
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fde9 	bl	8009f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800933e:	f000 f887 	bl	8009450 <xTaskResumeAll>
 8009342:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d107      	bne.n	800935a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800934a:	4b07      	ldr	r3, [pc, #28]	; (8009368 <vTaskDelay+0x64>)
 800934c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000e24 	.word	0x20000e24
 8009368:	e000ed04 	.word	0xe000ed04

0800936c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08a      	sub	sp, #40	; 0x28
 8009370:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009372:	2300      	movs	r3, #0
 8009374:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009376:	2300      	movs	r3, #0
 8009378:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800937a:	463a      	mov	r2, r7
 800937c:	1d39      	adds	r1, r7, #4
 800937e:	f107 0308 	add.w	r3, r7, #8
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fe0a 	bl	8007f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	9202      	str	r2, [sp, #8]
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	2300      	movs	r3, #0
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	2300      	movs	r3, #0
 8009398:	460a      	mov	r2, r1
 800939a:	4920      	ldr	r1, [pc, #128]	; (800941c <vTaskStartScheduler+0xb0>)
 800939c:	4820      	ldr	r0, [pc, #128]	; (8009420 <vTaskStartScheduler+0xb4>)
 800939e:	f7ff fe1d 	bl	8008fdc <xTaskCreateStatic>
 80093a2:	4602      	mov	r2, r0
 80093a4:	4b1f      	ldr	r3, [pc, #124]	; (8009424 <vTaskStartScheduler+0xb8>)
 80093a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80093a8:	4b1e      	ldr	r3, [pc, #120]	; (8009424 <vTaskStartScheduler+0xb8>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093b0:	2301      	movs	r3, #1
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	e001      	b.n	80093ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d102      	bne.n	80093c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80093c0:	f000 fdfa 	bl	8009fb8 <xTimerCreateTimerTask>
 80093c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d115      	bne.n	80093f8 <vTaskStartScheduler+0x8c>
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093de:	4b12      	ldr	r3, [pc, #72]	; (8009428 <vTaskStartScheduler+0xbc>)
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295
 80093e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093e6:	4b11      	ldr	r3, [pc, #68]	; (800942c <vTaskStartScheduler+0xc0>)
 80093e8:	2201      	movs	r2, #1
 80093ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80093ec:	4b10      	ldr	r3, [pc, #64]	; (8009430 <vTaskStartScheduler+0xc4>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093f2:	f001 f975 	bl	800a6e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093f6:	e00d      	b.n	8009414 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fe:	d109      	bne.n	8009414 <vTaskStartScheduler+0xa8>
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	60fb      	str	r3, [r7, #12]
 8009412:	e7fe      	b.n	8009412 <vTaskStartScheduler+0xa6>
}
 8009414:	bf00      	nop
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	0800af8c 	.word	0x0800af8c
 8009420:	08009a41 	.word	0x08009a41
 8009424:	20000e20 	.word	0x20000e20
 8009428:	20000e1c 	.word	0x20000e1c
 800942c:	20000e08 	.word	0x20000e08
 8009430:	20000e00 	.word	0x20000e00

08009434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009434:	b480      	push	{r7}
 8009436:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009438:	4b04      	ldr	r3, [pc, #16]	; (800944c <vTaskSuspendAll+0x18>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3301      	adds	r3, #1
 800943e:	4a03      	ldr	r2, [pc, #12]	; (800944c <vTaskSuspendAll+0x18>)
 8009440:	6013      	str	r3, [r2, #0]
}
 8009442:	bf00      	nop
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	20000e24 	.word	0x20000e24

08009450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800945a:	2300      	movs	r3, #0
 800945c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800945e:	4b41      	ldr	r3, [pc, #260]	; (8009564 <xTaskResumeAll+0x114>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d109      	bne.n	800947a <xTaskResumeAll+0x2a>
 8009466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	e7fe      	b.n	8009478 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800947a:	f001 f9cf 	bl	800a81c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800947e:	4b39      	ldr	r3, [pc, #228]	; (8009564 <xTaskResumeAll+0x114>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3b01      	subs	r3, #1
 8009484:	4a37      	ldr	r2, [pc, #220]	; (8009564 <xTaskResumeAll+0x114>)
 8009486:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009488:	4b36      	ldr	r3, [pc, #216]	; (8009564 <xTaskResumeAll+0x114>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d162      	bne.n	8009556 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009490:	4b35      	ldr	r3, [pc, #212]	; (8009568 <xTaskResumeAll+0x118>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d05e      	beq.n	8009556 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009498:	e02f      	b.n	80094fa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800949a:	4b34      	ldr	r3, [pc, #208]	; (800956c <xTaskResumeAll+0x11c>)
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	3318      	adds	r3, #24
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fe36 	bl	8008118 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe fe31 	bl	8008118 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ba:	4b2d      	ldr	r3, [pc, #180]	; (8009570 <xTaskResumeAll+0x120>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d903      	bls.n	80094ca <xTaskResumeAll+0x7a>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c6:	4a2a      	ldr	r2, [pc, #168]	; (8009570 <xTaskResumeAll+0x120>)
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4a27      	ldr	r2, [pc, #156]	; (8009574 <xTaskResumeAll+0x124>)
 80094d8:	441a      	add	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3304      	adds	r3, #4
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f7fe fdbc 	bl	800805e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ea:	4b23      	ldr	r3, [pc, #140]	; (8009578 <xTaskResumeAll+0x128>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d302      	bcc.n	80094fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80094f4:	4b21      	ldr	r3, [pc, #132]	; (800957c <xTaskResumeAll+0x12c>)
 80094f6:	2201      	movs	r2, #1
 80094f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094fa:	4b1c      	ldr	r3, [pc, #112]	; (800956c <xTaskResumeAll+0x11c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1cb      	bne.n	800949a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009508:	f000 fb4c 	bl	8009ba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800950c:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <xTaskResumeAll+0x130>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d010      	beq.n	800953a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009518:	f000 f846 	bl	80095a8 <xTaskIncrementTick>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009522:	4b16      	ldr	r3, [pc, #88]	; (800957c <xTaskResumeAll+0x12c>)
 8009524:	2201      	movs	r2, #1
 8009526:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3b01      	subs	r3, #1
 800952c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1f1      	bne.n	8009518 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009534:	4b12      	ldr	r3, [pc, #72]	; (8009580 <xTaskResumeAll+0x130>)
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800953a:	4b10      	ldr	r3, [pc, #64]	; (800957c <xTaskResumeAll+0x12c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d009      	beq.n	8009556 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009542:	2301      	movs	r3, #1
 8009544:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009546:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <xTaskResumeAll+0x134>)
 8009548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009556:	f001 f98f 	bl	800a878 <vPortExitCritical>

	return xAlreadyYielded;
 800955a:	68bb      	ldr	r3, [r7, #8]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20000e24 	.word	0x20000e24
 8009568:	20000dfc 	.word	0x20000dfc
 800956c:	20000dbc 	.word	0x20000dbc
 8009570:	20000e04 	.word	0x20000e04
 8009574:	2000092c 	.word	0x2000092c
 8009578:	20000928 	.word	0x20000928
 800957c:	20000e10 	.word	0x20000e10
 8009580:	20000e0c 	.word	0x20000e0c
 8009584:	e000ed04 	.word	0xe000ed04

08009588 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800958e:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <xTaskGetTickCount+0x1c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009594:	687b      	ldr	r3, [r7, #4]
}
 8009596:	4618      	mov	r0, r3
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	20000e00 	.word	0x20000e00

080095a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b2:	4b51      	ldr	r3, [pc, #324]	; (80096f8 <xTaskIncrementTick+0x150>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f040 808d 	bne.w	80096d6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095bc:	4b4f      	ldr	r3, [pc, #316]	; (80096fc <xTaskIncrementTick+0x154>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3301      	adds	r3, #1
 80095c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095c4:	4a4d      	ldr	r2, [pc, #308]	; (80096fc <xTaskIncrementTick+0x154>)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d11f      	bne.n	8009610 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80095d0:	4b4b      	ldr	r3, [pc, #300]	; (8009700 <xTaskIncrementTick+0x158>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d009      	beq.n	80095ee <xTaskIncrementTick+0x46>
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	e7fe      	b.n	80095ec <xTaskIncrementTick+0x44>
 80095ee:	4b44      	ldr	r3, [pc, #272]	; (8009700 <xTaskIncrementTick+0x158>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	4b43      	ldr	r3, [pc, #268]	; (8009704 <xTaskIncrementTick+0x15c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a41      	ldr	r2, [pc, #260]	; (8009700 <xTaskIncrementTick+0x158>)
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	4a41      	ldr	r2, [pc, #260]	; (8009704 <xTaskIncrementTick+0x15c>)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	4b41      	ldr	r3, [pc, #260]	; (8009708 <xTaskIncrementTick+0x160>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3301      	adds	r3, #1
 8009608:	4a3f      	ldr	r2, [pc, #252]	; (8009708 <xTaskIncrementTick+0x160>)
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	f000 faca 	bl	8009ba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009610:	4b3e      	ldr	r3, [pc, #248]	; (800970c <xTaskIncrementTick+0x164>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	429a      	cmp	r2, r3
 8009618:	d34e      	bcc.n	80096b8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800961a:	4b39      	ldr	r3, [pc, #228]	; (8009700 <xTaskIncrementTick+0x158>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <xTaskIncrementTick+0x80>
 8009624:	2301      	movs	r3, #1
 8009626:	e000      	b.n	800962a <xTaskIncrementTick+0x82>
 8009628:	2300      	movs	r3, #0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d004      	beq.n	8009638 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800962e:	4b37      	ldr	r3, [pc, #220]	; (800970c <xTaskIncrementTick+0x164>)
 8009630:	f04f 32ff 	mov.w	r2, #4294967295
 8009634:	601a      	str	r2, [r3, #0]
					break;
 8009636:	e03f      	b.n	80096b8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009638:	4b31      	ldr	r3, [pc, #196]	; (8009700 <xTaskIncrementTick+0x158>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	429a      	cmp	r2, r3
 800964e:	d203      	bcs.n	8009658 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009650:	4a2e      	ldr	r2, [pc, #184]	; (800970c <xTaskIncrementTick+0x164>)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6013      	str	r3, [r2, #0]
						break;
 8009656:	e02f      	b.n	80096b8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	3304      	adds	r3, #4
 800965c:	4618      	mov	r0, r3
 800965e:	f7fe fd5b 	bl	8008118 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009666:	2b00      	cmp	r3, #0
 8009668:	d004      	beq.n	8009674 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	3318      	adds	r3, #24
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe fd52 	bl	8008118 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009678:	4b25      	ldr	r3, [pc, #148]	; (8009710 <xTaskIncrementTick+0x168>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	429a      	cmp	r2, r3
 800967e:	d903      	bls.n	8009688 <xTaskIncrementTick+0xe0>
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	4a22      	ldr	r2, [pc, #136]	; (8009710 <xTaskIncrementTick+0x168>)
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	4613      	mov	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4a1f      	ldr	r2, [pc, #124]	; (8009714 <xTaskIncrementTick+0x16c>)
 8009696:	441a      	add	r2, r3
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	3304      	adds	r3, #4
 800969c:	4619      	mov	r1, r3
 800969e:	4610      	mov	r0, r2
 80096a0:	f7fe fcdd 	bl	800805e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a8:	4b1b      	ldr	r3, [pc, #108]	; (8009718 <xTaskIncrementTick+0x170>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d3b3      	bcc.n	800961a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80096b2:	2301      	movs	r3, #1
 80096b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096b6:	e7b0      	b.n	800961a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096b8:	4b17      	ldr	r3, [pc, #92]	; (8009718 <xTaskIncrementTick+0x170>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096be:	4915      	ldr	r1, [pc, #84]	; (8009714 <xTaskIncrementTick+0x16c>)
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	440b      	add	r3, r1
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d907      	bls.n	80096e0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80096d0:	2301      	movs	r3, #1
 80096d2:	617b      	str	r3, [r7, #20]
 80096d4:	e004      	b.n	80096e0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80096d6:	4b11      	ldr	r3, [pc, #68]	; (800971c <xTaskIncrementTick+0x174>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3301      	adds	r3, #1
 80096dc:	4a0f      	ldr	r2, [pc, #60]	; (800971c <xTaskIncrementTick+0x174>)
 80096de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80096e0:	4b0f      	ldr	r3, [pc, #60]	; (8009720 <xTaskIncrementTick+0x178>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80096e8:	2301      	movs	r3, #1
 80096ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80096ec:	697b      	ldr	r3, [r7, #20]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000e24 	.word	0x20000e24
 80096fc:	20000e00 	.word	0x20000e00
 8009700:	20000db4 	.word	0x20000db4
 8009704:	20000db8 	.word	0x20000db8
 8009708:	20000e14 	.word	0x20000e14
 800970c:	20000e1c 	.word	0x20000e1c
 8009710:	20000e04 	.word	0x20000e04
 8009714:	2000092c 	.word	0x2000092c
 8009718:	20000928 	.word	0x20000928
 800971c:	20000e0c 	.word	0x20000e0c
 8009720:	20000e10 	.word	0x20000e10

08009724 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800972a:	4b27      	ldr	r3, [pc, #156]	; (80097c8 <vTaskSwitchContext+0xa4>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009732:	4b26      	ldr	r3, [pc, #152]	; (80097cc <vTaskSwitchContext+0xa8>)
 8009734:	2201      	movs	r2, #1
 8009736:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009738:	e040      	b.n	80097bc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800973a:	4b24      	ldr	r3, [pc, #144]	; (80097cc <vTaskSwitchContext+0xa8>)
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009740:	4b23      	ldr	r3, [pc, #140]	; (80097d0 <vTaskSwitchContext+0xac>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]
 8009746:	e00f      	b.n	8009768 <vTaskSwitchContext+0x44>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <vTaskSwitchContext+0x3e>
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	607b      	str	r3, [r7, #4]
 8009760:	e7fe      	b.n	8009760 <vTaskSwitchContext+0x3c>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3b01      	subs	r3, #1
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	491a      	ldr	r1, [pc, #104]	; (80097d4 <vTaskSwitchContext+0xb0>)
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	4613      	mov	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	440b      	add	r3, r1
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d0e5      	beq.n	8009748 <vTaskSwitchContext+0x24>
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	4613      	mov	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4a13      	ldr	r2, [pc, #76]	; (80097d4 <vTaskSwitchContext+0xb0>)
 8009788:	4413      	add	r3, r2
 800978a:	60bb      	str	r3, [r7, #8]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	605a      	str	r2, [r3, #4]
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	3308      	adds	r3, #8
 800979e:	429a      	cmp	r2, r3
 80097a0:	d104      	bne.n	80097ac <vTaskSwitchContext+0x88>
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	605a      	str	r2, [r3, #4]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	4a09      	ldr	r2, [pc, #36]	; (80097d8 <vTaskSwitchContext+0xb4>)
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	4a06      	ldr	r2, [pc, #24]	; (80097d0 <vTaskSwitchContext+0xac>)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6013      	str	r3, [r2, #0]
}
 80097bc:	bf00      	nop
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	20000e24 	.word	0x20000e24
 80097cc:	20000e10 	.word	0x20000e10
 80097d0:	20000e04 	.word	0x20000e04
 80097d4:	2000092c 	.word	0x2000092c
 80097d8:	20000928 	.word	0x20000928

080097dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d109      	bne.n	8009800 <vTaskPlaceOnEventList+0x24>
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e7fe      	b.n	80097fe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009800:	4b07      	ldr	r3, [pc, #28]	; (8009820 <vTaskPlaceOnEventList+0x44>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3318      	adds	r3, #24
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7fe fc4c 	bl	80080a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800980e:	2101      	movs	r1, #1
 8009810:	6838      	ldr	r0, [r7, #0]
 8009812:	f000 fb7d 	bl	8009f10 <prvAddCurrentTaskToDelayedList>
}
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000928 	.word	0x20000928

08009824 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <vTaskPlaceOnEventListRestricted+0x26>
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	e7fe      	b.n	8009848 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800984a:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <vTaskPlaceOnEventListRestricted+0x50>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3318      	adds	r3, #24
 8009850:	4619      	mov	r1, r3
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f7fe fc03 	bl	800805e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800985e:	f04f 33ff 	mov.w	r3, #4294967295
 8009862:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009864:	6879      	ldr	r1, [r7, #4]
 8009866:	68b8      	ldr	r0, [r7, #8]
 8009868:	f000 fb52 	bl	8009f10 <prvAddCurrentTaskToDelayedList>
	}
 800986c:	bf00      	nop
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	20000928 	.word	0x20000928

08009878 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d109      	bne.n	80098a2 <xTaskRemoveFromEventList+0x2a>
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	e7fe      	b.n	80098a0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	3318      	adds	r3, #24
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fc36 	bl	8008118 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ac:	4b1d      	ldr	r3, [pc, #116]	; (8009924 <xTaskRemoveFromEventList+0xac>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d11d      	bne.n	80098f0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	3304      	adds	r3, #4
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fe fc2d 	bl	8008118 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c2:	4b19      	ldr	r3, [pc, #100]	; (8009928 <xTaskRemoveFromEventList+0xb0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d903      	bls.n	80098d2 <xTaskRemoveFromEventList+0x5a>
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ce:	4a16      	ldr	r2, [pc, #88]	; (8009928 <xTaskRemoveFromEventList+0xb0>)
 80098d0:	6013      	str	r3, [r2, #0]
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d6:	4613      	mov	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4a13      	ldr	r2, [pc, #76]	; (800992c <xTaskRemoveFromEventList+0xb4>)
 80098e0:	441a      	add	r2, r3
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	3304      	adds	r3, #4
 80098e6:	4619      	mov	r1, r3
 80098e8:	4610      	mov	r0, r2
 80098ea:	f7fe fbb8 	bl	800805e <vListInsertEnd>
 80098ee:	e005      	b.n	80098fc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	3318      	adds	r3, #24
 80098f4:	4619      	mov	r1, r3
 80098f6:	480e      	ldr	r0, [pc, #56]	; (8009930 <xTaskRemoveFromEventList+0xb8>)
 80098f8:	f7fe fbb1 	bl	800805e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009900:	4b0c      	ldr	r3, [pc, #48]	; (8009934 <xTaskRemoveFromEventList+0xbc>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009906:	429a      	cmp	r2, r3
 8009908:	d905      	bls.n	8009916 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800990a:	2301      	movs	r3, #1
 800990c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800990e:	4b0a      	ldr	r3, [pc, #40]	; (8009938 <xTaskRemoveFromEventList+0xc0>)
 8009910:	2201      	movs	r2, #1
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	e001      	b.n	800991a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009916:	2300      	movs	r3, #0
 8009918:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800991a:	697b      	ldr	r3, [r7, #20]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20000e24 	.word	0x20000e24
 8009928:	20000e04 	.word	0x20000e04
 800992c:	2000092c 	.word	0x2000092c
 8009930:	20000dbc 	.word	0x20000dbc
 8009934:	20000928 	.word	0x20000928
 8009938:	20000e10 	.word	0x20000e10

0800993c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009944:	4b06      	ldr	r3, [pc, #24]	; (8009960 <vTaskInternalSetTimeOutState+0x24>)
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800994c:	4b05      	ldr	r3, [pc, #20]	; (8009964 <vTaskInternalSetTimeOutState+0x28>)
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	605a      	str	r2, [r3, #4]
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	20000e14 	.word	0x20000e14
 8009964:	20000e00 	.word	0x20000e00

08009968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b088      	sub	sp, #32
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d109      	bne.n	800998c <xTaskCheckForTimeOut+0x24>
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	613b      	str	r3, [r7, #16]
 800998a:	e7fe      	b.n	800998a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d109      	bne.n	80099a6 <xTaskCheckForTimeOut+0x3e>
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	60fb      	str	r3, [r7, #12]
 80099a4:	e7fe      	b.n	80099a4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80099a6:	f000 ff39 	bl	800a81c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099aa:	4b1d      	ldr	r3, [pc, #116]	; (8009a20 <xTaskCheckForTimeOut+0xb8>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d102      	bne.n	80099ca <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099c4:	2300      	movs	r3, #0
 80099c6:	61fb      	str	r3, [r7, #28]
 80099c8:	e023      	b.n	8009a12 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	4b15      	ldr	r3, [pc, #84]	; (8009a24 <xTaskCheckForTimeOut+0xbc>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d007      	beq.n	80099e6 <xTaskCheckForTimeOut+0x7e>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	69ba      	ldr	r2, [r7, #24]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d302      	bcc.n	80099e6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80099e0:	2301      	movs	r3, #1
 80099e2:	61fb      	str	r3, [r7, #28]
 80099e4:	e015      	b.n	8009a12 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d20b      	bcs.n	8009a08 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	1ad2      	subs	r2, r2, r3
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff ff9d 	bl	800993c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a02:	2300      	movs	r3, #0
 8009a04:	61fb      	str	r3, [r7, #28]
 8009a06:	e004      	b.n	8009a12 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a12:	f000 ff31 	bl	800a878 <vPortExitCritical>

	return xReturn;
 8009a16:	69fb      	ldr	r3, [r7, #28]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3720      	adds	r7, #32
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20000e00 	.word	0x20000e00
 8009a24:	20000e14 	.word	0x20000e14

08009a28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a2c:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <vTaskMissedYield+0x14>)
 8009a2e:	2201      	movs	r2, #1
 8009a30:	601a      	str	r2, [r3, #0]
}
 8009a32:	bf00      	nop
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20000e10 	.word	0x20000e10

08009a40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a48:	f000 f852 	bl	8009af0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a4c:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <prvIdleTask+0x28>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d9f9      	bls.n	8009a48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a54:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <prvIdleTask+0x2c>)
 8009a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a64:	e7f0      	b.n	8009a48 <prvIdleTask+0x8>
 8009a66:	bf00      	nop
 8009a68:	2000092c 	.word	0x2000092c
 8009a6c:	e000ed04 	.word	0xe000ed04

08009a70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a76:	2300      	movs	r3, #0
 8009a78:	607b      	str	r3, [r7, #4]
 8009a7a:	e00c      	b.n	8009a96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4a12      	ldr	r2, [pc, #72]	; (8009ad0 <prvInitialiseTaskLists+0x60>)
 8009a88:	4413      	add	r3, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe faba 	bl	8008004 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3301      	adds	r3, #1
 8009a94:	607b      	str	r3, [r7, #4]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b37      	cmp	r3, #55	; 0x37
 8009a9a:	d9ef      	bls.n	8009a7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a9c:	480d      	ldr	r0, [pc, #52]	; (8009ad4 <prvInitialiseTaskLists+0x64>)
 8009a9e:	f7fe fab1 	bl	8008004 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009aa2:	480d      	ldr	r0, [pc, #52]	; (8009ad8 <prvInitialiseTaskLists+0x68>)
 8009aa4:	f7fe faae 	bl	8008004 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009aa8:	480c      	ldr	r0, [pc, #48]	; (8009adc <prvInitialiseTaskLists+0x6c>)
 8009aaa:	f7fe faab 	bl	8008004 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009aae:	480c      	ldr	r0, [pc, #48]	; (8009ae0 <prvInitialiseTaskLists+0x70>)
 8009ab0:	f7fe faa8 	bl	8008004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ab4:	480b      	ldr	r0, [pc, #44]	; (8009ae4 <prvInitialiseTaskLists+0x74>)
 8009ab6:	f7fe faa5 	bl	8008004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009aba:	4b0b      	ldr	r3, [pc, #44]	; (8009ae8 <prvInitialiseTaskLists+0x78>)
 8009abc:	4a05      	ldr	r2, [pc, #20]	; (8009ad4 <prvInitialiseTaskLists+0x64>)
 8009abe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <prvInitialiseTaskLists+0x7c>)
 8009ac2:	4a05      	ldr	r2, [pc, #20]	; (8009ad8 <prvInitialiseTaskLists+0x68>)
 8009ac4:	601a      	str	r2, [r3, #0]
}
 8009ac6:	bf00      	nop
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	2000092c 	.word	0x2000092c
 8009ad4:	20000d8c 	.word	0x20000d8c
 8009ad8:	20000da0 	.word	0x20000da0
 8009adc:	20000dbc 	.word	0x20000dbc
 8009ae0:	20000dd0 	.word	0x20000dd0
 8009ae4:	20000de8 	.word	0x20000de8
 8009ae8:	20000db4 	.word	0x20000db4
 8009aec:	20000db8 	.word	0x20000db8

08009af0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009af6:	e019      	b.n	8009b2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009af8:	f000 fe90 	bl	800a81c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009afc:	4b0f      	ldr	r3, [pc, #60]	; (8009b3c <prvCheckTasksWaitingTermination+0x4c>)
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3304      	adds	r3, #4
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fb05 	bl	8008118 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b0e:	4b0c      	ldr	r3, [pc, #48]	; (8009b40 <prvCheckTasksWaitingTermination+0x50>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	4a0a      	ldr	r2, [pc, #40]	; (8009b40 <prvCheckTasksWaitingTermination+0x50>)
 8009b16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b18:	4b0a      	ldr	r3, [pc, #40]	; (8009b44 <prvCheckTasksWaitingTermination+0x54>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	4a09      	ldr	r2, [pc, #36]	; (8009b44 <prvCheckTasksWaitingTermination+0x54>)
 8009b20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b22:	f000 fea9 	bl	800a878 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f80e 	bl	8009b48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b2c:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <prvCheckTasksWaitingTermination+0x54>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1e1      	bne.n	8009af8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b34:	bf00      	nop
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000dd0 	.word	0x20000dd0
 8009b40:	20000dfc 	.word	0x20000dfc
 8009b44:	20000de4 	.word	0x20000de4

08009b48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d108      	bne.n	8009b6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f001 f838 	bl	800abd4 <vPortFree>
				vPortFree( pxTCB );
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f001 f835 	bl	800abd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b6a:	e017      	b.n	8009b9c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d103      	bne.n	8009b7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 f82c 	bl	800abd4 <vPortFree>
	}
 8009b7c:	e00e      	b.n	8009b9c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d009      	beq.n	8009b9c <prvDeleteTCB+0x54>
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	e7fe      	b.n	8009b9a <prvDeleteTCB+0x52>
	}
 8009b9c:	bf00      	nop
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009baa:	4b0f      	ldr	r3, [pc, #60]	; (8009be8 <prvResetNextTaskUnblockTime+0x44>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <prvResetNextTaskUnblockTime+0x14>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e000      	b.n	8009bba <prvResetNextTaskUnblockTime+0x16>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d004      	beq.n	8009bc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009bbe:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <prvResetNextTaskUnblockTime+0x48>)
 8009bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009bc6:	e008      	b.n	8009bda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009bc8:	4b07      	ldr	r3, [pc, #28]	; (8009be8 <prvResetNextTaskUnblockTime+0x44>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	4a05      	ldr	r2, [pc, #20]	; (8009bec <prvResetNextTaskUnblockTime+0x48>)
 8009bd8:	6013      	str	r3, [r2, #0]
}
 8009bda:	bf00      	nop
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	20000db4 	.word	0x20000db4
 8009bec:	20000e1c 	.word	0x20000e1c

08009bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <xTaskGetSchedulerState+0x34>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d102      	bne.n	8009c04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	607b      	str	r3, [r7, #4]
 8009c02:	e008      	b.n	8009c16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c04:	4b08      	ldr	r3, [pc, #32]	; (8009c28 <xTaskGetSchedulerState+0x38>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d102      	bne.n	8009c12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	607b      	str	r3, [r7, #4]
 8009c10:	e001      	b.n	8009c16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c12:	2300      	movs	r3, #0
 8009c14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c16:	687b      	ldr	r3, [r7, #4]
	}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	20000e08 	.word	0x20000e08
 8009c28:	20000e24 	.word	0x20000e24

08009c2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d056      	beq.n	8009cf0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c46:	4b2d      	ldr	r3, [pc, #180]	; (8009cfc <xTaskPriorityInherit+0xd0>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d246      	bcs.n	8009cde <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	db06      	blt.n	8009c66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c58:	4b28      	ldr	r3, [pc, #160]	; (8009cfc <xTaskPriorityInherit+0xd0>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	6959      	ldr	r1, [r3, #20]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6e:	4613      	mov	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4a22      	ldr	r2, [pc, #136]	; (8009d00 <xTaskPriorityInherit+0xd4>)
 8009c78:	4413      	add	r3, r2
 8009c7a:	4299      	cmp	r1, r3
 8009c7c:	d101      	bne.n	8009c82 <xTaskPriorityInherit+0x56>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e000      	b.n	8009c84 <xTaskPriorityInherit+0x58>
 8009c82:	2300      	movs	r3, #0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d022      	beq.n	8009cce <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe fa43 	bl	8008118 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c92:	4b1a      	ldr	r3, [pc, #104]	; (8009cfc <xTaskPriorityInherit+0xd0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca0:	4b18      	ldr	r3, [pc, #96]	; (8009d04 <xTaskPriorityInherit+0xd8>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d903      	bls.n	8009cb0 <xTaskPriorityInherit+0x84>
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	4a15      	ldr	r2, [pc, #84]	; (8009d04 <xTaskPriorityInherit+0xd8>)
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4a10      	ldr	r2, [pc, #64]	; (8009d00 <xTaskPriorityInherit+0xd4>)
 8009cbe:	441a      	add	r2, r3
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f7fe f9c9 	bl	800805e <vListInsertEnd>
 8009ccc:	e004      	b.n	8009cd8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009cce:	4b0b      	ldr	r3, [pc, #44]	; (8009cfc <xTaskPriorityInherit+0xd0>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	e008      	b.n	8009cf0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ce2:	4b06      	ldr	r3, [pc, #24]	; (8009cfc <xTaskPriorityInherit+0xd0>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d201      	bcs.n	8009cf0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009cec:	2301      	movs	r3, #1
 8009cee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
	}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20000928 	.word	0x20000928
 8009d00:	2000092c 	.word	0x2000092c
 8009d04:	20000e04 	.word	0x20000e04

08009d08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d054      	beq.n	8009dc8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d1e:	4b2d      	ldr	r3, [pc, #180]	; (8009dd4 <xTaskPriorityDisinherit+0xcc>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d009      	beq.n	8009d3c <xTaskPriorityDisinherit+0x34>
 8009d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	60fb      	str	r3, [r7, #12]
 8009d3a:	e7fe      	b.n	8009d3a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d109      	bne.n	8009d58 <xTaskPriorityDisinherit+0x50>
 8009d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	60bb      	str	r3, [r7, #8]
 8009d56:	e7fe      	b.n	8009d56 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d5c:	1e5a      	subs	r2, r3, #1
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d02c      	beq.n	8009dc8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d128      	bne.n	8009dc8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe f9cc 	bl	8008118 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d98:	4b0f      	ldr	r3, [pc, #60]	; (8009dd8 <xTaskPriorityDisinherit+0xd0>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d903      	bls.n	8009da8 <xTaskPriorityDisinherit+0xa0>
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	4a0c      	ldr	r2, [pc, #48]	; (8009dd8 <xTaskPriorityDisinherit+0xd0>)
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4a09      	ldr	r2, [pc, #36]	; (8009ddc <xTaskPriorityDisinherit+0xd4>)
 8009db6:	441a      	add	r2, r3
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	f7fe f94d 	bl	800805e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009dc8:	697b      	ldr	r3, [r7, #20]
	}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20000928 	.word	0x20000928
 8009dd8:	20000e04 	.word	0x20000e04
 8009ddc:	2000092c 	.word	0x2000092c

08009de0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009dee:	2301      	movs	r3, #1
 8009df0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d06d      	beq.n	8009ed4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d109      	bne.n	8009e14 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	60fb      	str	r3, [r7, #12]
 8009e12:	e7fe      	b.n	8009e12 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d902      	bls.n	8009e24 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	61fb      	str	r3, [r7, #28]
 8009e22:	e002      	b.n	8009e2a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d04f      	beq.n	8009ed4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d14a      	bne.n	8009ed4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009e3e:	4b27      	ldr	r3, [pc, #156]	; (8009edc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d109      	bne.n	8009e5c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	60bb      	str	r3, [r7, #8]
 8009e5a:	e7fe      	b.n	8009e5a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	69fa      	ldr	r2, [r7, #28]
 8009e66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	db04      	blt.n	8009e7a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	6959      	ldr	r1, [r3, #20]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	4613      	mov	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4a15      	ldr	r2, [pc, #84]	; (8009ee0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009e8a:	4413      	add	r3, r2
 8009e8c:	4299      	cmp	r1, r3
 8009e8e:	d101      	bne.n	8009e94 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8009e90:	2301      	movs	r3, #1
 8009e92:	e000      	b.n	8009e96 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8009e94:	2300      	movs	r3, #0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01c      	beq.n	8009ed4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe f93a 	bl	8008118 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea8:	4b0e      	ldr	r3, [pc, #56]	; (8009ee4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d903      	bls.n	8009eb8 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	4a0b      	ldr	r2, [pc, #44]	; (8009ee4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009eb6:	6013      	str	r3, [r2, #0]
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4a06      	ldr	r2, [pc, #24]	; (8009ee0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009ec6:	441a      	add	r2, r3
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	f7fe f8c5 	bl	800805e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ed4:	bf00      	nop
 8009ed6:	3720      	adds	r7, #32
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	20000928 	.word	0x20000928
 8009ee0:	2000092c 	.word	0x2000092c
 8009ee4:	20000e04 	.word	0x20000e04

08009ee8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009eec:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d004      	beq.n	8009efe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009ef4:	4b05      	ldr	r3, [pc, #20]	; (8009f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009efa:	3201      	adds	r2, #1
 8009efc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009efe:	4b03      	ldr	r3, [pc, #12]	; (8009f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8009f00:	681b      	ldr	r3, [r3, #0]
	}
 8009f02:	4618      	mov	r0, r3
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	20000928 	.word	0x20000928

08009f10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f1a:	4b21      	ldr	r3, [pc, #132]	; (8009fa0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f20:	4b20      	ldr	r3, [pc, #128]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe f8f6 	bl	8008118 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f32:	d10a      	bne.n	8009f4a <prvAddCurrentTaskToDelayedList+0x3a>
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d007      	beq.n	8009f4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f3a:	4b1a      	ldr	r3, [pc, #104]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4819      	ldr	r0, [pc, #100]	; (8009fa8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009f44:	f7fe f88b 	bl	800805e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f48:	e026      	b.n	8009f98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4413      	add	r3, r2
 8009f50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f52:	4b14      	ldr	r3, [pc, #80]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d209      	bcs.n	8009f76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f62:	4b12      	ldr	r3, [pc, #72]	; (8009fac <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	4b0f      	ldr	r3, [pc, #60]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7fe f899 	bl	80080a6 <vListInsert>
}
 8009f74:	e010      	b.n	8009f98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f76:	4b0e      	ldr	r3, [pc, #56]	; (8009fb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	4b0a      	ldr	r3, [pc, #40]	; (8009fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3304      	adds	r3, #4
 8009f80:	4619      	mov	r1, r3
 8009f82:	4610      	mov	r0, r2
 8009f84:	f7fe f88f 	bl	80080a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f88:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d202      	bcs.n	8009f98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f92:	4a08      	ldr	r2, [pc, #32]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	6013      	str	r3, [r2, #0]
}
 8009f98:	bf00      	nop
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	20000e00 	.word	0x20000e00
 8009fa4:	20000928 	.word	0x20000928
 8009fa8:	20000de8 	.word	0x20000de8
 8009fac:	20000db8 	.word	0x20000db8
 8009fb0:	20000db4 	.word	0x20000db4
 8009fb4:	20000e1c 	.word	0x20000e1c

08009fb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08a      	sub	sp, #40	; 0x28
 8009fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fc2:	f000 fac3 	bl	800a54c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009fc6:	4b1c      	ldr	r3, [pc, #112]	; (800a038 <xTimerCreateTimerTask+0x80>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d021      	beq.n	800a012 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009fd6:	1d3a      	adds	r2, r7, #4
 8009fd8:	f107 0108 	add.w	r1, r7, #8
 8009fdc:	f107 030c 	add.w	r3, r7, #12
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fd fff5 	bl	8007fd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	9202      	str	r2, [sp, #8]
 8009fee:	9301      	str	r3, [sp, #4]
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	460a      	mov	r2, r1
 8009ff8:	4910      	ldr	r1, [pc, #64]	; (800a03c <xTimerCreateTimerTask+0x84>)
 8009ffa:	4811      	ldr	r0, [pc, #68]	; (800a040 <xTimerCreateTimerTask+0x88>)
 8009ffc:	f7fe ffee 	bl	8008fdc <xTaskCreateStatic>
 800a000:	4602      	mov	r2, r0
 800a002:	4b10      	ldr	r3, [pc, #64]	; (800a044 <xTimerCreateTimerTask+0x8c>)
 800a004:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a006:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <xTimerCreateTimerTask+0x8c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a00e:	2301      	movs	r3, #1
 800a010:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d109      	bne.n	800a02c <xTimerCreateTimerTask+0x74>
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	613b      	str	r3, [r7, #16]
 800a02a:	e7fe      	b.n	800a02a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a02c:	697b      	ldr	r3, [r7, #20]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	20000e58 	.word	0x20000e58
 800a03c:	0800af94 	.word	0x0800af94
 800a040:	0800a161 	.word	0x0800a161
 800a044:	20000e5c 	.word	0x20000e5c

0800a048 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b08a      	sub	sp, #40	; 0x28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a056:	2300      	movs	r3, #0
 800a058:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d109      	bne.n	800a074 <xTimerGenericCommand+0x2c>
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	623b      	str	r3, [r7, #32]
 800a072:	e7fe      	b.n	800a072 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a074:	4b19      	ldr	r3, [pc, #100]	; (800a0dc <xTimerGenericCommand+0x94>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d02a      	beq.n	800a0d2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b05      	cmp	r3, #5
 800a08c:	dc18      	bgt.n	800a0c0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a08e:	f7ff fdaf 	bl	8009bf0 <xTaskGetSchedulerState>
 800a092:	4603      	mov	r3, r0
 800a094:	2b02      	cmp	r3, #2
 800a096:	d109      	bne.n	800a0ac <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a098:	4b10      	ldr	r3, [pc, #64]	; (800a0dc <xTimerGenericCommand+0x94>)
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	f107 0110 	add.w	r1, r7, #16
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0a4:	f7fe f99c 	bl	80083e0 <xQueueGenericSend>
 800a0a8:	6278      	str	r0, [r7, #36]	; 0x24
 800a0aa:	e012      	b.n	800a0d2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <xTimerGenericCommand+0x94>)
 800a0ae:	6818      	ldr	r0, [r3, #0]
 800a0b0:	f107 0110 	add.w	r1, r7, #16
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f7fe f992 	bl	80083e0 <xQueueGenericSend>
 800a0bc:	6278      	str	r0, [r7, #36]	; 0x24
 800a0be:	e008      	b.n	800a0d2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0c0:	4b06      	ldr	r3, [pc, #24]	; (800a0dc <xTimerGenericCommand+0x94>)
 800a0c2:	6818      	ldr	r0, [r3, #0]
 800a0c4:	f107 0110 	add.w	r1, r7, #16
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	f7fe fa82 	bl	80085d4 <xQueueGenericSendFromISR>
 800a0d0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3728      	adds	r7, #40	; 0x28
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20000e58 	.word	0x20000e58

0800a0e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0ea:	4b1c      	ldr	r3, [pc, #112]	; (800a15c <prvProcessExpiredTimer+0x7c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fe f80d 	bl	8008118 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d121      	bne.n	800a14a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	699a      	ldr	r2, [r3, #24]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	18d1      	adds	r1, r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	6978      	ldr	r0, [r7, #20]
 800a114:	f000 f8c8 	bl	800a2a8 <prvInsertTimerInActiveList>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d015      	beq.n	800a14a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a11e:	2300      	movs	r3, #0
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	2300      	movs	r3, #0
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	2100      	movs	r1, #0
 800a128:	6978      	ldr	r0, [r7, #20]
 800a12a:	f7ff ff8d 	bl	800a048 <xTimerGenericCommand>
 800a12e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d109      	bne.n	800a14a <prvProcessExpiredTimer+0x6a>
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	e7fe      	b.n	800a148 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	6978      	ldr	r0, [r7, #20]
 800a150:	4798      	blx	r3
}
 800a152:	bf00      	nop
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20000e50 	.word	0x20000e50

0800a160 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a168:	f107 0308 	add.w	r3, r7, #8
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 f857 	bl	800a220 <prvGetNextExpireTime>
 800a172:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	4619      	mov	r1, r3
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 f803 	bl	800a184 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a17e:	f000 f8d5 	bl	800a32c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a182:	e7f1      	b.n	800a168 <prvTimerTask+0x8>

0800a184 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a18e:	f7ff f951 	bl	8009434 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a192:	f107 0308 	add.w	r3, r7, #8
 800a196:	4618      	mov	r0, r3
 800a198:	f000 f866 	bl	800a268 <prvSampleTimeNow>
 800a19c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d130      	bne.n	800a206 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10a      	bne.n	800a1c0 <prvProcessTimerOrBlockTask+0x3c>
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d806      	bhi.n	800a1c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1b2:	f7ff f94d 	bl	8009450 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1b6:	68f9      	ldr	r1, [r7, #12]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff ff91 	bl	800a0e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1be:	e024      	b.n	800a20a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d008      	beq.n	800a1d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1c6:	4b13      	ldr	r3, [pc, #76]	; (800a214 <prvProcessTimerOrBlockTask+0x90>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	bf0c      	ite	eq
 800a1d0:	2301      	moveq	r3, #1
 800a1d2:	2300      	movne	r3, #0
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1d8:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <prvProcessTimerOrBlockTask+0x94>)
 800a1da:	6818      	ldr	r0, [r3, #0]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f7fe fec5 	bl	8008f74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a1ea:	f7ff f931 	bl	8009450 <xTaskResumeAll>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10a      	bne.n	800a20a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a1f4:	4b09      	ldr	r3, [pc, #36]	; (800a21c <prvProcessTimerOrBlockTask+0x98>)
 800a1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	f3bf 8f6f 	isb	sy
}
 800a204:	e001      	b.n	800a20a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a206:	f7ff f923 	bl	8009450 <xTaskResumeAll>
}
 800a20a:	bf00      	nop
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20000e54 	.word	0x20000e54
 800a218:	20000e58 	.word	0x20000e58
 800a21c:	e000ed04 	.word	0xe000ed04

0800a220 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a228:	4b0e      	ldr	r3, [pc, #56]	; (800a264 <prvGetNextExpireTime+0x44>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	bf0c      	ite	eq
 800a232:	2301      	moveq	r3, #1
 800a234:	2300      	movne	r3, #0
 800a236:	b2db      	uxtb	r3, r3
 800a238:	461a      	mov	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d105      	bne.n	800a252 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <prvGetNextExpireTime+0x44>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e001      	b.n	800a256 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a252:	2300      	movs	r3, #0
 800a254:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a256:	68fb      	ldr	r3, [r7, #12]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	20000e50 	.word	0x20000e50

0800a268 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a270:	f7ff f98a 	bl	8009588 <xTaskGetTickCount>
 800a274:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a276:	4b0b      	ldr	r3, [pc, #44]	; (800a2a4 <prvSampleTimeNow+0x3c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d205      	bcs.n	800a28c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a280:	f000 f904 	bl	800a48c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	e002      	b.n	800a292 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a292:	4a04      	ldr	r2, [pc, #16]	; (800a2a4 <prvSampleTimeNow+0x3c>)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a298:	68fb      	ldr	r3, [r7, #12]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20000e60 	.word	0x20000e60

0800a2a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
 800a2b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d812      	bhi.n	800a2f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	1ad2      	subs	r2, r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d302      	bcc.n	800a2e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	e01b      	b.n	800a31a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2e2:	4b10      	ldr	r3, [pc, #64]	; (800a324 <prvInsertTimerInActiveList+0x7c>)
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	f7fd feda 	bl	80080a6 <vListInsert>
 800a2f2:	e012      	b.n	800a31a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d206      	bcs.n	800a30a <prvInsertTimerInActiveList+0x62>
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	429a      	cmp	r2, r3
 800a302:	d302      	bcc.n	800a30a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a304:	2301      	movs	r3, #1
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	e007      	b.n	800a31a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a30a:	4b07      	ldr	r3, [pc, #28]	; (800a328 <prvInsertTimerInActiveList+0x80>)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3304      	adds	r3, #4
 800a312:	4619      	mov	r1, r3
 800a314:	4610      	mov	r0, r2
 800a316:	f7fd fec6 	bl	80080a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a31a:	697b      	ldr	r3, [r7, #20]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20000e54 	.word	0x20000e54
 800a328:	20000e50 	.word	0x20000e50

0800a32c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08e      	sub	sp, #56	; 0x38
 800a330:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a332:	e099      	b.n	800a468 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	da17      	bge.n	800a36a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a33a:	1d3b      	adds	r3, r7, #4
 800a33c:	3304      	adds	r3, #4
 800a33e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	2b00      	cmp	r3, #0
 800a344:	d109      	bne.n	800a35a <prvProcessReceivedCommands+0x2e>
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	61fb      	str	r3, [r7, #28]
 800a358:	e7fe      	b.n	800a358 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a360:	6850      	ldr	r0, [r2, #4]
 800a362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a364:	6892      	ldr	r2, [r2, #8]
 800a366:	4611      	mov	r1, r2
 800a368:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	db7a      	blt.n	800a466 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d004      	beq.n	800a386 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	3304      	adds	r3, #4
 800a380:	4618      	mov	r0, r3
 800a382:	f7fd fec9 	bl	8008118 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a386:	463b      	mov	r3, r7
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff ff6d 	bl	800a268 <prvSampleTimeNow>
 800a38e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b09      	cmp	r3, #9
 800a394:	d868      	bhi.n	800a468 <prvProcessReceivedCommands+0x13c>
 800a396:	a201      	add	r2, pc, #4	; (adr r2, 800a39c <prvProcessReceivedCommands+0x70>)
 800a398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39c:	0800a3c5 	.word	0x0800a3c5
 800a3a0:	0800a3c5 	.word	0x0800a3c5
 800a3a4:	0800a3c5 	.word	0x0800a3c5
 800a3a8:	0800a469 	.word	0x0800a469
 800a3ac:	0800a41f 	.word	0x0800a41f
 800a3b0:	0800a455 	.word	0x0800a455
 800a3b4:	0800a3c5 	.word	0x0800a3c5
 800a3b8:	0800a3c5 	.word	0x0800a3c5
 800a3bc:	0800a469 	.word	0x0800a469
 800a3c0:	0800a41f 	.word	0x0800a41f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	18d1      	adds	r1, r2, r3
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3d2:	f7ff ff69 	bl	800a2a8 <prvInsertTimerInActiveList>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d045      	beq.n	800a468 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d13d      	bne.n	800a468 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	441a      	add	r2, r3
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3fe:	f7ff fe23 	bl	800a048 <xTimerGenericCommand>
 800a402:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d12e      	bne.n	800a468 <prvProcessReceivedCommands+0x13c>
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	61bb      	str	r3, [r7, #24]
 800a41c:	e7fe      	b.n	800a41c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	699b      	ldr	r3, [r3, #24]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d109      	bne.n	800a440 <prvProcessReceivedCommands+0x114>
 800a42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	617b      	str	r3, [r7, #20]
 800a43e:	e7fe      	b.n	800a43e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	699a      	ldr	r2, [r3, #24]
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	18d1      	adds	r1, r2, r3
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a44c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a44e:	f7ff ff2b 	bl	800a2a8 <prvInsertTimerInActiveList>
					break;
 800a452:	e009      	b.n	800a468 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d104      	bne.n	800a468 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800a45e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a460:	f000 fbb8 	bl	800abd4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a464:	e000      	b.n	800a468 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a466:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a468:	4b07      	ldr	r3, [pc, #28]	; (800a488 <prvProcessReceivedCommands+0x15c>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	1d39      	adds	r1, r7, #4
 800a46e:	2200      	movs	r2, #0
 800a470:	4618      	mov	r0, r3
 800a472:	f7fe f9cd 	bl	8008810 <xQueueReceive>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f47f af5b 	bne.w	800a334 <prvProcessReceivedCommands+0x8>
	}
}
 800a47e:	bf00      	nop
 800a480:	3730      	adds	r7, #48	; 0x30
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	20000e58 	.word	0x20000e58

0800a48c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b088      	sub	sp, #32
 800a490:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a492:	e044      	b.n	800a51e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a494:	4b2b      	ldr	r3, [pc, #172]	; (800a544 <prvSwitchTimerLists+0xb8>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a49e:	4b29      	ldr	r3, [pc, #164]	; (800a544 <prvSwitchTimerLists+0xb8>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fd fe33 	bl	8008118 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	69db      	ldr	r3, [r3, #28]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d12d      	bne.n	800a51e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d90e      	bls.n	800a4f2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4e0:	4b18      	ldr	r3, [pc, #96]	; (800a544 <prvSwitchTimerLists+0xb8>)
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	f7fd fddb 	bl	80080a6 <vListInsert>
 800a4f0:	e015      	b.n	800a51e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f7ff fda3 	bl	800a048 <xTimerGenericCommand>
 800a502:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d109      	bne.n	800a51e <prvSwitchTimerLists+0x92>
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	e7fe      	b.n	800a51c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a51e:	4b09      	ldr	r3, [pc, #36]	; (800a544 <prvSwitchTimerLists+0xb8>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1b5      	bne.n	800a494 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a528:	4b06      	ldr	r3, [pc, #24]	; (800a544 <prvSwitchTimerLists+0xb8>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a52e:	4b06      	ldr	r3, [pc, #24]	; (800a548 <prvSwitchTimerLists+0xbc>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a04      	ldr	r2, [pc, #16]	; (800a544 <prvSwitchTimerLists+0xb8>)
 800a534:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a536:	4a04      	ldr	r2, [pc, #16]	; (800a548 <prvSwitchTimerLists+0xbc>)
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	6013      	str	r3, [r2, #0]
}
 800a53c:	bf00      	nop
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	20000e50 	.word	0x20000e50
 800a548:	20000e54 	.word	0x20000e54

0800a54c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a552:	f000 f963 	bl	800a81c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a556:	4b15      	ldr	r3, [pc, #84]	; (800a5ac <prvCheckForValidListAndQueue+0x60>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d120      	bne.n	800a5a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a55e:	4814      	ldr	r0, [pc, #80]	; (800a5b0 <prvCheckForValidListAndQueue+0x64>)
 800a560:	f7fd fd50 	bl	8008004 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a564:	4813      	ldr	r0, [pc, #76]	; (800a5b4 <prvCheckForValidListAndQueue+0x68>)
 800a566:	f7fd fd4d 	bl	8008004 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a56a:	4b13      	ldr	r3, [pc, #76]	; (800a5b8 <prvCheckForValidListAndQueue+0x6c>)
 800a56c:	4a10      	ldr	r2, [pc, #64]	; (800a5b0 <prvCheckForValidListAndQueue+0x64>)
 800a56e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a570:	4b12      	ldr	r3, [pc, #72]	; (800a5bc <prvCheckForValidListAndQueue+0x70>)
 800a572:	4a10      	ldr	r2, [pc, #64]	; (800a5b4 <prvCheckForValidListAndQueue+0x68>)
 800a574:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a576:	2300      	movs	r3, #0
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	4b11      	ldr	r3, [pc, #68]	; (800a5c0 <prvCheckForValidListAndQueue+0x74>)
 800a57c:	4a11      	ldr	r2, [pc, #68]	; (800a5c4 <prvCheckForValidListAndQueue+0x78>)
 800a57e:	2110      	movs	r1, #16
 800a580:	200a      	movs	r0, #10
 800a582:	f7fd fe5b 	bl	800823c <xQueueGenericCreateStatic>
 800a586:	4602      	mov	r2, r0
 800a588:	4b08      	ldr	r3, [pc, #32]	; (800a5ac <prvCheckForValidListAndQueue+0x60>)
 800a58a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a58c:	4b07      	ldr	r3, [pc, #28]	; (800a5ac <prvCheckForValidListAndQueue+0x60>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d005      	beq.n	800a5a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a594:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <prvCheckForValidListAndQueue+0x60>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	490b      	ldr	r1, [pc, #44]	; (800a5c8 <prvCheckForValidListAndQueue+0x7c>)
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe fcc2 	bl	8008f24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5a0:	f000 f96a 	bl	800a878 <vPortExitCritical>
}
 800a5a4:	bf00      	nop
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	20000e58 	.word	0x20000e58
 800a5b0:	20000e28 	.word	0x20000e28
 800a5b4:	20000e3c 	.word	0x20000e3c
 800a5b8:	20000e50 	.word	0x20000e50
 800a5bc:	20000e54 	.word	0x20000e54
 800a5c0:	20000f04 	.word	0x20000f04
 800a5c4:	20000e64 	.word	0x20000e64
 800a5c8:	0800af9c 	.word	0x0800af9c

0800a5cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3b04      	subs	r3, #4
 800a5dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3b04      	subs	r3, #4
 800a5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	f023 0201 	bic.w	r2, r3, #1
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3b04      	subs	r3, #4
 800a5fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5fc:	4a0c      	ldr	r2, [pc, #48]	; (800a630 <pxPortInitialiseStack+0x64>)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3b14      	subs	r3, #20
 800a606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3b04      	subs	r3, #4
 800a612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f06f 0202 	mvn.w	r2, #2
 800a61a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	3b20      	subs	r3, #32
 800a620:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a622:	68fb      	ldr	r3, [r7, #12]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	0800a635 	.word	0x0800a635

0800a634 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a63e:	4b11      	ldr	r3, [pc, #68]	; (800a684 <prvTaskExitError+0x50>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a646:	d009      	beq.n	800a65c <prvTaskExitError+0x28>
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	e7fe      	b.n	800a65a <prvTaskExitError+0x26>
 800a65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a660:	f383 8811 	msr	BASEPRI, r3
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a66e:	bf00      	nop
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0fc      	beq.n	800a670 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a676:	bf00      	nop
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	20000048 	.word	0x20000048
	...

0800a690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a690:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <pxCurrentTCBConst2>)
 800a692:	6819      	ldr	r1, [r3, #0]
 800a694:	6808      	ldr	r0, [r1, #0]
 800a696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69a:	f380 8809 	msr	PSP, r0
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f04f 0000 	mov.w	r0, #0
 800a6a6:	f380 8811 	msr	BASEPRI, r0
 800a6aa:	4770      	bx	lr
 800a6ac:	f3af 8000 	nop.w

0800a6b0 <pxCurrentTCBConst2>:
 800a6b0:	20000928 	.word	0x20000928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop

0800a6b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6b8:	4808      	ldr	r0, [pc, #32]	; (800a6dc <prvPortStartFirstTask+0x24>)
 800a6ba:	6800      	ldr	r0, [r0, #0]
 800a6bc:	6800      	ldr	r0, [r0, #0]
 800a6be:	f380 8808 	msr	MSP, r0
 800a6c2:	f04f 0000 	mov.w	r0, #0
 800a6c6:	f380 8814 	msr	CONTROL, r0
 800a6ca:	b662      	cpsie	i
 800a6cc:	b661      	cpsie	f
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	df00      	svc	0
 800a6d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6da:	bf00      	nop
 800a6dc:	e000ed08 	.word	0xe000ed08

0800a6e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6e6:	4b44      	ldr	r3, [pc, #272]	; (800a7f8 <xPortStartScheduler+0x118>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a44      	ldr	r2, [pc, #272]	; (800a7fc <xPortStartScheduler+0x11c>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d109      	bne.n	800a704 <xPortStartScheduler+0x24>
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	613b      	str	r3, [r7, #16]
 800a702:	e7fe      	b.n	800a702 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a704:	4b3c      	ldr	r3, [pc, #240]	; (800a7f8 <xPortStartScheduler+0x118>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a3d      	ldr	r2, [pc, #244]	; (800a800 <xPortStartScheduler+0x120>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d109      	bne.n	800a722 <xPortStartScheduler+0x42>
 800a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	60fb      	str	r3, [r7, #12]
 800a720:	e7fe      	b.n	800a720 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a722:	4b38      	ldr	r3, [pc, #224]	; (800a804 <xPortStartScheduler+0x124>)
 800a724:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	22ff      	movs	r2, #255	; 0xff
 800a732:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a744:	b2da      	uxtb	r2, r3
 800a746:	4b30      	ldr	r3, [pc, #192]	; (800a808 <xPortStartScheduler+0x128>)
 800a748:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a74a:	4b30      	ldr	r3, [pc, #192]	; (800a80c <xPortStartScheduler+0x12c>)
 800a74c:	2207      	movs	r2, #7
 800a74e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a750:	e009      	b.n	800a766 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a752:	4b2e      	ldr	r3, [pc, #184]	; (800a80c <xPortStartScheduler+0x12c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3b01      	subs	r3, #1
 800a758:	4a2c      	ldr	r2, [pc, #176]	; (800a80c <xPortStartScheduler+0x12c>)
 800a75a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a75c:	78fb      	ldrb	r3, [r7, #3]
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	b2db      	uxtb	r3, r3
 800a764:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a766:	78fb      	ldrb	r3, [r7, #3]
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76e:	2b80      	cmp	r3, #128	; 0x80
 800a770:	d0ef      	beq.n	800a752 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a772:	4b26      	ldr	r3, [pc, #152]	; (800a80c <xPortStartScheduler+0x12c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f1c3 0307 	rsb	r3, r3, #7
 800a77a:	2b04      	cmp	r3, #4
 800a77c:	d009      	beq.n	800a792 <xPortStartScheduler+0xb2>
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	60bb      	str	r3, [r7, #8]
 800a790:	e7fe      	b.n	800a790 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a792:	4b1e      	ldr	r3, [pc, #120]	; (800a80c <xPortStartScheduler+0x12c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	021b      	lsls	r3, r3, #8
 800a798:	4a1c      	ldr	r2, [pc, #112]	; (800a80c <xPortStartScheduler+0x12c>)
 800a79a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a79c:	4b1b      	ldr	r3, [pc, #108]	; (800a80c <xPortStartScheduler+0x12c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7a4:	4a19      	ldr	r2, [pc, #100]	; (800a80c <xPortStartScheduler+0x12c>)
 800a7a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7b0:	4b17      	ldr	r3, [pc, #92]	; (800a810 <xPortStartScheduler+0x130>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a16      	ldr	r2, [pc, #88]	; (800a810 <xPortStartScheduler+0x130>)
 800a7b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7bc:	4b14      	ldr	r3, [pc, #80]	; (800a810 <xPortStartScheduler+0x130>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a13      	ldr	r2, [pc, #76]	; (800a810 <xPortStartScheduler+0x130>)
 800a7c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a7c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7c8:	f000 f8d6 	bl	800a978 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7cc:	4b11      	ldr	r3, [pc, #68]	; (800a814 <xPortStartScheduler+0x134>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7d2:	f000 f8f5 	bl	800a9c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7d6:	4b10      	ldr	r3, [pc, #64]	; (800a818 <xPortStartScheduler+0x138>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a0f      	ldr	r2, [pc, #60]	; (800a818 <xPortStartScheduler+0x138>)
 800a7dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7e2:	f7ff ff69 	bl	800a6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7e6:	f7fe ff9d 	bl	8009724 <vTaskSwitchContext>
	prvTaskExitError();
 800a7ea:	f7ff ff23 	bl	800a634 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	e000ed00 	.word	0xe000ed00
 800a7fc:	410fc271 	.word	0x410fc271
 800a800:	410fc270 	.word	0x410fc270
 800a804:	e000e400 	.word	0xe000e400
 800a808:	20000f54 	.word	0x20000f54
 800a80c:	20000f58 	.word	0x20000f58
 800a810:	e000ed20 	.word	0xe000ed20
 800a814:	20000048 	.word	0x20000048
 800a818:	e000ef34 	.word	0xe000ef34

0800a81c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a834:	4b0e      	ldr	r3, [pc, #56]	; (800a870 <vPortEnterCritical+0x54>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3301      	adds	r3, #1
 800a83a:	4a0d      	ldr	r2, [pc, #52]	; (800a870 <vPortEnterCritical+0x54>)
 800a83c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a83e:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <vPortEnterCritical+0x54>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d10e      	bne.n	800a864 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a846:	4b0b      	ldr	r3, [pc, #44]	; (800a874 <vPortEnterCritical+0x58>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d009      	beq.n	800a864 <vPortEnterCritical+0x48>
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	603b      	str	r3, [r7, #0]
 800a862:	e7fe      	b.n	800a862 <vPortEnterCritical+0x46>
	}
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	20000048 	.word	0x20000048
 800a874:	e000ed04 	.word	0xe000ed04

0800a878 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a87e:	4b11      	ldr	r3, [pc, #68]	; (800a8c4 <vPortExitCritical+0x4c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d109      	bne.n	800a89a <vPortExitCritical+0x22>
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	607b      	str	r3, [r7, #4]
 800a898:	e7fe      	b.n	800a898 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a89a:	4b0a      	ldr	r3, [pc, #40]	; (800a8c4 <vPortExitCritical+0x4c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	4a08      	ldr	r2, [pc, #32]	; (800a8c4 <vPortExitCritical+0x4c>)
 800a8a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8a4:	4b07      	ldr	r3, [pc, #28]	; (800a8c4 <vPortExitCritical+0x4c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d104      	bne.n	800a8b6 <vPortExitCritical+0x3e>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8b6:	bf00      	nop
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	20000048 	.word	0x20000048
	...

0800a8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8d0:	f3ef 8009 	mrs	r0, PSP
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	4b15      	ldr	r3, [pc, #84]	; (800a930 <pxCurrentTCBConst>)
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	f01e 0f10 	tst.w	lr, #16
 800a8e0:	bf08      	it	eq
 800a8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ea:	6010      	str	r0, [r2, #0]
 800a8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8f4:	f380 8811 	msr	BASEPRI, r0
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f7fe ff10 	bl	8009724 <vTaskSwitchContext>
 800a904:	f04f 0000 	mov.w	r0, #0
 800a908:	f380 8811 	msr	BASEPRI, r0
 800a90c:	bc09      	pop	{r0, r3}
 800a90e:	6819      	ldr	r1, [r3, #0]
 800a910:	6808      	ldr	r0, [r1, #0]
 800a912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a916:	f01e 0f10 	tst.w	lr, #16
 800a91a:	bf08      	it	eq
 800a91c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a920:	f380 8809 	msr	PSP, r0
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	f3af 8000 	nop.w

0800a930 <pxCurrentTCBConst>:
 800a930:	20000928 	.word	0x20000928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop

0800a938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a950:	f7fe fe2a 	bl	80095a8 <xTaskIncrementTick>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d003      	beq.n	800a962 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a95a:	4b06      	ldr	r3, [pc, #24]	; (800a974 <SysTick_Handler+0x3c>)
 800a95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	2300      	movs	r3, #0
 800a964:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	e000ed04 	.word	0xe000ed04

0800a978 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a978:	b480      	push	{r7}
 800a97a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a97c:	4b0b      	ldr	r3, [pc, #44]	; (800a9ac <vPortSetupTimerInterrupt+0x34>)
 800a97e:	2200      	movs	r2, #0
 800a980:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a982:	4b0b      	ldr	r3, [pc, #44]	; (800a9b0 <vPortSetupTimerInterrupt+0x38>)
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a988:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <vPortSetupTimerInterrupt+0x3c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a0a      	ldr	r2, [pc, #40]	; (800a9b8 <vPortSetupTimerInterrupt+0x40>)
 800a98e:	fba2 2303 	umull	r2, r3, r2, r3
 800a992:	099b      	lsrs	r3, r3, #6
 800a994:	4a09      	ldr	r2, [pc, #36]	; (800a9bc <vPortSetupTimerInterrupt+0x44>)
 800a996:	3b01      	subs	r3, #1
 800a998:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a99a:	4b04      	ldr	r3, [pc, #16]	; (800a9ac <vPortSetupTimerInterrupt+0x34>)
 800a99c:	2207      	movs	r2, #7
 800a99e:	601a      	str	r2, [r3, #0]
}
 800a9a0:	bf00      	nop
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	e000e010 	.word	0xe000e010
 800a9b0:	e000e018 	.word	0xe000e018
 800a9b4:	20000034 	.word	0x20000034
 800a9b8:	10624dd3 	.word	0x10624dd3
 800a9bc:	e000e014 	.word	0xe000e014

0800a9c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9d0 <vPortEnableVFP+0x10>
 800a9c4:	6801      	ldr	r1, [r0, #0]
 800a9c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a9ca:	6001      	str	r1, [r0, #0]
 800a9cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9ce:	bf00      	nop
 800a9d0:	e000ed88 	.word	0xe000ed88

0800a9d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9da:	f3ef 8305 	mrs	r3, IPSR
 800a9de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b0f      	cmp	r3, #15
 800a9e4:	d913      	bls.n	800aa0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9e6:	4a16      	ldr	r2, [pc, #88]	; (800aa40 <vPortValidateInterruptPriority+0x6c>)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9f0:	4b14      	ldr	r3, [pc, #80]	; (800aa44 <vPortValidateInterruptPriority+0x70>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	7afa      	ldrb	r2, [r7, #11]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d209      	bcs.n	800aa0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	607b      	str	r3, [r7, #4]
 800aa0c:	e7fe      	b.n	800aa0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa0e:	4b0e      	ldr	r3, [pc, #56]	; (800aa48 <vPortValidateInterruptPriority+0x74>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa16:	4b0d      	ldr	r3, [pc, #52]	; (800aa4c <vPortValidateInterruptPriority+0x78>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d909      	bls.n	800aa32 <vPortValidateInterruptPriority+0x5e>
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	603b      	str	r3, [r7, #0]
 800aa30:	e7fe      	b.n	800aa30 <vPortValidateInterruptPriority+0x5c>
	}
 800aa32:	bf00      	nop
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	e000e3f0 	.word	0xe000e3f0
 800aa44:	20000f54 	.word	0x20000f54
 800aa48:	e000ed0c 	.word	0xe000ed0c
 800aa4c:	20000f58 	.word	0x20000f58

0800aa50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08a      	sub	sp, #40	; 0x28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa5c:	f7fe fcea 	bl	8009434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa60:	4b57      	ldr	r3, [pc, #348]	; (800abc0 <pvPortMalloc+0x170>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa68:	f000 f90c 	bl	800ac84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa6c:	4b55      	ldr	r3, [pc, #340]	; (800abc4 <pvPortMalloc+0x174>)
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4013      	ands	r3, r2
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f040 808c 	bne.w	800ab92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01c      	beq.n	800aaba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800aa80:	2208      	movs	r2, #8
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4413      	add	r3, r2
 800aa86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f003 0307 	and.w	r3, r3, #7
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d013      	beq.n	800aaba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f023 0307 	bic.w	r3, r3, #7
 800aa98:	3308      	adds	r3, #8
 800aa9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f003 0307 	and.w	r3, r3, #7
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d009      	beq.n	800aaba <pvPortMalloc+0x6a>
 800aaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	617b      	str	r3, [r7, #20]
 800aab8:	e7fe      	b.n	800aab8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d068      	beq.n	800ab92 <pvPortMalloc+0x142>
 800aac0:	4b41      	ldr	r3, [pc, #260]	; (800abc8 <pvPortMalloc+0x178>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d863      	bhi.n	800ab92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aaca:	4b40      	ldr	r3, [pc, #256]	; (800abcc <pvPortMalloc+0x17c>)
 800aacc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aace:	4b3f      	ldr	r3, [pc, #252]	; (800abcc <pvPortMalloc+0x17c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aad4:	e004      	b.n	800aae0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d903      	bls.n	800aaf2 <pvPortMalloc+0xa2>
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1f1      	bne.n	800aad6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aaf2:	4b33      	ldr	r3, [pc, #204]	; (800abc0 <pvPortMalloc+0x170>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d04a      	beq.n	800ab92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2208      	movs	r2, #8
 800ab02:	4413      	add	r3, r2
 800ab04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	6a3b      	ldr	r3, [r7, #32]
 800ab0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	685a      	ldr	r2, [r3, #4]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	1ad2      	subs	r2, r2, r3
 800ab16:	2308      	movs	r3, #8
 800ab18:	005b      	lsls	r3, r3, #1
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d91e      	bls.n	800ab5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4413      	add	r3, r2
 800ab24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	f003 0307 	and.w	r3, r3, #7
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d009      	beq.n	800ab44 <pvPortMalloc+0xf4>
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	613b      	str	r3, [r7, #16]
 800ab42:	e7fe      	b.n	800ab42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	1ad2      	subs	r2, r2, r3
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab56:	69b8      	ldr	r0, [r7, #24]
 800ab58:	f000 f8f6 	bl	800ad48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab5c:	4b1a      	ldr	r3, [pc, #104]	; (800abc8 <pvPortMalloc+0x178>)
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	4a18      	ldr	r2, [pc, #96]	; (800abc8 <pvPortMalloc+0x178>)
 800ab68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab6a:	4b17      	ldr	r3, [pc, #92]	; (800abc8 <pvPortMalloc+0x178>)
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	4b18      	ldr	r3, [pc, #96]	; (800abd0 <pvPortMalloc+0x180>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d203      	bcs.n	800ab7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab76:	4b14      	ldr	r3, [pc, #80]	; (800abc8 <pvPortMalloc+0x178>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a15      	ldr	r2, [pc, #84]	; (800abd0 <pvPortMalloc+0x180>)
 800ab7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	685a      	ldr	r2, [r3, #4]
 800ab82:	4b10      	ldr	r3, [pc, #64]	; (800abc4 <pvPortMalloc+0x174>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	431a      	orrs	r2, r3
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8e:	2200      	movs	r2, #0
 800ab90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab92:	f7fe fc5d 	bl	8009450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	f003 0307 	and.w	r3, r3, #7
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d009      	beq.n	800abb4 <pvPortMalloc+0x164>
 800aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	60fb      	str	r3, [r7, #12]
 800abb2:	e7fe      	b.n	800abb2 <pvPortMalloc+0x162>
	return pvReturn;
 800abb4:	69fb      	ldr	r3, [r7, #28]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3728      	adds	r7, #40	; 0x28
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20004b64 	.word	0x20004b64
 800abc4:	20004b70 	.word	0x20004b70
 800abc8:	20004b68 	.word	0x20004b68
 800abcc:	20004b5c 	.word	0x20004b5c
 800abd0:	20004b6c 	.word	0x20004b6c

0800abd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d046      	beq.n	800ac74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abe6:	2308      	movs	r3, #8
 800abe8:	425b      	negs	r3, r3
 800abea:	697a      	ldr	r2, [r7, #20]
 800abec:	4413      	add	r3, r2
 800abee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	4b20      	ldr	r3, [pc, #128]	; (800ac7c <vPortFree+0xa8>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4013      	ands	r3, r2
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d109      	bne.n	800ac16 <vPortFree+0x42>
 800ac02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	60fb      	str	r3, [r7, #12]
 800ac14:	e7fe      	b.n	800ac14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d009      	beq.n	800ac32 <vPortFree+0x5e>
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	60bb      	str	r3, [r7, #8]
 800ac30:	e7fe      	b.n	800ac30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	4b11      	ldr	r3, [pc, #68]	; (800ac7c <vPortFree+0xa8>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d019      	beq.n	800ac74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d115      	bne.n	800ac74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	4b0b      	ldr	r3, [pc, #44]	; (800ac7c <vPortFree+0xa8>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	43db      	mvns	r3, r3
 800ac52:	401a      	ands	r2, r3
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac58:	f7fe fbec 	bl	8009434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	685a      	ldr	r2, [r3, #4]
 800ac60:	4b07      	ldr	r3, [pc, #28]	; (800ac80 <vPortFree+0xac>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4413      	add	r3, r2
 800ac66:	4a06      	ldr	r2, [pc, #24]	; (800ac80 <vPortFree+0xac>)
 800ac68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac6a:	6938      	ldr	r0, [r7, #16]
 800ac6c:	f000 f86c 	bl	800ad48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ac70:	f7fe fbee 	bl	8009450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac74:	bf00      	nop
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	20004b70 	.word	0x20004b70
 800ac80:	20004b68 	.word	0x20004b68

0800ac84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ac8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac90:	4b27      	ldr	r3, [pc, #156]	; (800ad30 <prvHeapInit+0xac>)
 800ac92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f003 0307 	and.w	r3, r3, #7
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00c      	beq.n	800acb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	3307      	adds	r3, #7
 800aca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f023 0307 	bic.w	r3, r3, #7
 800acaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	4a1f      	ldr	r2, [pc, #124]	; (800ad30 <prvHeapInit+0xac>)
 800acb4:	4413      	add	r3, r2
 800acb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acbc:	4a1d      	ldr	r2, [pc, #116]	; (800ad34 <prvHeapInit+0xb0>)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800acc2:	4b1c      	ldr	r3, [pc, #112]	; (800ad34 <prvHeapInit+0xb0>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	4413      	add	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acd0:	2208      	movs	r2, #8
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	1a9b      	subs	r3, r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f023 0307 	bic.w	r3, r3, #7
 800acde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4a15      	ldr	r2, [pc, #84]	; (800ad38 <prvHeapInit+0xb4>)
 800ace4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ace6:	4b14      	ldr	r3, [pc, #80]	; (800ad38 <prvHeapInit+0xb4>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2200      	movs	r2, #0
 800acec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acee:	4b12      	ldr	r3, [pc, #72]	; (800ad38 <prvHeapInit+0xb4>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	1ad2      	subs	r2, r2, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad04:	4b0c      	ldr	r3, [pc, #48]	; (800ad38 <prvHeapInit+0xb4>)
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	4a0a      	ldr	r2, [pc, #40]	; (800ad3c <prvHeapInit+0xb8>)
 800ad12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	4a09      	ldr	r2, [pc, #36]	; (800ad40 <prvHeapInit+0xbc>)
 800ad1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad1c:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <prvHeapInit+0xc0>)
 800ad1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad22:	601a      	str	r2, [r3, #0]
}
 800ad24:	bf00      	nop
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	20000f5c 	.word	0x20000f5c
 800ad34:	20004b5c 	.word	0x20004b5c
 800ad38:	20004b64 	.word	0x20004b64
 800ad3c:	20004b6c 	.word	0x20004b6c
 800ad40:	20004b68 	.word	0x20004b68
 800ad44:	20004b70 	.word	0x20004b70

0800ad48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad50:	4b28      	ldr	r3, [pc, #160]	; (800adf4 <prvInsertBlockIntoFreeList+0xac>)
 800ad52:	60fb      	str	r3, [r7, #12]
 800ad54:	e002      	b.n	800ad5c <prvInsertBlockIntoFreeList+0x14>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d8f7      	bhi.n	800ad56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	4413      	add	r3, r2
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d108      	bne.n	800ad8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	441a      	add	r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	441a      	add	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d118      	bne.n	800add0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	4b15      	ldr	r3, [pc, #84]	; (800adf8 <prvInsertBlockIntoFreeList+0xb0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d00d      	beq.n	800adc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	441a      	add	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	e008      	b.n	800add8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800adc6:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <prvInsertBlockIntoFreeList+0xb0>)
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	e003      	b.n	800add8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	d002      	beq.n	800ade6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ade6:	bf00      	nop
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	20004b5c 	.word	0x20004b5c
 800adf8:	20004b64 	.word	0x20004b64

0800adfc <__libc_init_array>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	4e0d      	ldr	r6, [pc, #52]	; (800ae34 <__libc_init_array+0x38>)
 800ae00:	4c0d      	ldr	r4, [pc, #52]	; (800ae38 <__libc_init_array+0x3c>)
 800ae02:	1ba4      	subs	r4, r4, r6
 800ae04:	10a4      	asrs	r4, r4, #2
 800ae06:	2500      	movs	r5, #0
 800ae08:	42a5      	cmp	r5, r4
 800ae0a:	d109      	bne.n	800ae20 <__libc_init_array+0x24>
 800ae0c:	4e0b      	ldr	r6, [pc, #44]	; (800ae3c <__libc_init_array+0x40>)
 800ae0e:	4c0c      	ldr	r4, [pc, #48]	; (800ae40 <__libc_init_array+0x44>)
 800ae10:	f000 f884 	bl	800af1c <_init>
 800ae14:	1ba4      	subs	r4, r4, r6
 800ae16:	10a4      	asrs	r4, r4, #2
 800ae18:	2500      	movs	r5, #0
 800ae1a:	42a5      	cmp	r5, r4
 800ae1c:	d105      	bne.n	800ae2a <__libc_init_array+0x2e>
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}
 800ae20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae24:	4798      	blx	r3
 800ae26:	3501      	adds	r5, #1
 800ae28:	e7ee      	b.n	800ae08 <__libc_init_array+0xc>
 800ae2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae2e:	4798      	blx	r3
 800ae30:	3501      	adds	r5, #1
 800ae32:	e7f2      	b.n	800ae1a <__libc_init_array+0x1e>
 800ae34:	0800b860 	.word	0x0800b860
 800ae38:	0800b860 	.word	0x0800b860
 800ae3c:	0800b860 	.word	0x0800b860
 800ae40:	0800b864 	.word	0x0800b864

0800ae44 <__itoa>:
 800ae44:	1e93      	subs	r3, r2, #2
 800ae46:	2b22      	cmp	r3, #34	; 0x22
 800ae48:	b510      	push	{r4, lr}
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	d904      	bls.n	800ae58 <__itoa+0x14>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	700b      	strb	r3, [r1, #0]
 800ae52:	461c      	mov	r4, r3
 800ae54:	4620      	mov	r0, r4
 800ae56:	bd10      	pop	{r4, pc}
 800ae58:	2a0a      	cmp	r2, #10
 800ae5a:	d109      	bne.n	800ae70 <__itoa+0x2c>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	da07      	bge.n	800ae70 <__itoa+0x2c>
 800ae60:	232d      	movs	r3, #45	; 0x2d
 800ae62:	700b      	strb	r3, [r1, #0]
 800ae64:	4240      	negs	r0, r0
 800ae66:	2101      	movs	r1, #1
 800ae68:	4421      	add	r1, r4
 800ae6a:	f000 f819 	bl	800aea0 <__utoa>
 800ae6e:	e7f1      	b.n	800ae54 <__itoa+0x10>
 800ae70:	2100      	movs	r1, #0
 800ae72:	e7f9      	b.n	800ae68 <__itoa+0x24>

0800ae74 <itoa>:
 800ae74:	f7ff bfe6 	b.w	800ae44 <__itoa>

0800ae78 <memcpy>:
 800ae78:	b510      	push	{r4, lr}
 800ae7a:	1e43      	subs	r3, r0, #1
 800ae7c:	440a      	add	r2, r1
 800ae7e:	4291      	cmp	r1, r2
 800ae80:	d100      	bne.n	800ae84 <memcpy+0xc>
 800ae82:	bd10      	pop	{r4, pc}
 800ae84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae8c:	e7f7      	b.n	800ae7e <memcpy+0x6>

0800ae8e <memset>:
 800ae8e:	4402      	add	r2, r0
 800ae90:	4603      	mov	r3, r0
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d100      	bne.n	800ae98 <memset+0xa>
 800ae96:	4770      	bx	lr
 800ae98:	f803 1b01 	strb.w	r1, [r3], #1
 800ae9c:	e7f9      	b.n	800ae92 <memset+0x4>
	...

0800aea0 <__utoa>:
 800aea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aea2:	4b1d      	ldr	r3, [pc, #116]	; (800af18 <__utoa+0x78>)
 800aea4:	b08b      	sub	sp, #44	; 0x2c
 800aea6:	4605      	mov	r5, r0
 800aea8:	460c      	mov	r4, r1
 800aeaa:	466e      	mov	r6, sp
 800aeac:	f103 0c20 	add.w	ip, r3, #32
 800aeb0:	6818      	ldr	r0, [r3, #0]
 800aeb2:	6859      	ldr	r1, [r3, #4]
 800aeb4:	4637      	mov	r7, r6
 800aeb6:	c703      	stmia	r7!, {r0, r1}
 800aeb8:	3308      	adds	r3, #8
 800aeba:	4563      	cmp	r3, ip
 800aebc:	463e      	mov	r6, r7
 800aebe:	d1f7      	bne.n	800aeb0 <__utoa+0x10>
 800aec0:	6818      	ldr	r0, [r3, #0]
 800aec2:	791b      	ldrb	r3, [r3, #4]
 800aec4:	713b      	strb	r3, [r7, #4]
 800aec6:	1e93      	subs	r3, r2, #2
 800aec8:	2b22      	cmp	r3, #34	; 0x22
 800aeca:	6038      	str	r0, [r7, #0]
 800aecc:	f04f 0300 	mov.w	r3, #0
 800aed0:	d904      	bls.n	800aedc <__utoa+0x3c>
 800aed2:	7023      	strb	r3, [r4, #0]
 800aed4:	461c      	mov	r4, r3
 800aed6:	4620      	mov	r0, r4
 800aed8:	b00b      	add	sp, #44	; 0x2c
 800aeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aedc:	1e66      	subs	r6, r4, #1
 800aede:	fbb5 f0f2 	udiv	r0, r5, r2
 800aee2:	af0a      	add	r7, sp, #40	; 0x28
 800aee4:	fb02 5510 	mls	r5, r2, r0, r5
 800aee8:	443d      	add	r5, r7
 800aeea:	1c59      	adds	r1, r3, #1
 800aeec:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800aef0:	f806 5f01 	strb.w	r5, [r6, #1]!
 800aef4:	4605      	mov	r5, r0
 800aef6:	b968      	cbnz	r0, 800af14 <__utoa+0x74>
 800aef8:	5460      	strb	r0, [r4, r1]
 800aefa:	4423      	add	r3, r4
 800aefc:	4622      	mov	r2, r4
 800aefe:	1b19      	subs	r1, r3, r4
 800af00:	1b10      	subs	r0, r2, r4
 800af02:	4281      	cmp	r1, r0
 800af04:	dde7      	ble.n	800aed6 <__utoa+0x36>
 800af06:	7811      	ldrb	r1, [r2, #0]
 800af08:	7818      	ldrb	r0, [r3, #0]
 800af0a:	f802 0b01 	strb.w	r0, [r2], #1
 800af0e:	f803 1901 	strb.w	r1, [r3], #-1
 800af12:	e7f4      	b.n	800aefe <__utoa+0x5e>
 800af14:	460b      	mov	r3, r1
 800af16:	e7e2      	b.n	800aede <__utoa+0x3e>
 800af18:	0800b830 	.word	0x0800b830

0800af1c <_init>:
 800af1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1e:	bf00      	nop
 800af20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af22:	bc08      	pop	{r3}
 800af24:	469e      	mov	lr, r3
 800af26:	4770      	bx	lr

0800af28 <_fini>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	bf00      	nop
 800af2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2e:	bc08      	pop	{r3}
 800af30:	469e      	mov	lr, r3
 800af32:	4770      	bx	lr
